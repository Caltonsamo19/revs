require('dotenv').config();
const { Client, LocalAuth } = require('whatsapp-web.js');
const qrcode = require('qrcode-terminal');
const fs = require('fs').promises;
const fssync = require('fs');
const path = require('path');
const axios = require('axios'); // npm install axios

// === GERENCIAMENTO VIA PM2 ===
// A limpeza de cache e reinicializa√ß√£o agora s√£o feitas pelo PM2
// atrav√©s do script restart-bots.js

// === SISTEMA DE NOTIFICA√á√ïES DE REINICIALIZA√á√ÉO ===
const ARQUIVO_SINAL_RESTART = path.join(__dirname, '.restart_signal.json');

// Fun√ß√£o para enviar notifica√ß√£o em todos os grupos
async function notificarGrupos(mensagem) {
    try {
        const chats = await client.getChats();
        const grupos = chats.filter(chat => chat.isGroup);

        console.log(`üì¢ Enviando notifica√ß√£o para ${grupos.length} grupos...`);

        for (const grupo of grupos) {
            try {
                await grupo.sendMessage(mensagem);
                console.log(`‚úÖ Notifica√ß√£o enviada para: ${grupo.name}`);
                await new Promise(resolve => setTimeout(resolve, 1000)); // Delay entre mensagens
            } catch (error) {
                console.error(`‚ùå Erro ao notificar grupo ${grupo.name}:`, error.message);
            }
        }
    } catch (error) {
        console.error('‚ùå Erro ao notificar grupos:', error.message);
    }
}

// Verificar se h√° sinal para notificar antes de desligar
async function verificarSinalRestart() {
    try {
        if (fssync.existsSync(ARQUIVO_SINAL_RESTART)) {
            const sinal = JSON.parse(await fs.readFile(ARQUIVO_SINAL_RESTART, 'utf-8'));

            if (sinal.tipo === 'pre-restart') {
                console.log('üîî Sinal de pr√©-reinicializa√ß√£o detectado!');

                const horaAtual = new Date().toLocaleTimeString('pt-BR');
                await notificarGrupos(`‚ö†Ô∏è *AVISO DE MANUTEN√á√ÉO*\n\nüîß O bot ser√° reiniciado para manuten√ß√£o preventiva\n‚è±Ô∏è Hor√°rio: ${horaAtual}\nüéØ Objetivo: Manter o sistema r√°pido e saud√°vel\n‚è≥ Tempo estimado: 1-2 minutos\n\n_Aguarde alguns instantes..._`);

                // Aguardar 3 segundos para garantir que as mensagens foram enviadas
                await new Promise(resolve => setTimeout(resolve, 3000));

                // Marcar como notificado e aguardando restart
                await fs.writeFile(ARQUIVO_SINAL_RESTART, JSON.stringify({
                    tipo: 'aguardando-restart',
                    horaNotificacao: new Date().toISOString()
                }));

                console.log('‚úÖ Grupos notificados, aguardando PM2 reiniciar...');
            }
        }
    } catch (error) {
        console.error('‚ùå Erro ao verificar sinal de restart:', error.message);
    }
}

// Verificar se acabou de reiniciar e notificar
async function verificarPosRestart() {
    try {
        if (fssync.existsSync(ARQUIVO_SINAL_RESTART)) {
            const sinal = JSON.parse(await fs.readFile(ARQUIVO_SINAL_RESTART, 'utf-8'));

            if (sinal.tipo === 'aguardando-restart') {
                console.log('‚úÖ Bot reiniciado! Notificando grupos...');

                // Aguardar 5 segundos para garantir que o WhatsApp est√° conectado
                await new Promise(resolve => setTimeout(resolve, 5000));

                const horaAtual = new Date().toLocaleTimeString('pt-BR');
                await notificarGrupos(`‚úÖ *BOT ONLINE*\n\nüéâ Manuten√ß√£o conclu√≠da com sucesso!\n‚è∞ Hor√°rio: ${horaAtual}\nüíö Sistema otimizado e funcionando normalmente\n\n_Todos os servi√ßos est√£o operacionais!_`);

                // Remover arquivo de sinal
                await fs.unlink(ARQUIVO_SINAL_RESTART);
                console.log('‚úÖ Grupos notificados sobre reconex√£o!');
            }
        }
    } catch (error) {
        console.error('‚ùå Erro ao verificar p√≥s-restart:', error.message);
    }
}

// Verificar sinais periodicamente (a cada 10 segundos)
setInterval(verificarSinalRestart, 10000);

// === AXIOS SIMPLIFICADO (SEGUINDO PADR√ÉO BOT1) ===
const axiosInstance = axios.create({
    timeout: 60000, // 60 segundos - toler√¢ncia a conex√µes lentas
    maxRedirects: 3,
    headers: {
        'User-Agent': 'WhatsApp-Bot/1.0'
    }
});

// === FUN√á√ÉO DE RETRY COM BACKOFF EXPONENCIAL ===
async function axiosComRetry(config, maxTentativas = 3) {
    for (let tentativa = 1; tentativa <= maxTentativas; tentativa++) {
        try {
            const response = await axiosInstance(config);
            return response;
        } catch (error) {
            const ehTimeout = error.code === 'ECONNABORTED' || error.message.includes('timeout');
            const ehUltimaTentativa = tentativa === maxTentativas;

            if (ehTimeout && !ehUltimaTentativa) {
                const delayMs = Math.min(1000 * Math.pow(2, tentativa - 1), 10000); // Max 10s
                console.log(`‚è≥ Timeout na tentativa ${tentativa}/${maxTentativas}, aguardando ${delayMs}ms antes de tentar novamente...`);
                await new Promise(resolve => setTimeout(resolve, delayMs));
                continue;
            }

            throw error; // Se n√£o √© timeout ou √© √∫ltima tentativa, lan√ßa o erro
        }
    }
}

// === SISTEMA DE LOGS OTIMIZADO (MODO SILENCIOSO) ===
const SILENT_MODE = true; // Reduzir logs desnecess√°rios para performance
const LOG_LEVEL = {
    ERROR: 0,   // Sempre mostrar erros
    WARN: 1,    // Mostrar avisos importantes
    INFO: 2,    // Mostrar informa√ß√µes essenciais
    DEBUG: 3    // Mostrar debug (desabilitado em modo silencioso)
};

function smartLog(level, message, ...args) {
    if (SILENT_MODE && level === LOG_LEVEL.DEBUG) return; // Pular logs debug
    if (level <= LOG_LEVEL.WARN || !SILENT_MODE) {
        console.log(message, ...args);
    }
}

// === CACHE ADMIN SIMPLIFICADO (SEGUINDO PADR√ÉO BOT1) ===
const adminCache = new Map();
const ADMIN_CACHE_TTL = 5 * 60 * 1000; // 5 minutos

function getAdminFromCache(userId) {
    const entry = adminCache.get(userId);
    if (!entry || Date.now() - entry.timestamp > ADMIN_CACHE_TTL) {
        adminCache.delete(userId);
        return null;
    }
    return entry.isAdmin;
}

function setAdminCache(userId, isAdmin) {
    adminCache.set(userId, {
        isAdmin,
        timestamp: Date.now()
    });
}

// === IMPORTAR A IA ===
const WhatsAppAI = require('./whatsapp_ai');

// === IMPORTAR SISTEMA DE PACOTES ===
const SistemaPacotes = require('./sistema_pacotes');

// === IMPORTAR SISTEMA DE COMPRAS ===
const SistemaCompras = require('./sistema_compras');

// === IMPORTAR SISTEMA DE RELAT√ìRIOS ===
const SistemaRelatorios = require('./sistema_relatorios');

// === IMPORTAR SISTEMA DE B√îNUS ===
const SistemaBonus = require('./sistema_bonus');

// === CONFIGURA√á√ÉO GOOGLE SHEETS - BOT RETALHO (SCRIPT PR√ìPRIO) ===
const GOOGLE_SHEETS_CONFIG = {
    scriptUrl: process.env.GOOGLE_SHEETS_SCRIPT_URL_RETALHO || 'https://script.google.com/macros/s/AKfycbyMilUC5bYKGXV95LR4MmyaRHzMf6WCmXeuztpN0tDpQ9_2qkgCxMipSVqYK_Q6twZG/exec',
    planilhaUrl: 'https://docs.google.com/spreadsheets/d/1vIv1Y0Hiu6NHEG37ubbFoa_vfbEe6sAb9I4JH-P38BQ/edit',
    planilhaId: '1vIv1Y0Hiu6NHEG37ubbFoa_vfbEe6sAb9I4JH-P38BQ',
    timeout: 30000,
    retryAttempts: 3,
    retryDelay: 2000
};

// === CONFIGURA√á√ÉO DE PAGAMENTOS (MESMA PLANILHA DO BOT ATACADO) ===
const PAGAMENTOS_CONFIG = {
    scriptUrl: 'https://script.google.com/macros/s/AKfycbzzifHGu1JXc2etzG3vqK5Jd3ihtULKezUTQQIDJNsr6tXx3CmVmKkOlsld0x1Feo0H/exec',
    timeout: 30000
};

console.log(`üìä Google Sheets configurado`);

// Fun√ß√£o helper para reply com fallback
async function safeReply(message, client, texto) {
    try {
        await message.reply(texto);
    } catch (error) {
        console.log('‚ö†Ô∏è Erro no reply, usando sendMessage como fallback:', error.message);
        try {
            await client.sendMessage(message.from, texto);
        } catch (fallbackError) {
            console.error('‚ùå Erro tamb√©m no sendMessage fallback:', fallbackError.message);
            throw fallbackError;
        }
    }
}

// Criar inst√¢ncia do cliente (SEGUINDO PADR√ÉO BOT1)
const client = new Client({
    authStrategy: new LocalAuth({
        clientId: "bot_retalho" // Simplificado como bot1
    }),
    puppeteer: {
        headless: true,
        args: [
            '--no-sandbox',
            '--disable-setuid-sandbox',
            '--disable-dev-shm-usage',
            '--disable-extensions',
            '--no-first-run',
            '--no-default-browser-check',
            '--disable-background-timer-throttling',
            '--disable-backgrounding-occluded-windows',
            '--disable-renderer-backgrounding',
            '--disable-features=TranslateUI',
            '--disable-ipc-flooding-protection'
        ],
        timeout: 60000
    }
});

// === INICIALIZAR A IA ===
require('dotenv').config();
const ia = new WhatsAppAI(process.env.OPENAI_API_KEY);

// === SISTEMA DE PACOTES E B√îNUS (ser√£o inicializados ap√≥s WhatsApp conectar) ===
let sistemaPacotes = null;
let sistemaCompras = null;
let sistemaBonus = null;

// REMOVIDO: Sistema de encaminhamento de mensagens
// (Movido para outro bot)

// === SISTEMA DE FILA ASS√çNCRONA DE MENSAGENS ===
class MessageQueue {
    constructor() {
        this.queue = [];
        this.processing = false;
        this.concurrency = 3; // Processar at√© 3 mensagens simultaneamente
        this.activeJobs = 0;
        this.maxQueueSize = 1000; // Limite da fila para evitar overflow
    }

    async add(messageData, handler) {
        if (this.queue.length >= this.maxQueueSize) {
            console.log(`‚ö†Ô∏è QUEUE: Fila cheia (${this.maxQueueSize}), descartando mensagem mais antiga`);
            this.queue.shift();
        }

        this.queue.push({ messageData, handler, timestamp: Date.now() });
        this.processQueue();
    }

    async processQueue() {
        if (this.processing || this.activeJobs >= this.concurrency || this.queue.length === 0) {
            return;
        }

        this.processing = true;

        while (this.queue.length > 0 && this.activeJobs < this.concurrency) {
            const job = this.queue.shift();
            this.activeJobs++;

            // Processar job em paralelo sem await
            this.processJob(job).finally(() => {
                this.activeJobs--;
                this.processQueue(); // Continuar processando
            });
        }

        this.processing = false;
    }

    async processJob(job) {
        try {
            const { messageData, handler, timestamp } = job;
            const waitTime = Date.now() - timestamp;

            if (waitTime > 30000) { // Descartar mensagens muito antigas (30s)
                console.log(`‚è∞ QUEUE: Mensagem descartada por timeout (${waitTime}ms)`);
                return;
            }

            smartLog(LOG_LEVEL.DEBUG, `üì§ QUEUE: Processando mensagem (fila: ${this.queue.length}, ativos: ${this.activeJobs})`);
            await handler(messageData);

        } catch (error) {
            console.error(`‚ùå QUEUE: Erro ao processar mensagem:`, error);
        }
    }

    getStats() {
        return {
            queueSize: this.queue.length,
            activeJobs: this.activeJobs,
            processing: this.processing
        };
    }
}

const messageQueue = new MessageQueue();

// REMOVIDO: Fila de mensagens (sistema movido para outro bot)

// === SISTEMA DE CACHE DE DADOS OTIMIZADO COM CLEANUP AUTOM√ÅTICO ===
// === CACHE DE TRANSA√á√ïES SIMPLIFICADO (SEGUINDO PADR√ÉO BOT1) ===
let cacheTransacoes = new Map();

// === SISTEMA DE RETRY SILENCIOSO PARA PAGAMENTOS ===
let pagamentosPendentes = {}; // {id: {dados do pedido}}
let timerRetryPagamentos = null;
const ARQUIVO_PAGAMENTOS_PENDENTES = './pagamentos_pendentes.json';
const RETRY_INTERVAL = 60000; // 60 segundos
const RETRY_TIMEOUT = 30 * 60 * 1000; // 30 minutos
const MAX_RETRY_ATTEMPTS = 3; // M√°ximo 3 tentativas por pagamento

// === SISTEMA DE REFER√äNCIAS E B√îNUS ===
let codigosReferencia = {}; // codigo -> dados do dono
let referenciasClientes = {}; // cliente -> dados da referencia
let bonusSaldos = {}; // cliente -> saldo e historico
let pedidosSaque = {}; // referencia -> dados do pedido
let membrosEntrada = {}; // {grupoId: {memberId: dataEntrada}}

// Arquivos de persist√™ncia
const ARQUIVO_REFERENCIAS = './dados_referencias.json';
const ARQUIVO_BONUS = './dados_bonus.json';
const ARQUIVO_CODIGOS = './dados_codigos.json';
const ARQUIVO_SAQUES = './dados_saques.json';
const ARQUIVO_MEMBROS = './dados_membros_entrada.json';

// === FUN√á√ïES DO SISTEMA DE REFER√äNCIA ===

let ultimosParticipantes = {}; // {grupoId: [participantIds]} - cache dos participantes

// === CACHE PARA RASTREAR MEMBROS J√Å PROCESSADOS VIA GROUP-JOIN ===
let membrosProcessadosViaEvent = new Set(); // Evita processamento duplicado

// Sistema autom√°tico de detec√ß√£o de novos membros
async function iniciarMonitoramentoMembros() {
    console.log('‚è∏Ô∏è Monitoramento autom√°tico de novos membros est√° DESATIVADO');
    // Fun√ß√£o desativada completamente - n√£o faz nada
    return;
}

// Verificar novos membros em todos os grupos monitorados
async function verificarNovosMembros() {
    for (const grupoId of Object.keys(CONFIGURACAO_GRUPOS)) {
        try {
            await detectarNovosMembrosGrupo(grupoId);
        } catch (error) {
            // Silencioso para n√£o poluir logs
        }
    }
}

// Detectar novos membros em um grupo espec√≠fico
async function detectarNovosMembrosGrupo(grupoId) {
    try {
        const chat = await client.getChatById(grupoId);
        const participants = await chat.participants;
        const participantIds = participants.map(p => p.id._serialized);
        
        // Se √© a primeira vez que verificamos este grupo
        if (!ultimosParticipantes[grupoId]) {
            ultimosParticipantes[grupoId] = participantIds;
            return;
        }
        
        // Encontrar novos participantes
        const novosParticipantes = participantIds.filter(id => 
            !ultimosParticipantes[grupoId].includes(id)
        );
        
        // Processar novos membros
        for (const participantId of novosParticipantes) {
            await processarNovoMembro(grupoId, participantId);
        }
        
        // Atualizar cache
        ultimosParticipantes[grupoId] = participantIds;
        
    } catch (error) {
        // Silencioso - grupo pode n√£o existir ou bot n√£o ter acesso
    }
}

// Processar novo membro detectado
async function processarNovoMembro(grupoId, participantId) {
    try {
        const configGrupo = getConfiguracaoGrupo(grupoId);
        if (!configGrupo) return;

        console.log(`üëã Novo membro detectado via POLLING: ${participantId}`);

        // Verificar se j√° foi processado via event 'group-join'
        const membroKey = `${grupoId}_${participantId}`;
        if (membrosProcessadosViaEvent.has(membroKey)) {
            console.log(`‚úÖ Membro ${participantId} j√° foi processado via event 'group-join' - pulando...`);
            return;
        }

        // SISTEMA AUTOM√ÅTICO DESATIVADO - Usu√°rio deve usar c√≥digo manual
        console.log(`üì¢ Sistema autom√°tico desativado - novo membro deve usar c√≥digo do convidador`);

        // Registrar entrada do membro
        await registrarEntradaMembro(grupoId, participantId);

    } catch (error) {
        console.error('‚ùå Erro ao processar novo membro:', error);
    }
}

// SISTEMA DE DETEC√á√ÉO INTELIGENTE - CORRIGIDO
async function tentarDetectarConvidador(grupoId, novoMembroId) {
    try {
        console.log(`üîç DETEC√á√ÉO: Analisando quem adicionou ${novoMembroId}...`);

        const chat = await client.getChatById(grupoId);
        const participants = await chat.participants;

        // 1. ESTRAT√âGIA: Filtrar participantes que est√£o na lista ADMINISTRADORES_GLOBAIS
        const admins = participants.filter(p => {
            // Verificar se o ID est√° diretamente na lista
            if (ADMINISTRADORES_GLOBAIS.includes(p.id._serialized)) return true;
            // Se for @lid, verificar se est√° mapeado
            if (p.id._serialized.includes('@lid') && MAPEAMENTO_IDS[p.id._serialized]) {
                return ADMINISTRADORES_GLOBAIS.includes(MAPEAMENTO_IDS[p.id._serialized]);
            }
            return false;
        }).filter(p => p.id._serialized !== novoMembroId);

        if (admins.length === 0) {
            console.log(`‚ùå DETEC√á√ÉO: Nenhum admin da lista encontrado no grupo`);
            return null;
        }

        // 2. L√ìGICA INTELIGENTE: Buscar o admin mais prov√°vel
        const hojeISO = new Date().toISOString().split('T')[0];

        // Verificar quantas refer√™ncias cada admin criou hoje
        const adminStats = admins.map(admin => {
            const adminId = admin.id._serialized;
            const referenciasHoje = Object.keys(referenciasClientes).filter(clienteId => {
                const ref = referenciasClientes[clienteId];
                return ref.convidadoPor === adminId && ref.dataRegistro?.startsWith(hojeISO);
            }).length;

            return { adminId, referenciasHoje, nome: admin.pushname || 'Admin' };
        });

        // Ordenar por menos refer√™ncias criadas (mais justo distribuir)
        adminStats.sort((a, b) => a.referenciasHoje - b.referenciasHoje);

        // 3. REGRAS DE SELE√á√ÉO INTELIGENTE:
        const adminEscolhido = adminStats[0];

        // Se o admin com menos refer√™ncias tem muito poucas (0-2), √© um bom candidato
        if (adminEscolhido.referenciasHoje <= 2) {
            console.log(`üéØ DETEC√á√ÉO: Selecionado ${adminEscolhido.nome} (${adminEscolhido.referenciasHoje} refs hoje)`);
            return await criarReferenciaAutomaticaInteligente(adminEscolhido.adminId, novoMembroId, grupoId);
        }

        // Se todos os admins j√° t√™m muitas refer√™ncias, usar distribui√ß√£o rotativa
        console.log(`‚öñÔ∏è DETEC√á√ÉO: Usando distribui√ß√£o rotativa entre admins`);
        return await criarReferenciaAutomaticaInteligente(adminEscolhido.adminId, novoMembroId, grupoId);

        /* C√ìDIGO ANTIGO COMENTADO - CAUSAVA FALSAS REFER√äNCIAS
        const chat = await client.getChatById(grupoId);
        const participants = await chat.participants;
        const admins = participants.filter(p => p.isAdmin && p.id._serialized !== novoMembroId);

        if (admins.length > 0) {
            const possivelConvidador = admins[0].id._serialized;
            console.log(`üéØ BACKUP: Assumindo que ${possivelConvidador} adicionou ${novoMembroId}`);

            const hojeISO = new Date().toISOString().split('T')[0];
            const referenciasHoje = Object.keys(referenciasClientes).filter(clienteId => {
                const ref = referenciasClientes[clienteId];
                return ref.convidadoPor === possivelConvidador &&
                       ref.dataRegistro?.startsWith(hojeISO);
            }).length;

            if (referenciasHoje >= 5) {
                console.log(`‚ö†Ô∏è BACKUP: ${possivelConvidador} j√° tem ${referenciasHoje} refer√™ncias hoje, pulando...`);
                return false;
            }

            const resultado = await criarReferenciaAutomaticaBackup(possivelConvidador, novoMembroId, grupoId);
            console.log(`üîó BACKUP: Resultado da cria√ß√£o: ${resultado ? 'SUCESSO' : 'FALHOU'}`);

            return resultado;
        } else {
            console.log(`‚ùå BACKUP: Nenhum admin encontrado no grupo`);
            return false;
        }
        */

    } catch (error) {
        console.error('‚ùå Erro ao tentar detectar convidador (backup):', error);
        return null;
    }
}

// === DETEC√á√ÉO DE CONVIDADOR VIA AN√ÅLISE DE MENSAGENS ===
async function detectarConvidadorViaMensagens(grupoId, novoMembroId) {
    try {
        console.log(`üîç AN√ÅLISE: Detectando convidador via mensagens para ${novoMembroId}...`);

        // Obter hist√≥rico de mensagens recentes do grupo (√∫ltimos 10 minutos)
        const chat = await client.getChatById(grupoId);
        const agora = Date.now();
        const limiteTempo = agora - (10 * 60 * 1000); // 10 minutos atr√°s

        // Buscar mensagens recentes
        const mensagens = await chat.fetchMessages({ limit: 100 });
        console.log(`üìú Analisando ${mensagens.length} mensagens recentes...`);

        let convidadorDetectado = null;
        let confiabilidade = 0;

        // 1. PRIORIDADE M√ÅXIMA: Buscar mensagens de sistema do WhatsApp
        for (const mensagem of mensagens) {
            // Pular mensagens antigas
            if (mensagem.timestamp * 1000 < limiteTempo) {
                continue;
            }

            // Buscar mensagens de sistema (aqueles placeholders cinzentos)
            const isSistema = mensagem.type === 'notification' ||
                             mensagem.type === 'group_notification' ||
                             mensagem.type === 'GROUP_NOTIFICATION' ||
                             mensagem.type === 'NOTIFICATION';

            if (isSistema || (mensagem.body && (mensagem.body.includes('adicionou') || mensagem.body.includes('added')))) {
                console.log(`üîî NOTIFICA√á√ÉO SISTEMA:`, {
                    type: mensagem.type,
                    body: mensagem.body,
                    author: mensagem.author,
                    timestamp: new Date(mensagem.timestamp * 1000).toLocaleString()
                });

                // Tentar extrair quem adicionou da mensagem do sistema
                if (mensagem.body) {
                    const nomeNovoMembro = await obterNomeContato(novoMembroId);

                    // Padr√µes mais abrangentes para detectar adi√ß√£o
                    const padroesAdicao = [
                        new RegExp(`([\\w\\s]+)\\s+(adicionou|added)\\s+.*${nomeNovoMembro.split(' ')[0]}`, 'i'),
                        new RegExp(`([\\w\\s]+)\\s+(adicionou|added)\\s+.*${nomeNovoMembro}`, 'i'),
                        new RegExp(`(.+)\\s+(adicionou|added)\\s+(.+)`, 'i') // Padr√£o gen√©rico
                    ];

                    for (const regex of padroesAdicao) {
                        const match = mensagem.body.match(regex);
                        if (match) {
                            const nomeConvidador = match[1].trim();
                            console.log(`üéØ SISTEMA DETECTOU: "${nomeConvidador}" adicionou "${match[3] || nomeNovoMembro}"`);

                            // Buscar ID do convidador pelos participantes
                            const participants = chat.participants;
                            for (const participant of participants) {
                                const nomeParticipante = await obterNomeContato(participant.id._serialized);

                                // Compara√ß√£o flex√≠vel de nomes
                                const nomeParticipanteLimpo = nomeParticipante.toLowerCase().trim();
                                const nomeConvidadorLimpo = nomeConvidador.toLowerCase().trim();

                                if ((nomeParticipanteLimpo.includes(nomeConvidadorLimpo) ||
                                     nomeConvidadorLimpo.includes(nomeParticipanteLimpo)) &&
                                    isAdministrador(participant.id._serialized)) {

                                    convidadorDetectado = participant.id._serialized;
                                    confiabilidade = 95; // Alt√≠ssima confiabilidade para mensagens do sistema
                                    console.log(`üéØ CONFIRMADO VIA SISTEMA: ${nomeParticipante} (${convidadorDetectado})`);
                                    break;
                                }
                            }

                            if (convidadorDetectado) break;
                        }
                    }
                }
            }

            if (convidadorDetectado) break;
        }

        // 2. SEGUNDO M√âTODO: Buscar padr√µes de convite nas mensagens de usu√°rios
        if (!convidadorDetectado) {
            for (const mensagem of mensagens) {
                if (mensagem.timestamp * 1000 < limiteTempo) continue;

                const autorMensagem = mensagem.author || mensagem.from;
                const corpo = mensagem.body.toLowerCase();

                // Buscar padr√µes de convite nas mensagens
                const padroesFrases = [
                    /vou adicionar/i,
                    /vou convidar/i,
                    /vou chamar/i,
                    /adicionei/i,
                    /convidei/i,
                    /chamei/i,
                    /entrem?\s+no\s+grupo/i,
                    /venham?\s+para\s+o\s+grupo/i,
                    /grupo\s+novo/i
                ];

                for (const padrao of padroesFrases) {
                    if (padrao.test(corpo)) {
                        console.log(`üí° PADR√ÉO DETECTADO: "${corpo.substring(0, 50)}..." por ${autorMensagem}`);

                        const isAdmin = isAdministrador(autorMensagem);
                        if (isAdmin) {
                            convidadorDetectado = autorMensagem;
                            confiabilidade = 75; // Boa confiabilidade para padr√µes + admin
                            console.log(`üéØ DETECTADO VIA PADR√ÉO: ${autorMensagem} (confiabilidade: ${confiabilidade}%)`);
                            break;
                        }
                    }
                }

                if (convidadorDetectado) break;
            }
        }

        // 3. FALLBACK: Distribui√ß√£o inteligente
        if (!convidadorDetectado) {
            console.log(`üß† Usando distribui√ß√£o inteligente como backup...`);
            convidadorDetectado = await selecionarAdminComMenosReferencias(grupoId);
            confiabilidade = 50; // Confiabilidade m√©dia para distribui√ß√£o inteligente
        }

        if (convidadorDetectado) {
            console.log(`‚úÖ DETECTADO: ${convidadorDetectado} (confiabilidade: ${confiabilidade}%)`);

            // Criar refer√™ncia autom√°tica com m√©todo identificado
            const resultado = await criarReferenciaAutomaticaInteligente(
                convidadorDetectado,
                novoMembroId,
                grupoId
            );

            if (resultado) {
                // Adicionar indicador de m√©todo de detec√ß√£o
                const referencia = referenciasClientes[novoMembroId];
                if (referencia) {
                    referencia.metodoDeteccao = 'AUTO_ANALISE_MENSAGENS';
                    referencia.confiabilidade = confiabilidade;

                    console.log(`üéØ AN√ÅLISE: Refer√™ncia criada com ${confiabilidade}% de confiabilidade`);
                }
            }

            return resultado;
        } else {
            console.log(`‚ùå AN√ÅLISE: N√£o foi poss√≠vel detectar convidador`);
            return false;
        }

    } catch (error) {
        console.error('‚ùå Erro na an√°lise de mensagens:', error);
        return false;
    }
}

// === FUN√á√ÉO AUXILIAR PARA OBTER NOME DE CONTATO ===
async function obterNomeContato(contactId) {
    try {
        const contact = await client.getContactById(contactId);
        return contact.pushname || contact.name || contact.number || 'Desconhecido';
    } catch (error) {
        console.error(`‚ùå Erro ao obter nome do contato ${contactId}:`, error);
        return 'Desconhecido';
    }
}

// === SELE√á√ÉO INTELIGENTE DE ADMIN COM MENOS REFER√äNCIAS ===
async function selecionarAdminComMenosReferencias(grupoId) {
    try {
        const chat = await client.getChatById(grupoId);
        const participants = chat.participants;

        // Filtrar apenas admins da lista ADMINISTRADORES_GLOBAIS
        const admins = participants.filter(p => {
            if (ADMINISTRADORES_GLOBAIS.includes(p.id._serialized)) return true;
            if (p.id._serialized.includes('@lid') && MAPEAMENTO_IDS[p.id._serialized]) {
                return ADMINISTRADORES_GLOBAIS.includes(MAPEAMENTO_IDS[p.id._serialized]);
            }
            return false;
        });
        if (admins.length === 0) {
            console.log(`‚ùå Nenhum admin da lista encontrado no grupo`);
            return null;
        }

        console.log(`üë• DISTRIBUI√á√ÉO: Analisando ${admins.length} admins...`);

        // Contar refer√™ncias criadas hoje por cada admin
        const hoje = new Date().toDateString();
        const contadorReferencias = {};

        // Inicializar contador para todos os admins
        admins.forEach(admin => {
            contadorReferencias[admin.id._serialized] = 0;
        });

        // Contar refer√™ncias existentes
        Object.values(referenciasClientes).forEach(ref => {
            if (ref.dataReferencia && new Date(ref.dataReferencia).toDateString() === hoje) {
                if (contadorReferencias.hasOwnProperty(ref.convidadoPor)) {
                    contadorReferencias[ref.convidadoPor]++;
                }
            }
        });

        // Encontrar admin com menos refer√™ncias
        let adminSelecionado = null;
        let menorContador = Infinity;

        for (const [adminId, contador] of Object.entries(contadorReferencias)) {
            console.log(`üìä Admin ${adminId}: ${contador} refer√™ncias hoje`);
            if (contador < menorContador) {
                menorContador = contador;
                adminSelecionado = adminId;
            }
        }

        if (adminSelecionado) {
            console.log(`üéØ SELECIONADO: ${adminSelecionado} (${menorContador} refer√™ncias hoje)`);
        }

        return adminSelecionado;

    } catch (error) {
        console.error('‚ùå Erro ao selecionar admin:', error);
        return null;
    }
}

// === CRIA√á√ÉO DE REFER√äNCIA AUTOM√ÅTICA INTELIGENTE ===
async function criarReferenciaAutomaticaInteligente(convidadorId, convidadoId, grupoId) {
    try {
        console.log(`ü§ñ INTELIGENTE: Criando refer√™ncia autom√°tica: ${convidadorId} ‚Üí ${convidadoId}`);

        // Verificar se o convidado j√° tem refer√™ncia
        if (referenciasClientes[convidadoId]) {
            console.log(`   ‚ö†Ô∏è INTELIGENTE: Cliente ${convidadoId} j√° tem refer√™ncia registrada`);
            return false;
        }

        // Obter nomes para logs mais claros
        let nomeConvidador = convidadorId;
        let nomeConvidado = convidadoId;

        try {
            const contactConvidador = await client.getContactById(convidadorId);
            const contactConvidado = await client.getContactById(convidadoId);
            nomeConvidador = contactConvidador.pushname || contactConvidador.name || convidadorId;
            nomeConvidado = contactConvidado.pushname || contactConvidado.name || convidadoId;
        } catch (error) {
            console.log(`   ‚ö†Ô∏è N√£o foi poss√≠vel obter nomes dos contatos`);
        }

        // Gerar c√≥digo √∫nico
        const codigo = gerarCodigoReferencia(convidadorId);

        // CORRIGIDO: Registrar c√≥digo ANTES da refer√™ncia do cliente (ESTRUTURA PADRONIZADA)
        codigosReferencia[codigo] = {
            dono: convidadorId, // CORRIGIDO: usar 'dono' em vez de salvar s√≥ o ID
            nome: nomeConvidador,
            criado: new Date().toISOString(),
            ativo: true,
            usado: true,
            usadoPor: convidadoId,
            dataUso: new Date().toISOString(),
            automatico: true,
            metodoDeteccao: 'AUTO_INTELIGENTE'
        };

        // Criar refer√™ncia com indica√ß√£o de detec√ß√£o autom√°tica
        referenciasClientes[convidadoId] = {
            codigo: codigo,
            convidadoPor: convidadorId,
            nomeConvidador: nomeConvidador,
            nomeConvidado: nomeConvidado,
            dataRegistro: new Date().toISOString(),
            grupo: grupoId,
            comprasRealizadas: 0,
            bonusTotal: 0,
            metodoDeteccao: 'AUTO_INTELIGENTE', // Indica√ß√£o especial
            obs: 'Refer√™ncia criada por detec√ß√£o autom√°tica inteligente'
        };

        console.log(`   ‚úÖ INTELIGENTE: Refer√™ncia criada: ${codigo} (${nomeConvidador} ‚Üí ${nomeConvidado})`);

        // CORRIGIDO: Inicializar saldo de b√¥nus do convidador
        if (!bonusSaldos[convidadorId]) {
            bonusSaldos[convidadorId] = {
                saldo: 0,
                detalhesReferencias: {},
                historicoSaques: [],
                totalReferencias: 0
            };
        }

        // Salvar dados
        agendarSalvamento();

        // Enviar notifica√ß√£o ao convidador com indica√ß√£o de auto-detec√ß√£o
        try {
            const mensagemNotificacao = `ü§ñ *REFER√äNCIA AUTOM√ÅTICA CRIADA*

üéØ **C√≥digo:** ${codigo}
üë§ **Novo cliente:** ${nomeConvidado}
üìÖ **Data:** ${new Date().toLocaleDateString('pt-PT')}

‚ö†Ô∏è *Esta refer√™ncia foi criada automaticamente*
Se n√£o foi voc√™ quem convidou este membro, digite *.cancelar ${codigo}* para cancelar.

üí∞ Ganhe 200MB a cada compra deles (at√© 5 compras = 1GB)!`;

            await client.sendMessage(convidadorId, mensagemNotificacao);
            console.log(`   ‚úÖ INTELIGENTE: Notifica√ß√£o enviada ao convidador`);
        } catch (error) {
            console.error(`   ‚ùå Erro ao enviar notifica√ß√£o:`, error);
        }

        return true;

    } catch (error) {
        console.error('‚ùå Erro ao criar refer√™ncia autom√°tica inteligente:', error);
        return false;
    }
}

// Vers√£o backup da cria√ß√£o de refer√™ncia (com indica√ß√£o de incerteza) - DEPRECATED
async function criarReferenciaAutomaticaBackup(convidadorId, convidadoId, grupoId) {
    try {
        console.log(`üîó BACKUP: Criando refer√™ncia autom√°tica: ${convidadorId} ‚Üí ${convidadoId}`);

        // Verificar se o convidado j√° tem refer√™ncia
        if (referenciasClientes[convidadoId]) {
            console.log(`   ‚ö†Ô∏è BACKUP: Cliente ${convidadoId} j√° tem refer√™ncia registrada`);
            return false;
        }

        // Verificar se o convidador n√£o est√° tentando convidar a si mesmo
        if (convidadorId === convidadoId) {
            console.log(`   ‚ùå BACKUP: Convidador tentou convidar a si mesmo`);
            return false;
        }

        // Gerar c√≥digo √∫nico para esta refer√™ncia
        const codigo = gerarCodigoReferencia(convidadorId);

        // Registrar c√≥digo de refer√™ncia (ESTRUTURA PADRONIZADA)
        codigosReferencia[codigo] = {
            dono: convidadorId, // CORRIGIDO: usar 'dono' em vez de 'criador'
            nome: 'AutoBackup', // Nome simplificado para refer√™ncias backup
            criado: new Date().toISOString(),
            ativo: true,
            usado: true,
            usadoPor: convidadoId,
            dataUso: new Date().toISOString(),
            automatico: true,
            backup: true // Marcar como detectado por sistema backup
        };

        // Registrar refer√™ncia do cliente
        referenciasClientes[convidadoId] = {
            codigo: codigo,
            convidadoPor: convidadorId,
            dataRegistro: new Date().toISOString(),
            comprasRealizadas: 0,
            automatico: true,
            backup: true // Marcar como detectado por sistema backup
        };

        // Inicializar saldo de b√¥nus do convidador se n√£o existir
        if (!bonusSaldos[convidadorId]) {
            bonusSaldos[convidadorId] = {
                saldo: 0,
                detalhesReferencias: {},
                historicoSaques: [],
                totalReferencias: 0
            };
        }

        // Incrementar total de refer√™ncias
        bonusSaldos[convidadorId].totalReferencias++;

        // Inicializar detalhes da refer√™ncia
        bonusSaldos[convidadorId].detalhesReferencias[convidadoId] = {
            compras: 0,
            bonusGanho: 0,
            codigo: codigo,
            ativo: true,
            automatico: true,
            backup: true
        };

        // CORRIGIDO: Salvar dados (reativar salvamento para persistir refer√™ncias)
        agendarSalvamento();

        // Obter nomes dos participantes para notifica√ß√£o
        const nomeConvidador = await obterNomeContato(convidadorId);
        const nomeConvidado = await obterNomeContato(convidadoId);

        // Enviar notifica√ß√£o no grupo (com indica√ß√£o de estimativa)
        try {
            // CORRIGIDO: Remover @lid e @c.us das men√ß√µes
            const convidadorLimpo = convidadorId.replace('@c.us', '').replace('@lid', '');
            const convidadoLimpo = convidadoId.replace('@c.us', '').replace('@lid', '');

            await client.sendMessage(grupoId,
                `üéâ *NOVO MEMBRO ADICIONADO!*\n\n` +
                `üëã Bem-vindo @${convidadoLimpo}!\n\n` +
                `üì¢ Sistema detectou prov√°vel adi√ß√£o por: @${convidadorLimpo}\n` +
                `üéÅ @${convidadorLimpo} ganhar√° *200MB* a cada compra de @${convidadoLimpo}!\n\n` +
                `üìã *Benef√≠cios:*\n` +
                `‚Ä¢ M√°ximo: 5 compras = 1000MB (1GB)\n` +
                `‚Ä¢ Saque m√≠nimo: 1000MB\n` +
                `‚Ä¢ Sistema autom√°tico ativo!\n\n` +
                `üí° _Continue convidando amigos para ganhar mais b√¥nus!_\n` +
                `‚ö†Ô∏è _Detec√ß√£o autom√°tica por monitoramento do sistema_`, {
                mentions: [convidadorId, convidadoId]
            });

            console.log(`‚úÖ BACKUP: Notifica√ß√£o de refer√™ncia autom√°tica enviada`);
        } catch (error) {
            console.error('‚ùå BACKUP: Erro ao enviar notifica√ß√£o de refer√™ncia:', error);
        }

        console.log(`‚úÖ BACKUP: Refer√™ncia autom√°tica criada: ${codigo} (${nomeConvidador} ‚Üí ${nomeConvidado})`);

        return {
            codigo: codigo,
            convidador: convidadorId,
            convidado: convidadoId,
            automatico: true,
            backup: true
        };

    } catch (error) {
        console.error('‚ùå BACKUP: Erro ao criar refer√™ncia autom√°tica:', error);
        return false;
    }
}

// Detectar novo membro pela primeira mensagem (backup)
async function detectarNovoMembro(grupoId, participantId, configGrupo) {
    // Esta fun√ß√£o agora √© s√≥ um backup caso o monitoramento autom√°tico falhe
    return;
}

// Registrar entrada de novo membro
async function registrarEntradaMembro(grupoId, participantId) {
    try {
        if (!membrosEntrada[grupoId]) {
            membrosEntrada[grupoId] = {};
        }
        
        membrosEntrada[grupoId][participantId] = new Date().toISOString();
        await salvarDadosMembros();
        
        console.log(`üìù Entrada registrada`);
    } catch (error) {
        console.error('‚ùå Erro ao registrar entrada de membro:', error);
    }
}

// Salvar dados de membros
async function salvarDadosMembros() {
    try {
        await fs.writeFile(ARQUIVO_MEMBROS, JSON.stringify(membrosEntrada));
    } catch (error) {
        console.error('‚ùå Erro ao salvar dados de membros:', error);
    }
}


// Verificar se usu√°rio √© eleg√≠vel para usar c√≥digo (√∫ltimos 5 dias)
function isElegivelParaCodigo(participantId, grupoId) {
    try {
        // CORRIGIDO: Se n√£o tem registro, ASSUMIR que √© novo membro (eleg√≠vel)
        if (!membrosEntrada[grupoId] || !membrosEntrada[grupoId][participantId]) {
            console.log(`‚úÖ Membro sem registro de entrada - ASSUMINDO NOVO MEMBRO (eleg√≠vel)`);

            // Registrar automaticamente agora
            if (!membrosEntrada[grupoId]) {
                membrosEntrada[grupoId] = {};
            }
            membrosEntrada[grupoId][participantId] = new Date().toISOString();

            return true; // CORRIGIDO: Novo membro √â eleg√≠vel
        }

        const dataEntrada = new Date(membrosEntrada[grupoId][participantId]);
        const agora = new Date();
        const limite5Dias = 5 * 24 * 60 * 60 * 1000; // 5 dias em ms

        const tempoNoGrupo = agora - dataEntrada;
        const diasNoGrupo = Math.floor(tempoNoGrupo / (24 * 60 * 60 * 1000));
        const elegivelTempo = tempoNoGrupo <= limite5Dias;

        console.log(`üîç Verificando elegibilidade - ${diasNoGrupo} dias no grupo - ${elegivelTempo ? 'ELEG√çVEL' : 'N√ÉO ELEG√çVEL'}`);

        return elegivelTempo;
    } catch (error) {
        console.error('‚ùå Erro ao verificar elegibilidade:', error);
        // CORRIGIDO: Em caso de erro, permitir (dar benef√≠cio da d√∫vida)
        return true;
    }
}

// Carregar dados persistentes
async function carregarDadosReferencia() {
    try {
        // Carregar c√≥digos
        try {
            const dados = await fs.readFile(ARQUIVO_CODIGOS, 'utf8');
            codigosReferencia = JSON.parse(dados);
            console.log(`üìã ${Object.keys(codigosReferencia).length} c√≥digos de refer√™ncia carregados`);

            // LOGS DETALHADOS para debug
            if (Object.keys(codigosReferencia).length > 0) {
                console.log(`üîç C√≥digos carregados:`);
                Object.entries(codigosReferencia).forEach(([codigo, dados]) => {
                    console.log(`   - ${codigo} ‚Üí Dono: ${dados.dono} (${dados.nome})`);
                });
            }
        } catch (e) {
            console.log(`‚ö†Ô∏è Arquivo de c√≥digos n√£o encontrado, criando novo: ${e.message}`);
            codigosReferencia = {};
        }

        // Carregar refer√™ncias  
        try {
            const dados = await fs.readFile(ARQUIVO_REFERENCIAS, 'utf8');
            referenciasClientes = JSON.parse(dados);
            console.log(`üë• ${Object.keys(referenciasClientes).length} refer√™ncias de clientes carregadas`);
        } catch (e) {
            referenciasClientes = {};
        }

        // Carregar b√¥nus
        try {
            const dados = await fs.readFile(ARQUIVO_BONUS, 'utf8');
            bonusSaldos = JSON.parse(dados);
            console.log(`üí∞ ${Object.keys(bonusSaldos).length} saldos de b√¥nus carregados`);
        } catch (e) {
            bonusSaldos = {};
        }

        // Carregar saques
        try {
            const dados = await fs.readFile(ARQUIVO_SAQUES, 'utf8');
            pedidosSaque = JSON.parse(dados);
            console.log(`üè¶ ${Object.keys(pedidosSaque).length} pedidos de saque carregados`);
        } catch (e) {
            pedidosSaque = {};
        }

        // Carregar dados de entrada de membros
        try {
            const dados = await fs.readFile(ARQUIVO_MEMBROS, 'utf8');
            membrosEntrada = JSON.parse(dados);
            console.log(`üë• ${Object.keys(membrosEntrada).length} grupos com dados de entrada carregados`);
        } catch (e) {
            membrosEntrada = {};
        }

    } catch (error) {
        console.error('‚ùå Erro ao carregar dados de refer√™ncia:', error);
    }
}

// Salvar dados persistentes
// === SISTEMA DE SALVAMENTO OTIMIZADO ===
let salvamentoPendente = false;

async function salvarDadosReferencia() {
    // Evitar salvamentos simult√¢neos
    if (salvamentoPendente) {
        console.log(`‚è≥ Salvamento j√° em andamento, aguardando...`);
        return;
    }
    salvamentoPendente = true;

    console.log(`üíæ Iniciando salvamento de dados de refer√™ncia...`);
    console.log(`   - C√≥digos: ${Object.keys(codigosReferencia).length} registros`);
    console.log(`   - Refer√™ncias: ${Object.keys(referenciasClientes).length} registros`);
    console.log(`   - B√¥nus: ${Object.keys(bonusSaldos).length} registros`);
    console.log(`   - Saques: ${Object.keys(pedidosSaque).length} registros`);

    try {
        // Usar Promise.allSettled para n√£o falhar se um arquivo der erro
        const resultados = await Promise.allSettled([
            fs.writeFile(ARQUIVO_CODIGOS, JSON.stringify(codigosReferencia)),
            fs.writeFile(ARQUIVO_REFERENCIAS, JSON.stringify(referenciasClientes)),
            fs.writeFile(ARQUIVO_BONUS, JSON.stringify(bonusSaldos)),
            fs.writeFile(ARQUIVO_SAQUES, JSON.stringify(pedidosSaque))
        ]);

        // Log detalhado de cada salvamento
        const nomeArquivos = ['ARQUIVO_CODIGOS', 'ARQUIVO_REFERENCIAS', 'ARQUIVO_BONUS', 'ARQUIVO_SAQUES'];
        resultados.forEach((resultado, index) => {
            if (resultado.status === 'fulfilled') {
                console.log(`   ‚úÖ ${nomeArquivos[index]} salvo com sucesso`);
            } else {
                console.error(`   ‚ùå ${nomeArquivos[index]} FALHOU:`, resultado.reason);
            }
        });

        const falhas = resultados.filter(r => r.status === 'rejected');
        if (falhas.length > 0) {
            console.error(`‚ùå Total de falhas: ${falhas.length}/${resultados.length}`);
        } else {
            console.log(`‚úÖ Todos os arquivos salvos com sucesso!`);
        }
    } catch (error) {
        console.error('‚ùå Erro cr√≠tico ao salvar dados de refer√™ncia:', error);
    } finally {
        salvamentoPendente = false;
    }
}

// Fun√ß√£o para agendar salvamento com debounce
let timeoutSalvamento = null;

function agendarSalvamento() {
    if (timeoutSalvamento) {
        clearTimeout(timeoutSalvamento);
    }

    timeoutSalvamento = setTimeout(async () => {
        await salvarDadosReferencia();
        timeoutSalvamento = null;
    }, 3000); // 3 segundos de debounce
}

// Fun√ß√£o para buscar saldo de b√¥nus em todos os formatos poss√≠veis
async function buscarSaldoBonus(userId) {
    // Usar sistemaBonus se dispon√≠vel
    if (sistemaBonus) {
        return sistemaBonus.buscarSaldo(userId);
    }

    // Fallback para m√©todo antigo (caso sistemaBonus n√£o esteja inicializado)
    console.log(`\nüîç === BUSCA DE SALDO DETALHADA ===`);
    console.log(`üì± Buscando saldo para userId: "${userId}"`);

    // Tentar formato exato primeiro
    if (bonusSaldos[userId]) {
        console.log(`‚úÖ Encontrado no formato exato: ${userId} (${bonusSaldos[userId].saldo}MB)`);
        return bonusSaldos[userId];
    }
    console.log(`‚ùå N√£o encontrado no formato exato: ${userId}`);

    // Extrair n√∫mero base (sem sufixos)
    const numeroBase = userId.replace('@c.us', '').replace('@lid', '');
    console.log(`üî¢ N√∫mero base extra√≠do: "${numeroBase}"`);

    // Tentar todos os formatos poss√≠veis
    const formatosPossiveis = [
        numeroBase,
        `${numeroBase}@c.us`,
        `${numeroBase}@lid`
    ];

    console.log(`üîç Testando ${formatosPossiveis.length} formatos poss√≠veis:`);
    for (const formato of formatosPossiveis) {
        console.log(`   - Testando: "${formato}"`);
        if (bonusSaldos[formato]) {
            console.log(`   ‚úÖ ENCONTRADO! Formato: ${formato}, Saldo: ${bonusSaldos[formato].saldo}MB`);
            return bonusSaldos[formato];
        } else {
            console.log(`   ‚ùå N√£o encontrado`);
        }
    }

    // BUSCA AVAN√áADA: Tentar obter n√∫mero real do contato
    console.log(`üîç Tentando busca avan√ßada via n√∫mero real do contato...`);
    try {
        const contact = await client.getContactById(userId);
        if (contact && contact.number) {
            console.log(`üìû N√∫mero real encontrado: ${contact.number}`);
            const numeroReal = contact.number;

            // Tentar com o n√∫mero real
            const formatosReais = [
                numeroReal,
                `${numeroReal}@c.us`,
                `${numeroReal}@lid`
            ];

            for (const formato of formatosReais) {
                if (bonusSaldos[formato]) {
                    console.log(`   ‚úÖ ENCONTRADO via n√∫mero real! Formato: ${formato}, Saldo: ${bonusSaldos[formato].saldo}MB`);
                    return bonusSaldos[formato];
                }
            }
        }
    } catch (error) {
        console.log(`‚ö†Ô∏è Erro ao buscar contato: ${error.message}`);
    }

    console.log(`‚ùå Saldo n√£o encontrado em nenhum formato`);
    console.log(`üìã Saldos existentes no sistema (primeiros 10):`);
    const chaves = Object.keys(bonusSaldos).slice(0, 10);
    chaves.forEach(chave => {
        console.log(`   ‚Ä¢ ${chave}: ${bonusSaldos[chave].saldo}MB`);
    });

    return null;
}

// Fun√ß√£o para atualizar saldo em todos os formatos existentes
async function atualizarSaldoBonus(userId, operacao) {
    // Usar sistemaBonus se dispon√≠vel
    if (sistemaBonus) {
        await sistemaBonus.atualizarSaldo(userId, operacao);
        return;
    }

    // Fallback para m√©todo antigo
    const numeroBase = userId.replace('@c.us', '').replace('@lid', '');
    const formatosPossiveis = [
        numeroBase,
        `${numeroBase}@c.us`,
        `${numeroBase}@lid`
    ];

    let atualizado = 0;
    for (const formato of formatosPossiveis) {
        if (bonusSaldos[formato]) {
            operacao(bonusSaldos[formato]);
            atualizado++;
        }
    }

    // Se n√£o encontrou em nenhum formato padr√£o, fazer busca avan√ßada
    if (atualizado === 0) {
        console.log(`üîç Formato ${userId} n√£o encontrado, tentando busca avan√ßada...`);
        try {
            const contact = await client.getContactById(userId);
            if (contact && contact.number) {
                const numeroReal = contact.number;
                const formatosReais = [
                    numeroReal,
                    `${numeroReal}@c.us`,
                    `${numeroReal}@lid`
                ];

                for (const formato of formatosReais) {
                    if (bonusSaldos[formato]) {
                        console.log(`   ‚úÖ ENCONTRADO via n√∫mero real! Formato: ${formato}`);
                        operacao(bonusSaldos[formato]);
                        atualizado++;
                    }
                }
            }
        } catch (error) {
            console.error(`‚ùå Erro na busca avan√ßada para atualiza√ß√£o:`, error.message);
        }
    }

    console.log(`üíæ Saldo atualizado em ${atualizado} formato(s)`);
    return atualizado > 0;
}

// === CACHE DE TRANSA√á√ïES (SEM ARQUIVOS .TXT) ===
function adicionarTransacaoCache(dados, grupoId) {
    const key = `${grupoId}_${Date.now()}_${Math.random()}`;
    cacheTransacoes.set(key, {
        ...dados,
        timestamp: Date.now(),
        grupo_id: grupoId
    });

    // Limpar cache automaticamente (manter √∫ltimas 100 transa√ß√µes)
    if (cacheTransacoes.size > 100) {
        const keys = Array.from(cacheTransacoes.keys());
        const oldKeys = keys.slice(0, keys.length - 100);
        oldKeys.forEach(key => cacheTransacoes.delete(key));
    }
}

// Gerar c√≥digo √∫nico
function gerarCodigoReferencia(remetente) {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    let codigo;
    do {
        codigo = '';
        for (let i = 0; i < 6; i++) {
            codigo += chars.charAt(Math.floor(Math.random() * chars.length));
        }
    } while (codigosReferencia[codigo]);
    
    return codigo;
}

// Processar b√¥nus de compra
async function processarBonusCompra(remetenteCompra, valorCompra) {
    console.log(`üéÅ Verificando b√¥nus para compra`);
    
    // Verificar se cliente tem refer√™ncia
    const referencia = referenciasClientes[remetenteCompra];
    if (!referencia) {
        console.log(`   ‚ùå Cliente n√£o tem refer√™ncia registrada`);
        return false;
    }

    // Verificar se ainda pode ganhar b√¥nus (m√°ximo 5 compras)
    if (referencia.comprasRealizadas >= 5) {
        console.log(`   ‚ö†Ô∏è Cliente j√° fez 5 compras, sem mais b√¥nus`);
        return false;
    }

    // Atualizar contador de compras
    referencia.comprasRealizadas++;
    
    // Creditar b√¥nus ao convidador
    const convidador = referencia.convidadoPor;
    if (!bonusSaldos[convidador]) {
        bonusSaldos[convidador] = {
            saldo: 0,
            detalhesReferencias: {},
            historicoSaques: [],
            totalReferencias: 0
        };
    }

    // Adicionar 200MB ao saldo
    const bonusAtual = 200;
    bonusSaldos[convidador].saldo += bonusAtual;
    
    // Atualizar detalhes da refer√™ncia
    if (!bonusSaldos[convidador].detalhesReferencias[remetenteCompra]) {
        bonusSaldos[convidador].detalhesReferencias[remetenteCompra] = {
            compras: 0,
            bonusGanho: 0,
            codigo: referencia.codigo,
            ativo: true
        };
    }
    
    bonusSaldos[convidador].detalhesReferencias[remetenteCompra].compras = referencia.comprasRealizadas;
    bonusSaldos[convidador].detalhesReferencias[remetenteCompra].bonusGanho += bonusAtual;
    
    // Enviar notifica√ß√£o de b√¥nus por refer√™ncia
    try {
        const nomeComprador = await obterNomeContato(remetenteCompra);
        const nomeConvidador = await obterNomeContato(convidador);
        const novoSaldo = bonusSaldos[convidador].saldo;
        const novoSaldoFormatado = novoSaldo >= 1024 ? `${(novoSaldo/1024).toFixed(2)}GB` : `${novoSaldo}MB`;

        // Verificar se √© refer√™ncia autom√°tica ou manual
        const isAutomatico = referencia.automatico;
        const tipoReferencia = isAutomatico ? 'adicionou ao grupo' : `usou seu c√≥digo ${referencia.codigo}`;

        // CORRIGIDO: Remover @lid e @c.us das men√ß√µes
        const convidadorLimpo = convidador.replace('@c.us', '').replace('@lid', '');
        const remetenteCompraLimpo = remetenteCompra.replace('@c.us', '').replace('@lid', '');

        await client.sendMessage(message.from,
            `üéâ *B√îNUS DE REFER√äNCIA CREDITADO!*\n\n` +
            `üíé @${convidadorLimpo}, recebeste *${bonusAtual}MB* de b√¥nus!\n\n` +
            `üë§ *Referenciado:* @${remetenteCompraLimpo}\n` +
            `üì¢ *Motivo:* @${remetenteCompraLimpo} que voc√™ ${tipoReferencia} fez uma compra!\n` +
            `üõí *Compra:* ${referencia.comprasRealizadas}¬™ de 5\n` +
            `üí∞ *Novo saldo:* ${novoSaldoFormatado}\n\n` +
            `${novoSaldo >= 1024 ? 'üöÄ *J√° podes sacar!* Use: *.sacar*' : '‚è≥ *Continua a convidar amigos para ganhar mais b√¥nus!*'}`, {
            mentions: [convidador, remetenteCompra]
        });
    } catch (error) {
        console.error('‚ùå Erro ao enviar notifica√ß√£o de b√¥nus:', error);
    }

    // Salvar dados
    agendarSalvamento();
    
    console.log(`   ‚úÖ B√¥nus creditado: ${bonusAtual}MB (${referencia.comprasRealizadas}/5)`);
    
    return {
        convidador: convidador,
        bonusGanho: bonusAtual,
        compraAtual: referencia.comprasRealizadas,
        totalCompras: 5,
        novoSaldo: bonusSaldos[convidador].saldo
    };
}

// === CRIAR REFER√äNCIA AUTOM√ÅTICA ===
async function criarReferenciaAutomatica(convidadorId, convidadoId, grupoId) {
    try {
        console.log(`ü§ù Criando refer√™ncia autom√°tica: ${convidadorId} ‚Üí ${convidadoId}`);

        // Verificar se o convidado j√° tem refer√™ncia
        if (referenciasClientes[convidadoId]) {
            console.log(`   ‚ö†Ô∏è Cliente ${convidadoId} j√° tem refer√™ncia registrada`);
            return false;
        }

        // Verificar se o convidador n√£o est√° tentando convidar a si mesmo
        if (convidadorId === convidadoId) {
            console.log(`   ‚ùå Convidador tentou convidar a si mesmo`);
            return false;
        }

        // Gerar c√≥digo √∫nico para esta refer√™ncia (para compatibilidade com sistema antigo)
        const codigo = gerarCodigoReferencia(convidadorId);

        // Registrar c√≥digo de refer√™ncia (ESTRUTURA PADRONIZADA)
        codigosReferencia[codigo] = {
            dono: convidadorId, // CORRIGIDO: usar 'dono' em vez de 'criador'
            nome: 'Auto', // Nome simplificado para refer√™ncias autom√°ticas
            criado: new Date().toISOString(),
            ativo: true,
            usado: true,
            usadoPor: convidadoId,
            dataUso: new Date().toISOString(),
            automatico: true // Marcar como refer√™ncia autom√°tica
        };

        // Registrar refer√™ncia do cliente
        referenciasClientes[convidadoId] = {
            codigo: codigo,
            convidadoPor: convidadorId,
            dataRegistro: new Date().toISOString(),
            comprasRealizadas: 0,
            automatico: true // Marcar como refer√™ncia autom√°tica
        };

        // Inicializar saldo de b√¥nus do convidador se n√£o existir
        if (!bonusSaldos[convidadorId]) {
            bonusSaldos[convidadorId] = {
                saldo: 0,
                detalhesReferencias: {},
                historicoSaques: [],
                totalReferencias: 0
            };
        }

        // Incrementar total de refer√™ncias
        bonusSaldos[convidadorId].totalReferencias++;

        // Inicializar detalhes da refer√™ncia
        bonusSaldos[convidadorId].detalhesReferencias[convidadoId] = {
            compras: 0,
            bonusGanho: 0,
            codigo: codigo,
            ativo: true,
            automatico: true
        };

        // CORRIGIDO: Salvar dados (reativar salvamento para persistir refer√™ncias)
        agendarSalvamento();

        // Obter nomes dos participantes para notifica√ß√£o
        const nomeConvidador = await obterNomeContato(convidadorId);
        const nomeConvidado = await obterNomeContato(convidadoId);

        // Enviar notifica√ß√£o no grupo
        try {
            // CORRIGIDO: Remover @lid e @c.us das men√ß√µes
            const convidadorLimpo = convidadorId.replace('@c.us', '').replace('@lid', '');
            const convidadoLimpo = convidadoId.replace('@c.us', '').replace('@lid', '');

            await client.sendMessage(grupoId,
                `üéâ *NOVO MEMBRO ADICIONADO!*\n\n` +
                `üëã Bem-vindo @${convidadoLimpo}!\n\n` +
                `üì¢ Adicionado por: @${convidadorLimpo}\n` +
                `üéÅ @${convidadorLimpo} ganhar√° *200MB* a cada compra de @${convidadoLimpo}!\n\n` +
                `üìã *Benef√≠cios:*\n` +
                `‚Ä¢ M√°ximo: 5 compras = 1000MB (1GB)\n` +
                `‚Ä¢ Saque m√≠nimo: 1000MB\n` +
                `‚Ä¢ Sistema autom√°tico ativo!\n\n` +
                `üí° _Continue convidando amigos para ganhar mais b√¥nus!_`, {
                mentions: [convidadorId, convidadoId]
            });

            console.log(`‚úÖ Notifica√ß√£o de refer√™ncia autom√°tica enviada`);
        } catch (error) {
            console.error('‚ùå Erro ao enviar notifica√ß√£o de refer√™ncia:', error);
        }

        console.log(`‚úÖ Refer√™ncia autom√°tica criada: ${codigo} (${nomeConvidador} ‚Üí ${nomeConvidado})`);

        return {
            codigo: codigo,
            convidador: convidadorId,
            convidado: convidadoId,
            automatico: true
        };

    } catch (error) {
        console.error('‚ùå Erro ao criar refer√™ncia autom√°tica:', error);
        return false;
    }
}

// === OBTER NOME DO CONTATO ===
async function obterNomeContato(contactId) {
    try {
        const contact = await client.getContactById(contactId);
        return contact.name || contact.pushname || contactId.replace('@c.us', '');
    } catch (error) {
        console.error(`‚ùå Erro ao obter nome do contato ${contactId}:`, error);
        return contactId.replace('@c.us', '');
    }
}

// === FUN√á√ÉO PARA NORMALIZAR VALORES ===
function normalizarValor(valor) {
    if (typeof valor === 'number') return valor;
    if (typeof valor === 'string') {
        // Remover caracteres n√£o num√©ricos exceto ponto e v√≠rgula
        let valorLimpo = valor.replace(/[^\d.,]/g, '');

        // Converter v√≠rgula para ponto se for separador decimal
        if (valorLimpo.includes(',') && !valorLimpo.includes('.')) {
            const partes = valorLimpo.split(',');
            if (partes.length === 2 && partes[1].length <= 2) {
                valorLimpo = partes[0] + '.' + partes[1];
            } else {
                valorLimpo = valorLimpo.replace(/,/g, '');
            }
        } else if (valorLimpo.includes(',')) {
            // Se tem tanto v√≠rgula quanto ponto, remover v√≠rgulas (separadores de milhares)
            valorLimpo = valorLimpo.replace(/,/g, '');
        }

        const numeroFinal = parseFloat(valorLimpo) || 0;
        console.log(`üîß normalizarValor: "${valor}" ‚Üí "${valorLimpo}" ‚Üí ${numeroFinal}`);
        return numeroFinal;
    }
    return 0;
}

// === FUN√á√ÉO PARA CALCULAR VALOR DO PEDIDO ===
function calcularValorPedido(megas, precosGrupo) {
    const megasNum = parseInt(megas) || 0;
    if (precosGrupo && precosGrupo[megasNum]) {
        return precosGrupo[megasNum];
    }
    // Fallback: calcular valor baseado em pre√ßo por MB (assumindo ~12.5MT/GB)
    const valorPorMB = 12.5 / 1024; // ~0.012MT por MB
    return Math.round(megasNum * valorPorMB);
}

// === FUN√á√ÉO PARA VERIFICAR PAGAMENTO (S√ì BUSCA, N√ÉO MARCA) ===
async function verificarPagamentoIndividual(referencia, valorEsperado) {
    try {
        const valorNormalizado = normalizarValor(valorEsperado);

        console.log(`üîç REVENDEDORES: Verificando pagamento ${referencia} - ${valorNormalizado}MT (original: ${valorEsperado})`);

        // Primeira tentativa: busca pelo valor exato (COM RETRY AUTOM√ÅTICO)
        let response = await axiosComRetry({
            method: 'post',
            url: PAGAMENTOS_CONFIG.scriptUrl,
            data: {
                action: "buscar_por_referencia",
                referencia: referencia,
                valor: valorNormalizado
            },
            headers: {
                'Content-Type': 'application/json',
                'Cache-Control': 'no-cache'
            },
            timeout: 60000 // 60 segundos
        }, 3); // 3 tentativas

        if (response.data && response.data.encontrado) {
            // Verificar se j√° foi processado
            if (response.data.ja_processado) {
                console.log(`‚ö†Ô∏è REVENDEDORES: Pagamento ${referencia} j√° foi processado anteriormente!`);
                return 'JA_PROCESSADO'; // Retornar status especial
            }

            console.log(`‚úÖ REVENDEDORES: Pagamento encontrado e PENDENTE (valor exato)!`);
            return true;
        }

        console.log(`‚ùå REVENDEDORES: Pagamento n√£o encontrado`);
        return false;

    } catch (error) {
        const ehTimeout = error.code === 'ECONNABORTED' || error.message.includes('timeout');
        if (ehTimeout) {
            console.error(`‚è∞ REVENDEDORES: Timeout ao verificar pagamento ${referencia} - planilha demorou muito para responder`);
            console.error(`üí° Sugest√£o: O pagamento ser√° verificado automaticamente no pr√≥ximo ciclo de retry`);
        } else {
            console.error(`‚ùå REVENDEDORES: Erro ao verificar pagamento:`, error.message);
        }
        return false;
    }
}

// === FUN√á√ÉO PARA MARCAR PAGAMENTO COMO PROCESSADO ===
async function marcarPagamentoComoProcessado(referencia, valor) {
    try {
        const valorNormalizado = normalizarValor(valor);

        console.log(`‚úÖ REVENDEDORES: Marcando pagamento ${referencia} como PROCESSADO`);

        const response = await axiosComRetry({
            method: 'post',
            url: PAGAMENTOS_CONFIG.scriptUrl,
            data: {
                action: "marcar_processado",
                referencia: referencia,
                valor: valorNormalizado
            },
            headers: {
                'Content-Type': 'application/json',
                'Cache-Control': 'no-cache'
            },
            timeout: 60000 // 60 segundos
        }, 3); // 3 tentativas

        if (response.data && response.data.success) {
            console.log(`‚úÖ REVENDEDORES: Pagamento ${referencia} marcado como PROCESSADO com sucesso!`);
            return true;
        } else {
            console.log(`‚ö†Ô∏è REVENDEDORES: N√£o foi poss√≠vel marcar pagamento como processado: ${response.data?.message || 'Erro desconhecido'}`);
            return false;
        }

    } catch (error) {
        console.error(`‚ùå REVENDEDORES: Erro ao marcar pagamento como processado:`, error.message);
        return false;
    }
}

// Base de dados de compradores
let historicoCompradores = {};
const ARQUIVO_HISTORICO = 'historico_compradores.json';

// Cache de administradores REMOVIDO - usa apenas ADMINISTRADORES_GLOBAIS

// === FUN√á√ïES DO SISTEMA DE RETRY SILENCIOSO ===

// Carregar pagamentos pendentes do arquivo
async function carregarPagamentosPendentes() {
    try {
        const dados = await fs.readFile(ARQUIVO_PAGAMENTOS_PENDENTES, 'utf8');
        pagamentosPendentes = JSON.parse(dados);
        console.log(`üíæ RETRY: ${Object.keys(pagamentosPendentes).length} pagamentos pendentes carregados`);
    } catch (error) {
        console.log(`üíæ RETRY: Nenhum arquivo de pend√™ncias encontrado - iniciando limpo`);
        pagamentosPendentes = {};
    }
}

// Salvar pagamentos pendentes no arquivo
async function salvarPagamentosPendentes() {
    try {
        await fs.writeFile(ARQUIVO_PAGAMENTOS_PENDENTES, JSON.stringify(pagamentosPendentes, null, 2));
        console.log(`üíæ RETRY: Pagamentos pendentes salvos - ${Object.keys(pagamentosPendentes).length} pend√™ncias`);
    } catch (error) {
        console.error(`‚ùå RETRY: Erro ao salvar pend√™ncias:`, error);
    }
}

// Adicionar pagamento para retry
async function adicionarPagamentoPendente(referencia, valorComprovante, dadosCompletos, message, resultadoIA) {
    const id = `${referencia}_${Date.now()}`;
    const agora = Date.now();

    const pendencia = {
        id: id,
        referencia: referencia,
        valorComprovante: valorComprovante,
        dadosCompletos: dadosCompletos,
        timestamp: agora,
        expira: agora + RETRY_TIMEOUT,
        tentativas: 0,
        // Dados para resposta
        chatId: message.from,
        messageData: {
            author: message.author || message.from,
            notifyName: message._data?.notifyName || 'N/A'
        },
        resultadoIA: resultadoIA
    };

    pagamentosPendentes[id] = pendencia;
    await salvarPagamentosPendentes();

    console.log(`‚è≥ RETRY: Pagamento ${referencia} adicionado √† fila de retry`);

    // Iniciar timer se n√£o existe
    if (!timerRetryPagamentos) {
        iniciarTimerRetryPagamentos();
    }

    return id;
}

// Remover pagamento pendente
async function removerPagamentoPendente(id) {
    if (pagamentosPendentes[id]) {
        delete pagamentosPendentes[id];
        await salvarPagamentosPendentes();
        console.log(`‚úÖ RETRY: Pagamento ${id} removido da fila`);
    }
}

// Iniciar timer de verifica√ß√£o peri√≥dica
function iniciarTimerRetryPagamentos() {
    if (timerRetryPagamentos) {
        clearInterval(timerRetryPagamentos);
    }

    console.log(`üîÑ RETRY: Iniciando verifica√ß√£o a cada ${RETRY_INTERVAL/1000}s`);

    timerRetryPagamentos = setInterval(async () => {
        await verificarPagamentosPendentes();
    }, RETRY_INTERVAL);
}

// Parar timer de verifica√ß√£o
function pararTimerRetryPagamentos() {
    if (timerRetryPagamentos) {
        clearInterval(timerRetryPagamentos);
        timerRetryPagamentos = null;
        console.log(`‚èπÔ∏è RETRY: Timer de verifica√ß√£o parado`);
    }
}

// Verificar todos os pagamentos pendentes
async function verificarPagamentosPendentes() {
    const agora = Date.now();
    const pendencias = Object.values(pagamentosPendentes);

    if (pendencias.length === 0) {
        pararTimerRetryPagamentos();
        return;
    }

    console.log(`üîç RETRY: Verificando ${pendencias.length} pagamentos pendentes...`);

    for (const pendencia of pendencias) {
        // Verificar se expirou
        if (agora > pendencia.expira) {
            console.log(`‚è∞ RETRY: Pagamento ${pendencia.referencia} expirou ap√≥s 30min`);
            await removerPagamentoPendente(pendencia.id);
            continue;
        }

        // Verificar se atingiu limite de tentativas
        if (pendencia.tentativas >= MAX_RETRY_ATTEMPTS) {
            console.log(`‚ùå RETRY: Pagamento ${pendencia.referencia} atingiu limite de ${MAX_RETRY_ATTEMPTS} tentativas - removendo da fila`);
            await removerPagamentoPendente(pendencia.id);
            continue;
        }

        // Verificar pagamento
        pendencia.tentativas++;
        console.log(`üîç RETRY: Tentativa ${pendencia.tentativas}/${MAX_RETRY_ATTEMPTS} para ${pendencia.referencia}`);

        const pagamentoConfirmado = await verificarPagamentoIndividual(pendencia.referencia, pendencia.valorComprovante);

        if (pagamentoConfirmado) {
            console.log(`‚úÖ RETRY: Pagamento ${pendencia.referencia} confirmado! Processando...`);
            await processarPagamentoConfirmado(pendencia);
            await removerPagamentoPendente(pendencia.id);
        }
    }

    // Se n√£o h√° mais pend√™ncias, parar timer
    if (Object.keys(pagamentosPendentes).length === 0) {
        pararTimerRetryPagamentos();
    }
}

// Processar pagamento confirmado ap√≥s retry
async function processarPagamentoConfirmado(pendencia) {
    try {
        const { dadosCompletos, chatId, messageData, resultadoIA } = pendencia;
        const [referencia, megas, numero] = dadosCompletos.split('|');

        // === VERIFICA√á√ÉO DE VALOR MUITO BAIXO ===
        if (megas === 'VALOR_MUITO_BAIXO') {
            console.log(`‚ùå VALOR MUITO BAIXO no pagamento confirmado: ${referencia}`);

            const configGrupo = getConfiguracaoGrupo(chatId);
            const precos = ia.extrairPrecosTabela(configGrupo.tabela);
            const menorPreco = Math.min(...precos.map(p => p.preco));

            await client.sendMessage(chatId,
                `‚ùå *Valor muito baixo*\n\n` +
                `üí≥ O valor transferido est√° abaixo do pacote m√≠nimo dispon√≠vel.\n\n` +
                `üìã *Pacote mais barato:* ${menorPreco}MT\n\n` +
                `üí° *Para ver todos os pacotes:* digite "tabela"`
            );
            return;
        }

        // Enviar mensagem de confirma√ß√£o
        await client.sendMessage(chatId,
            `‚úÖ *PAGAMENTO CONFIRMADO!*\n\n` +
            `üí∞ Refer√™ncia: ${referencia}\n` +
            `üìä Megas: ${megas} MB\n` +
            `üì± N√∫mero: ${numero}\n` +
            `üí≥ Valor: ${pendencia.valorComprovante}MT\n\n` +
            `üéâ Pedido est√° sendo processado!\n` +
            `‚è∞ ${new Date().toLocaleString('pt-BR')}`
        );

        // Processar b√¥nus de refer√™ncia
        const bonusInfo = await processarBonusCompra(chatId, megas);

        // Enviar para Tasker/Planilha
        const resultadoEnvio = await enviarParaTasker(referencia, megas, numero, chatId, messageData.author);

        // Verificar duplicatas
        if (resultadoEnvio && resultadoEnvio.duplicado) {
            await client.sendMessage(chatId,
                `‚ö†Ô∏è *AVISO: PEDIDO DUPLICADO*\n\n` +
                `Este pedido ${resultadoEnvio.status_existente === 'PROCESSADO' ? 'j√° foi processado' : 'est√° na fila'}.\n` +
                `Status: ${resultadoEnvio.status_existente}`
            );
            return;
        }

        // === MARCAR PAGAMENTO COMO PROCESSADO AP√ìS ENVIO BEM-SUCEDIDO ===
        if (resultadoEnvio && resultadoEnvio.sucesso) {
            await marcarPagamentoComoProcessado(referencia, pendencia.valorComprovante);
        }

        // Registrar comprador
        await registrarComprador(chatId, numero, messageData.notifyName, megas);

        // REMOVIDO: Encaminhamento de mensagens (sistema movido para outro bot)

        console.log(`‚úÖ RETRY: Pagamento ${pendencia.referencia} processado com sucesso`);

    } catch (error) {
        console.error(`‚ùå RETRY: Erro ao processar pagamento confirmado:`, error);
    }
}

// Cache para evitar logs repetidos de grupos
let gruposLogados = new Set();

// === COMANDOS CUSTOMIZADOS ===
let comandosCustomizados = {};
const ARQUIVO_COMANDOS = 'comandos_customizados.json';

// REMOVIDO: Sistema de registro de mensagens (movido para outro bot)

// REMOVIDO: Fun√ß√£o registrarPrimeiraMensagem (sistema movido para outro bot)

// Configura√ß√£o de administradores GLOBAIS
const ADMINISTRADORES_GLOBAIS = [
    '258874100607@c.us',
    '258871112049@c.us',
    '258845356399@c.us',
    '258840326152@c.us',
    '258852118624@c.us',
    '251032533737504@lid', // @lid do Mr Durst
    '251032533737504@lid',
    '203109674577958@c.us',
    '203109674577958@lid',
    '23450974470333@lid',   // ID interno do WhatsApp para 852118624
    // Novos administradores adicionados:
    '258850401416@c.us',    // +258 85 040 1416 - Kelven Junior
    '216054655656152@lid',  // @lid do Kelven Junior
    '258858891101@c.us',    // +258 85 889 1101 - Isaac
    '85307059867830@lid',   // @lid do Isaac
    '258865627840@c.us',    // +258 86 562 7840 - Erc√≠lio
    '170725386272876@lid'   // @lid do Erc√≠lio
];

// Mapeamento de IDs internos (@lid) para n√∫meros reais (@c.us) - SISTEMA DIN√ÇMICO
let MAPEAMENTO_IDS = {
    '23450974470333@lid': '258852118624@c.us',  // Seu ID
    '245075749638206@lid': null,  // Ser√° identificado automaticamente
    '76991768342659@lid': '258870818180@c.us',  // Jo√£ozinho - corrigido manualmente
    '216054655656152@lid': '258850401416@c.us', // Kelven Junior
    '85307059867830@lid': '258858891101@c.us',  // Isaac
    '170725386272876@lid': '258865627840@c.us',  // Erc√≠lio
    '251032533737504@lid': '258874100607@c.us'  // Mr Durst
};

// === SISTEMA AUTOM√ÅTICO DE MAPEAMENTO LID ===
const ARQUIVO_MAPEAMENTOS = path.join(__dirname, 'mapeamentos_lid.json');

async function carregarMapeamentos() {
    try {
        // Tentar ler o arquivo diretamente (se n√£o existir, vai dar erro e cai no catch)
        const data = await fs.readFile(ARQUIVO_MAPEAMENTOS, 'utf8');
        const mapeamentosSalvos = JSON.parse(data);
        // Mesclar com os mapeamentos base
        MAPEAMENTO_IDS = { ...MAPEAMENTO_IDS, ...mapeamentosSalvos };
        console.log(`‚úÖ Carregados ${Object.keys(mapeamentosSalvos).length} mapeamentos LID salvos`);
    } catch (error) {
        // Se o arquivo n√£o existir (ENOENT), apenas ignora silenciosamente
        if (error.code === 'ENOENT') {
            console.log('üìã Nenhum arquivo de mapeamentos LID encontrado - usando mapeamentos padr√£o');
        } else {
            console.error('‚ùå Erro ao carregar mapeamentos LID:', error.message);
        }
    }
}

async function salvarMapeamentos() {
    try {
        // Filtrar apenas os mapeamentos v√°lidos (n√£o null)
        const mapeamentosValidos = {};
        for (const [lid, numero] of Object.entries(MAPEAMENTO_IDS)) {
            if (numero && numero !== null) {
                mapeamentosValidos[lid] = numero;
            }
        }
        await fs.writeFile(ARQUIVO_MAPEAMENTOS, JSON.stringify(mapeamentosValidos, null, 2));
        console.log(`üíæ Salvos ${Object.keys(mapeamentosValidos).length} mapeamentos LID`);
    } catch (error) {
        console.error('‚ùå Erro ao salvar mapeamentos LID:', error.message);
    }
}

async function adicionarMapeamento(lid, numeroReal) {
    if (!lid || !numeroReal || lid === numeroReal) return false;

    // Validar formato
    if (!lid.endsWith('@lid') || !numeroReal.endsWith('@c.us')) return false;

    // Verificar se j√° existe
    if (MAPEAMENTO_IDS[lid] === numeroReal) return false;

    // Adicionar novo mapeamento
    MAPEAMENTO_IDS[lid] = numeroReal;
    console.log(`‚úÖ NOVO MAPEAMENTO: ${lid} ‚Üí ${numeroReal}`);
    await salvarMapeamentos();
    return true;
}

// Fun√ß√£o para tentar aprender mapeamento automaticamente quando ambos os formatos est√£o dispon√≠veis
async function aprenderMapeamento(message) {
    try {
        if (!message.from || !message.author) return;

        const from = message.from; // ID do remetente (pode ser @c.us)
        const author = message.author; // ID do autor (pode ser @lid)

        // Se temos um @lid e um @c.us, podemos aprender o mapeamento
        if (author && author.endsWith('@lid') && from && from.endsWith('@c.us')) {
            // Extrair n√∫mero base para validar se correspondem
            const numeroLid = author.replace('@lid', '');
            const numeroReal = from.replace('@c.us', '');

            // Tentar encontrar uma correspond√™ncia l√≥gica (primeiros d√≠gitos, etc.)
            // Por enquanto, sempre tentar mapear se n√£o temos o mapeamento
            if (!MAPEAMENTO_IDS[author]) {
                await adicionarMapeamento(author, from);
                console.log(`üîç APRENDIZADO: Detectado poss√≠vel mapeamento ${author} ‚Üí ${from}`);
            }
        }
    } catch (error) {
        // Silencioso - n√£o queremos spam nos logs
    }
}

// === CONFIGURA√á√ÉO DE MODERA√á√ÉO ===
const MODERACAO_CONFIG = {
    ativado: {
        '258820749141-1441573529@g.us': true,
        '120363152151047451@g.us': true,
        '258840161370-1471468657@g.us': true
    },
    detectarLinks: true,
    apagarMensagem: true,
    removerUsuario: false, // DESATIVADO: n√£o remove mais usu√°rios, apenas apaga a mensagem
    excecoes: [
        '258861645968@c.us',
        '258871112049@c.us',
        '258852118624@c.us'
    ]
};

// Configura√ß√£o para cada grupo
const CONFIGURACAO_GRUPOS = {
       '258820749141-1441573529@g.us': {
        nome: 'Data Store - Vodacom',
        tabela: `‚úÖüî•üö®PROMO√á√ÉO DE üõúMEGAS VODACOM AO MELHOR PRE√áO DO MERCADO - OUTUBRO 2025üö®üî•‚úÖ

üìÜ PACOTES DI√ÅRIOS
1024MB üíé 17MT üíµüíΩ
1200MB üíé 20MT üíµüíΩ
2048MB üíé 34MT üíµüíΩ
2200MB üíé 40MT üíµüíΩ
3072MB üíé 51MT üíµüíΩ
4096MB üíé 68MT üíµüíΩ
5120MB üíé 85MT üíµüíΩ
6144MB üíé 102MT üíµüíΩ
7168MB üíé 119MT üíµüíΩ
8192MB üíé 136MT üíµüíΩ
9144MB üíé 153MT üíµüíΩ
10240MB üíé 170MT üíµüíΩ

üìÖ PACOTES PREMIUM (3 Dias ‚Äì Renov√°veis)
2000MB üíé 44MT üíµüíΩ
3000MB üíé 66MT üíµüíΩ
4000MB üíé 88MT üíµüíΩ
5000MB üíé 109MT üíµüíΩ
6000MB üíé 133MT üíµüíΩ
7000MB üíé 149MT üíµüíΩ
10000MB üíé 219MT üíµüíΩ
üîÑ B√¥nus: 100MB extra ao atualizar dentro de 3 dias

üìÖ SEMANAIS B√ÅSICOS (5 Dias ‚Äì Renov√°veis)
1700MB üíé 45MT üíµüíΩ
2900MB üíé 80MT üíµüíΩ
3400MB üíé 110MT üíµüíΩ
5500MB üíé 150MT üíµüíΩ
7800MB üíé 200MT üíµüíΩ
11400MB üíé 300MT üíµüíΩ
üîÑ B√¥nus: 100MB extra ao atualizar dentro de 5 dias

üìÖ SEMANAIS PREMIUM (15 Dias ‚Äì Renov√°veis)
3000MB üíé 100MT üíµüíΩ
5000MB üíé 149MT üíµüíΩ
8000MB üíé 201MT üíµüíΩ
10000MB üíé 231MT üíµüíΩ
20000MB üíé 352MT üíµüíΩ
üîÑ B√¥nus: 100MB extra ao atualizar dentro de 15 dias

üìÖ PACOTES MENSAIS
12.8GB üíé 270MT üíµüíΩ
22.8GB üíé 435MT üíµüíΩ
32.8GB üíé 605MT üíµüíΩ
52.8GB üíé 945MT üíµüíΩ
60.2GB üíé 1249MT üíµüíΩ
80.2GB üíé 1449MT üíµüíΩ
100.2GB üíé 1700MT üíµüíΩ

üíé PACOTES DIAMANTE MENSAIS
Chamadas + SMS ilimitadas + 11GB üíé 460MT üíµ
Chamadas + SMS ilimitadas + 24GB üíé 820MT üíµ
Chamadas + SMS ilimitadas + 50GB üíé 1550MT üíµ
Chamadas + SMS ilimitadas + 100GB üíé 2250MT üíµ

üìç NB: V√°lido apenas para Vodacom  
üìç Para o Pacote Mensal e Diamante, n√£o deve ter Txuna¬†cr√©dito¬†ativo!
`,

        pagamento: `FORMAS DE PAGAMENTO ATUALIZADAS
 
1- M-PESA 
N√öMERO: 848715208
NOME:  NATACHA ALICE

N√öMERO: 871112049
NOME: NATACHA ALICE`
    },
    '258840161370-1471468657@g.us': {
        nome: 'Venda Autom√°tica 24/7',
        tabela: `üì¢üî• TABELA ATUALIZADA ‚Äì OUTUBRO 2025 üî•üì¢
Internet e Chamadas Ilimitadas ‚Äì Vodacom
Pacotes Di√°rios | Semanais | Mensais

OFERTA ESPECIAL ‚Äì 24 HORAS ‚è±
750MB - 15MT
1024MB - 17MT
1200MB - 20MT
2048MB - 34MT

PACOTES DI√ÅRIOS (24H ‚è±)
2400MB - 40MT
3072MB - 51MT
4096MB - 68MT
5120MB - 85MT
6144MB - 102MT
7168MB - 119MT
8192MB - 136MT
9144MB - 153MT
10240MB - 170MT

PACOTES PREMIUM (3 DIAS üóì ‚Äì RENOV√ÅVEIS)
2000MB - 44MT
3000MB - 66MT
4000MB - 88MT
5000MB - 109MT
6000MB - 133MT
7000MB - 149MT
10000MB - 219MT
B√¥nus üîÑ: Receba 100MB extras para atualizar os megas dentro de 3 dias

SEMANAIS B√ÅSICOS (5 DIAS üóì ‚Äì RENOV√ÅVEIS)
1700MB - 45MT
2900MB - 80MT
3400MB - 110MT
5500MB - 150MT
7800MB - 200MT
11400MB - 300MT
B√¥nus üîÑ: Receba 100MB extras para atualizar os megas dentro de 5 dias

SEMANAIS PREMIUM (15 DIAS üóì ‚Äì RENOV√ÅVEIS)
3000MB - 100MT
5000MB - 149MT
8000MB - 201MT
10000MB - 231MT
20000MB - 352MT
B√¥nus üîÑ: Receba 100MB extras para atualizar os megas dentro de 15 dias

PACOTES MENSAIS EXCLUSIVOS (30 DIAS üìÜ ‚Äì N√ÉO RENOV√ÅVEIS)
2.8GB - 100MT
5.8GB - 175MT
8.8GB - 200MT
10.8GB - 249MT
12.8GB - 300MT
15.8GB - 349MT
18.8GB - 400MT
20.8GB - 449MT
25.8GB - 549MT
32.8GB - 649MT
51.2GB - 1049MT
60.2GB - 1249MT
80.2GB - 1449MT
100.2GB - 1700MT
Observa√ß√£o: Pacotes mensais n√£o compat√≠veis com Txuna

CHAMADAS ILIMITADAS ‚Äî VODACOM üìû ‚ôæ
7.5GB - 280MT - Ilimitadas
11GB - 449MT - Ilimitadas ‚ú®
14.5GB - 500MT - Ilimitadas
26.5GB - 700MT - Ilimitadas
37.5GB - 1000MT - Ilimitadas
53.5GB - 1500MT - Ilimitadas
102.5GB - 2150MT - Ilimitadas
Inclui chamadas e SMS ilimitadas para todas as redes

CHAMADAS ILIMITADAS ‚Äî MOVITEL üìû ‚ôæ
7.1GB - 280MT - Ilimitadas
9GB - 449MT - Ilimitadas ‚ú®
23GB - 950MT - Ilimitadas
38GB - 1450MT - Ilimitadas
46GB - 1700MT - Ilimitadas
53GB - 1900MT - Ilimitadas
68GB - 2400MT - Ilimitadas
Inclui chamadas e SMS ilimitadas para todas as redes

üîπ CONEX√ÉO SEM LIMITES üîπ
Internet r√°pida, chamadas e SMS ilimitadas.
Pacotes exclusivos Vodacom e Movitel.
Sempre conectado, sempre¬†no¬†controle!
`,

        pagamento: `üí∏ FORMAS DE PAGAMENTO

üü† E-Mola ‚Äì Gl√≥ria | üì≤ 860186270  
üî¥ M-Pesa ‚Äì Leonor | üì≤ 857451196  

‚ö† ATEN√á√ÉO  
‚ñ™ Ap√≥s o pagamento, envie a confirma√ß√£o ‚úâ ** e o seu n√∫mero para receber o seu pacote üì≤  
‚ñ™ Envie ** o valor exato da tabela üí∞  

NB: V√°lido apenas para Vodacom  
üöÄ Garanta seus Megabytes¬†agora!
`
¬†¬†¬†¬†},
    '120363020570328377@g.us': {
        nome: ' NET VODACOM ACESS√çVEL',
        tabela: `üö®üì± INTERNET VODACOM COM OS MELHORES PRE√áOS!
Mega Promo√ß√£o da NET DA VODACOM ACESS√çVEL ‚Äî Conecte-se j√°! üöÄ

üìÖ PACOTES DI√ÅRIOS (24h de validade)

‚úÖ 1GB - 17MT
‚úÖ 2GB - 34MT
‚úÖ 3GB - 51MT
‚úÖ 4GB - 68MT
‚úÖ 5GB - 85MT
‚úÖ 6GB - 102MT
‚úÖ 7GB - 119MT
‚úÖ 8GB - 136MT
‚úÖ 9GB - 153MT
‚úÖ 10GB - 170MT



üö®QUANDO PRECISAREM PACOTE MENSAL, ENTRA EM CONTACTO ATRAV√âS DO LINK ABAIXO üëáüëáüö®

https://wa.me/258858891101?text=%20Quero%20pacote%20mensal!%20


QUANDO PRECISAREM DO  ILIMITADO, EMTREM EM CONTACTO COM O LINK 
https://wa.me/258858891101?text=%20Quero%20pacote%20ilimitado!%20


FORMAS DE PAGAMENTOüí∞üí∂

üìå M-PESA:  858891101
   Nome:  ISAC DA LURDES

üìå E-MOLA: 866291101
    Nome:   ISAC LURDES 

üöÄ O futuro √© agora!¬†Vamos?¬†üî•üõí


`,

        pagamento: `FORMAS DE PAGAMENTOüí∞üí∂

üìå M-PESA:  858891101
   Nome:  ISAC DA LURDES

üìå E-MOLA: 866291101
    Nome:  ISAC LURDES 

üìÆ Ap√≥s a transfer√™ncia enviei o comprovante em forma do c√≥pia junto com seu n√∫mero.
 
> 1. üö®N√£o mande comprovativo em formato de imagem üì∏üö®

> 2.  üö® N√£o mande valor que n√£o t√™m na tabelaüö®

üöÄ O futuro √© agora!¬†Vamos?¬†üî•üõí
`
¬†¬†¬†¬†},
    '120363022366545020@g.us': {
        nome: 'MNGmegas Elite Net',
        tabela: `üö®MB DA VODACOM üì∂üåê

üî• Imperd√≠vel! Nosso pacote di√°rio e semanal, txuna! N√£o levaüí∏
‚ö° Aproveite j√°, pode acabar a qualquer momento! üöÄ

‚è∞PACOTE DI√ÅRIOüõíüì¶
üåê256MB = 7MT
üåê512MB = 10MT
üåê1024MB = 17MT
üåê1280MB = 25MT
üåê2048MB = 34MT
üåê3072MB = 51MT
üåê4096MB = 68MT
üåê5120MB = 85MT
üåê6144MB = 102MT
üåê7168MB = 119MT
üåê8192MB = 136MT
üåê9216MB = 153MT
üåê10240MB = 170MT

 üìÖPACOTE SEMANALüõíüì¶
‚ö† Vai receber 100MB por dia durante 6 dias, totalizando +0.6GB. ‚ö†

üì°3.0GB = 89MT 
üì°5.0GB = 133MT
üì°6.0GB = 158MT 
üì°7.0GB = 175MT 
üì°10.0GB = 265MT

> PARA VER TABELA DO PACOTE MENSAL DIGITE: Mensal

> PARA VER TABELA DO PACOTE  ILIMITADO DIGITE: Ilimitado


üí≥FORMA DE PAGAMENTO:

M-Pesa: 853529033 üì±
- Erc√≠lio UANELA 
e-Mola: 865627840 üì±
- Alexandre UANELA 

‚ú® Mais R√°pido, Mais Barato, Mais¬†Confi√°vel!¬†‚ú®

`,

        pagamento: `formas de pagamentoüí∞üí∂

üìå m-pesa: 853529033 
   nome: erc√≠lio uanela 

üìå e-mola: 865627840 
    nome: alexandre uanela  

üìÆ ap√≥s a transfer√™ncia enviei o comprovante em forma do c√≥pia junto com seu n√∫mero.
 
> 1. üö®n√£o mande comprovativo em formato de imagem üì∏üö®

> 2.  üö® n√£o mande valor que n√£o t√™m na tabelaüö®

üöÄ o futuro √© agora!¬†vamos?¬†üî•üõí
`
¬†¬†¬†¬†},
    '120363402302455817@g.us': {
        nome: 'KA-NET',
        tabela: `SUPER PROMO√á√ÉO NA VODACOMüõëüî•üòç

üìÜ PACOTES DI√ÅRIOS
512MB = 10MT
1024MB = 16MT
1200MB = 20MT
1560MB = 25MT
2048MB = 32MT
3200MB = 54MT 
4250MB = 68MT 
5350MB = 90MT 
10240MB = 160MT

‚ø£PACOTE DI√ÅRIO PREMIUM (3 Dias)
300MB + 2000MB = 40MT
300MB + 3000MB = 66MT 
300MB + 4000MB = 72MT 
300MB + 5000MB = 85MT
300MB + 6000MB = 110MT 
300MB + 7000MB = 125MT 
300MB + 10000MB = 180MT 

‚øßPACOTE SEMANAL (5 dias)
500MB + 5000MB = 95MT
500MB + 8000MB = 140MT
500MB + 10000MB = 190MT
500MB + 15000MB = 290MT

Mensal (V√°lido Por 30 Dias)
5GB = 150MT
10GB = 250MT
35GB = 710MT
50GB = 1030MT
100GB¬†=¬†2040MT

üìÖ PACOTES DIAMANTE MENSAIS üíé
Chamadas + SMS ilimitadas + 11GB = 440MT 
Chamadas + SMS ilimitadas + 24GB = 820MT 
Chamadas + SMS ilimitadas + 50GB = 1550MT 
Chamadas + SMS ilimitadas +¬†100GB¬†=¬†2250MT
`,
        pagamento: `- üì≤ ùóò-ùó†ùó¢ùóüùóî: 864882152üí∂üí∞
- Catia Anabela Nharrava 
- üì≤ ùó†-ùó£ùóòùó¶ùóî: 856268811üí∑üí∞ 
- ‚Ü™üìûKelven Junior Anabela¬†Nharrava
`
¬†¬†¬†¬†}, 
'258876291014-1634575097@g.us': {
        nome: 'ü™êV2 Megabytes NetConnect üåç',
        tabela: `üì¢üî• TABELA ATUALIZADA ‚Äì OUTUBRO 2025 üî•üì¢
Internet e Chamadas Ilimitadas ‚Äì Vodacom
Pacotes Di√°rios | Semanais | Mensais

OFERTA ESPECIAL ‚Äì 24 HORAS ‚è±
512MB - 10MT
750MB - 15MT
1024MB - 17MT
1200MB - 20MT
2048MB - 34MT

PACOTES DI√ÅRIOS (24H ‚è±)
2400MB - 40MT
3072MB - 51MT
4096MB - 68MT
5120MB - 85MT
6144MB - 102MT
7168MB - 119MT
8192MB - 136MT
9144MB - 153MT
10240MB - 170MT

PACOTES PREMIUM (3 DIAS üóì ‚Äì RENOV√ÅVEIS)
2000MB - 44MT
3000MB - 66MT
4000MB - 88MT
5000MB - 109MT
6000MB - 133MT
7000MB - 149MT
10000MB - 219MT
B√¥nus üîÑ: Receba 100MB extras para atualizar os megas dentro de 3 dias

SEMANAIS B√ÅSICOS (5 DIAS üóì ‚Äì RENOV√ÅVEIS)
1700MB - 45MT
2900MB - 80MT
3400MB - 110MT
5500MB - 150MT
7800MB - 200MT
11400MB - 300MT
B√¥nus üîÑ: Receba 100MB extras para atualizar os megas dentro de 5 dias

SEMANAIS PREMIUM (15 DIAS üóì ‚Äì RENOV√ÅVEIS)
3000MB - 100MT
5000MB - 149MT
8000MB - 201MT
10000MB - 231MT
20000MB - 352MT
B√¥nus üîÑ: Receba 100MB extras para atualizar os megas dentro de 15 dias

PACOTES MENSAIS EXCLUSIVOS (30 DIAS üìÜ ‚Äì N√ÉO RENOV√ÅVEIS)
2.8GB - 100MT
5.8GB - 175MT
8.8GB - 200MT
10.8GB - 249MT
12.8GB - 300MT
15.8GB - 349MT
18.8GB - 400MT
20.8GB - 449MT
25.8GB - 549MT
32.8GB - 649MT
51.2GB - 1049MT
60.2GB - 1249MT
80.2GB - 1449MT
100.2GB - 1700MT
Observa√ß√£o: Pacotes mensais n√£o compat√≠veis com Txuna

CHAMADAS ILIMITADAS ‚Äî VODACOM üìû ‚ôæ
7.5GB - 280MT - Ilimitadas
11GB - 449MT - Ilimitadas ‚ú®
14.5GB - 500MT - Ilimitadas
26.5GB - 700MT - Ilimitadas
37.5GB - 1000MT - Ilimitadas
53.5GB - 1500MT - Ilimitadas
102.5GB - 2150MT - Ilimitadas
Inclui chamadas e SMS ilimitadas para todas as redes

CHAMADAS ILIMITADAS ‚Äî MOVITEL üìû ‚ôæ
7.1GB - 280MT - Ilimitadas
9GB - 449MT - Ilimitadas ‚ú®
23GB - 950MT - Ilimitadas
38GB - 1450MT - Ilimitadas
46GB - 1700MT - Ilimitadas
53GB - 1900MT - Ilimitadas
68GB - 2400MT - Ilimitadas
Inclui chamadas e SMS ilimitadas para todas as redes

üîπ CONEX√ÉO SEM LIMITES üîπ
Internet r√°pida, chamadas e SMS ilimitadas.
Pacotes exclusivos Vodacom e Movitel.
Sempre conectado, sempre¬†no¬†controle!
`,

        pagamento: `üí∏ FORMAS DE PAGAMENTO

üü† E-Mola ‚Äì Gl√≥ria | üì≤ 860186270  
üî¥ M-Pesa ‚Äì Leonor | üì≤ 857451196  

‚ö† ATEN√á√ÉO  
‚ñ™ Ap√≥s o pagamento, envie a confirma√ß√£o ‚úâ ** e o seu n√∫mero para receber o seu pacote üì≤  
‚ñ™ Envie ** o valor exato da tabela üí∞  

NB: V√°lido apenas para Vodacom  
üöÄ Garanta seus Megabytes¬†agora!
`
¬†¬†¬†¬†}
¬†¬†¬†¬†
};



// === FUN√á√ÉO GOOGLE SHEETS ===

// Fun√ß√£o para retry autom√°tico
async function tentarComRetry(funcao, maxTentativas = 3, delay = 2000) {
    for (let tentativa = 1; tentativa <= maxTentativas; tentativa++) {
        try {
            return await funcao();
        } catch (error) {
            console.log(`‚ö†Ô∏è Tentativa ${tentativa}/${maxTentativas} falhou: ${error.message}`);
            
            if (tentativa === maxTentativas) {
                throw error; // √öltima tentativa, propagar erro
            }
            
            // Aguardar antes da pr√≥xima tentativa
            await new Promise(resolve => setTimeout(resolve, delay));
        }
    }
}
async function enviarParaGoogleSheets(referencia, valor, numero, grupoId, grupoNome, autorMensagem) {
    // Formato igual ao Bot Atacado: transacao j√° concatenada
    const transacaoFormatada = `${referencia}|${valor}|${numero}`;
    
    const dados = {
        transacao: transacaoFormatada,  // Formato concatenado igual ao Bot Atacado
        grupo_id: grupoId,
        sender: 'WhatsApp-Bot',  // Identificar origem
        message: `Dados enviados pelo Bot: ${transacaoFormatada}`,
        timestamp: new Date().toISOString()
    };
    
    try {
        console.log(`üìä Enviando para Google Sheets: ${referencia}`);
        console.log(`üîç Dados enviados:`, JSON.stringify(dados, null, 2));
        console.log(`üîó URL destino:`, GOOGLE_SHEETS_CONFIG.scriptUrl);

        // Usar axios COM RETRY para Google Sheets
        const response = await axiosComRetry({
            method: 'post',
            url: GOOGLE_SHEETS_CONFIG.scriptUrl,
            data: dados,
            headers: {
                'Content-Type': 'application/json',
                'X-Bot-Source': 'WhatsApp-Bot-Pooled'
            }
        }, 3); // 3 tentativas
        
        // Google Apps Script agora retorna JSON
        const responseData = response.data;
        console.log(`üì• Resposta Google Sheets:`, JSON.stringify(responseData, null, 2));

        // Verificar se √© uma resposta JSON v√°lida
        if (typeof responseData === 'object') {
            if (responseData.success) {
                console.log(`‚úÖ Google Sheets: Dados enviados!`);
                return { sucesso: true, referencia: responseData.referencia, duplicado: false };
            } else if (responseData.duplicado) {
                console.log(`‚ö†Ô∏è Google Sheets: Pedido duplicado detectado - ${responseData.referencia} (Status: ${responseData.status_existente})`);
                return {
                    sucesso: false,
                    duplicado: true,
                    referencia: responseData.referencia,
                    status_existente: responseData.status_existente,
                    message: responseData.message
                };
            } else {
                throw new Error(responseData.message || 'Erro desconhecido');
            }
        } else {
            // Fallback para compatibilidade com resposta em texto
            const responseText = String(responseData);
            if (responseText.includes('Sucesso!')) {
                console.log(`‚úÖ Google Sheets: Dados enviados!`);
                return { sucesso: true, row: 'N/A', duplicado: false };
            } else if (responseText.includes('Erro:')) {
                throw new Error(responseText);
            } else {
                throw new Error(`Resposta inesperada: ${responseText}`);
            }
        }
        
    } catch (error) {
        console.error(`‚ùå Erro Google Sheets [${grupoNome}]: ${error.message}`);
        return { sucesso: false, erro: error.message };
    }
}

// === FUN√á√ÉO PRINCIPAL PARA TASKER ===
async function enviarParaTasker(referencia, valor, numero, grupoId, autorMensagem) {
    const grupoNome = getConfiguracaoGrupo(grupoId)?.nome || 'Desconhecido';
    const timestamp = new Date().toLocaleString('pt-BR');
    const linhaCompleta = `${referencia}|${valor}|${numero}`;

    console.log(`üìä ENVIANDO PARA GOOGLE SHEETS [${grupoNome}]: ${linhaCompleta}`);

    // === VALIDA√á√ïES PREVENTIVAS ===
    if (!referencia || !valor || !numero) {
        console.error(`‚ùå VALIDA√á√ÉO FALHOU: Dados incompletos - referencia=${referencia}, valor=${valor}, numero=${numero}`);
        return {
            sucesso: false,
            erro: 'Dados incompletos para envio'
        };
    }

    // Validar formato da refer√™ncia
    if (typeof referencia !== 'string' || referencia.length < 3) {
        console.error(`‚ùå VALIDA√á√ÉO FALHOU: Refer√™ncia inv√°lida - ${referencia}`);
        return {
            sucesso: false,
            erro: 'Refer√™ncia inv√°lida'
        };
    }

    // Validar n√∫mero
    const numeroLimpo = String(numero).replace(/[^0-9]/g, '');
    if (numeroLimpo.length < 9) {
        console.error(`‚ùå VALIDA√á√ÉO FALHOU: N√∫mero inv√°lido - ${numero}`);
        return {
            sucesso: false,
            erro: 'N√∫mero de telefone inv√°lido'
        };
    }

    // Validar URL do Google Sheets
    if (!GOOGLE_SHEETS_CONFIG.scriptUrl || GOOGLE_SHEETS_CONFIG.scriptUrl === '') {
        console.error(`‚ùå VALIDA√á√ÉO FALHOU: URL do Google Sheets n√£o configurada`);
        return {
            sucesso: false,
            erro: 'Google Sheets n√£o configurado'
        };
    }

    // Cache da transa√ß√£o
    const transacaoKey = `${grupoId}_${Date.now()}_${numero}`;
    cacheTransacoes.set(transacaoKey, {
        dados: linhaCompleta,
        grupo_id: grupoId,
        grupo: grupoNome,
        autor: autorMensagem,
        timestamp: timestamp,
        enviado: false,
        metodo: 'pendente'
    });

    // === TENTAR GOOGLE SHEETS COM RETRY ===
    let tentativas = 0;
    let resultado = null;
    const maxTentativas = 3;

    while (tentativas < maxTentativas) {
        tentativas++;

        try {
            console.log(`üîÑ Tentativa ${tentativas}/${maxTentativas} de envio para Google Sheets...`);
            resultado = await enviarParaGoogleSheets(referencia, valor, numero, grupoId, grupoNome, autorMensagem);

            if (resultado.sucesso) {
                break; // Sucesso, sair do loop
            } else if (resultado.duplicado) {
                break; // Duplicado, sair do loop (n√£o tentar novamente)
            } else {
                console.warn(`‚ö†Ô∏è Tentativa ${tentativas} falhou:`, resultado.erro || 'Erro desconhecido');

                // Aguardar antes de tentar novamente (exceto na √∫ltima tentativa)
                if (tentativas < maxTentativas) {
                    const delay = tentativas * 2000; // 2s, 4s
                    console.log(`‚è≥ Aguardando ${delay/1000}s antes da pr√≥xima tentativa...`);
                    await new Promise(resolve => setTimeout(resolve, delay));
                }
            }
        } catch (error) {
            console.error(`‚ùå Erro na tentativa ${tentativas}:`, error.message);

            // Aguardar antes de tentar novamente (exceto na √∫ltima tentativa)
            if (tentativas < maxTentativas) {
                const delay = tentativas * 2000;
                await new Promise(resolve => setTimeout(resolve, delay));
            }
        }
    }

    if (resultado && resultado.sucesso) {
        // Atualizar cache
        if (cacheTransacoes.has(transacaoKey)) {
            const transacao = cacheTransacoes.get(transacaoKey);
            transacao.enviado = true;
            transacao.metodo = 'google_sheets';
            transacao.row = resultado.row;
        }
        console.log(`‚úÖ [${grupoNome}] Enviado para Google Sheets com sucesso! Row: ${resultado.row}`);

        // === REGISTRAR COMPRA PENDENTE NO SISTEMA DE COMPRAS ===
        if (sistemaCompras) {
            try {
                // Extrair apenas o n√∫mero do autorMensagem (remover @c.us se houver)
                const numeroRemetente = autorMensagem.replace('@c.us', '');
                console.log(`üîç DEBUG COMPRA: autorMensagem="${autorMensagem}" | numeroRemetente="${numeroRemetente}" | numero="${numero}"`);
                await sistemaCompras.registrarCompraPendente(referencia, numero, valor, numeroRemetente, grupoId);
            } catch (error) {
                console.error('‚ùå Erro ao registrar compra pendente:', error);
                // N√£o falhar o envio por causa disso
            }
        }

        return {
            sucesso: true,
            referencia: referencia,
            row: resultado.row,
            linhaCompleta: linhaCompleta
        };

    } else if (resultado && resultado.duplicado) {
        // Marcar como duplicado no cache
        if (cacheTransacoes.has(transacaoKey)) {
            cacheTransacoes.get(transacaoKey).status = 'duplicado';
        }
        console.log(`üõë [${grupoNome}] Pedido duplicado detectado: ${referencia}`);

        // Retornar informa√ß√µes do duplicado para o bot processar
        return {
            sucesso: false,
            duplicado: true,
            referencia: resultado.referencia,
            status_existente: resultado.status_existente,
            message: resultado.message
        };
    } else {
        // Todas as tentativas falharam
        console.error(`‚ùå [${grupoNome}] TODAS AS ${maxTentativas} TENTATIVAS FALHARAM para ${referencia}`);
        if (cacheTransacoes.has(transacaoKey)) {
            cacheTransacoes.get(transacaoKey).metodo = 'falhou';
        }

        return {
            sucesso: false,
            erro: resultado?.erro || 'Falha ao enviar para Google Sheets ap√≥s m√∫ltiplas tentativas',
            tentativas: maxTentativas
        };
    }
}

// REMOVIDO: Fun√ß√£o enviarViaWhatsAppTasker
// (Sistema de encaminhamento movido para outro bot)

// === FUN√á√ÉO REMOVIDA PARA OTIMIZA√á√ÉO ===
// N√£o salva mais arquivos .txt desnecess√°rios
// async function salvarArquivoTasker() - REMOVIDA

function obterDadosTasker() {
    return Array.from(cacheTransacoes.values());
}

function obterDadosTaskerHoje() {
    const hoje = new Date().toDateString();
    return Array.from(cacheTransacoes.values()).filter(item => {
        const dataItem = new Date(item.timestamp).toDateString();
        return dataItem === hoje;
    });
}

// === FUN√á√ïES PARA TASKER - SISTEMA DE PACOTES ===
function obterDadosPacotesTasker() {
    if (!sistemaPacotes) return [];
    
    const clientes = Object.values(sistemaPacotes.clientesAtivos);
    return clientes.map(cliente => ({
        numero: cliente.numero,
        referenciaOriginal: cliente.referenciaOriginal,
        tipoPacote: cliente.tipoPacote,
        diasRestantes: cliente.diasRestantes,
        proximaRenovacao: cliente.proximaRenovacao,
        status: cliente.status,
        grupoId: cliente.grupoId
    }));
}

function obterRenovacoesPendentesTasker() {
    if (!sistemaPacotes) return [];
    
    const agora = new Date();
    const proximas6h = new Date(agora.getTime() + (6 * 60 * 60 * 1000));
    
    const clientes = Object.values(sistemaPacotes.clientesAtivos);
    return clientes.filter(cliente => {
        const proximaRenovacao = new Date(cliente.proximaRenovacao);
        return proximaRenovacao <= proximas6h && cliente.diasRestantes > 0;
    }).map(cliente => ({
        numero: cliente.numero,
        referenciaOriginal: cliente.referenciaOriginal,
        tipoPacote: cliente.tipoPacote,
        proximaRenovacao: cliente.proximaRenovacao,
        diasRestantes: cliente.diasRestantes
    }));
}

// === COMANDOS CUSTOMIZADOS - FUN√á√ïES ===

async function carregarComandosCustomizados() {
    try {
        const data = await fs.readFile(ARQUIVO_COMANDOS, 'utf8');
        comandosCustomizados = JSON.parse(data);
        console.log(`üìù Comandos customizados carregados: ${Object.keys(comandosCustomizados).length} grupos`);
    } catch (error) {
        comandosCustomizados = {};
        console.log('üìù Arquivo de comandos n√£o existe, criando estrutura vazia');
    }
}

async function salvarComandosCustomizados() {
    try {
        await fs.writeFile(ARQUIVO_COMANDOS, JSON.stringify(comandosCustomizados));
        console.log('‚úÖ Comandos customizados salvos');
    } catch (error) {
        console.error('‚ùå Erro ao salvar comandos:', error);
    }
}

function parsearComandoCustomizado(texto) {
    // Regex para capturar: .addcomando Nome_do_comando(resposta)
    const regex = /^\.addcomando\s+(\w+)\s*\((.+)\)$/s;
    const match = texto.match(regex);
    
    if (match) {
        return {
            nome: match[1].toLowerCase(),
            resposta: match[2].trim()
        };
    }
    return null;
}

async function adicionarComandoCustomizado(chatId, nomeComando, resposta, autorId) {
    if (!comandosCustomizados[chatId]) {
        comandosCustomizados[chatId] = {};
    }
    
    comandosCustomizados[chatId][nomeComando] = {
        resposta: resposta,
        criadoPor: autorId,
        criadoEm: new Date().toISOString()
    };
    
    await salvarComandosCustomizados();
    console.log(`‚úÖ Comando '${nomeComando}' adicionado ao grupo ${chatId}`);
}

async function removerComandoCustomizado(chatId, nomeComando) {
    if (comandosCustomizados[chatId] && comandosCustomizados[chatId][nomeComando]) {
        delete comandosCustomizados[chatId][nomeComando];
        
        // Se n√£o h√° mais comandos no grupo, remove a entrada do grupo
        if (Object.keys(comandosCustomizados[chatId]).length === 0) {
            delete comandosCustomizados[chatId];
        }
        
        await salvarComandosCustomizados();
        console.log(`üóëÔ∏è Comando '${nomeComando}' removido do grupo ${chatId}`);
        return true;
    }
    return false;
}

function executarComandoCustomizado(chatId, comando) {
    if (comandosCustomizados[chatId] && comandosCustomizados[chatId][comando]) {
        return comandosCustomizados[chatId][comando].resposta;
    }
    return null;
}

// === FUN√á√ïES AUXILIARES ===

function detectarPerguntaPorNumero(mensagem) {
    const texto = mensagem.toLowerCase();
    
    const padroes = [
        /qual\s+(√©\s+)?(o\s+)?n√∫mero/i,
        /n√∫mero\s+(de\s+)?(contato|suporte|atendimento)/i,
        /como\s+(falar|contactar|entrar em contacto)/i,
        /preciso\s+(de\s+)?(ajuda|suporte|n√∫mero)/i,
        /onde\s+(posso\s+)?falar/i,
        /tem\s+(n√∫mero|contacto|suporte)/i,
        /quero\s+falar\s+com/i,
        /atendimento/i,
        /suporte/i,
        /admin/i,
        /administrador/i,
        /respons√°vel/i,
        /quem\s+(√©\s+)?respons√°vel/i,
        /como\s+contactar/i,
        /n√∫mero\s+do\s+admin/i
    ];
    
    return padroes.some(padrao => padrao.test(texto));
}

function isAdministrador(numero) {
    // Se for @lid, tentar converter para @c.us ANTES de verificar cache
    let numeroParaVerificar = numero;

    if (numero.includes('@lid')) {
        // Verificar se est√° no mapeamento
        if (MAPEAMENTO_IDS[numero]) {
            numeroParaVerificar = MAPEAMENTO_IDS[numero];
            console.log(`üîÑ Admin check: Convertido ${numero} -> ${numeroParaVerificar}`);
        } else {
            // Tentar extrair n√∫mero base e procurar no ADMINISTRADORES_GLOBAIS
            const numeroBase = numero.split('@')[0];
            const adminEncontrado = ADMINISTRADORES_GLOBAIS.find(admin =>
                admin.startsWith(numeroBase + '@')
            );
            if (adminEncontrado) {
                numeroParaVerificar = adminEncontrado;
                console.log(`üîÑ Admin check: Convertido ${numero} -> ${numeroParaVerificar} (por n√∫mero base)`);
            }
        }
    }

    // Agora verificar cache com o n√∫mero convertido
    const cached = adminCache.get(numeroParaVerificar);
    if (cached !== undefined && cached !== null) {
        return cached;
    }

    // Calcular e cachear resultado
    const isAdmin = ADMINISTRADORES_GLOBAIS.includes(numeroParaVerificar);
    adminCache.set(numeroParaVerificar, isAdmin);
    // Cachear tamb√©m o ID original se foi convertido
    if (numeroParaVerificar !== numero) {
        adminCache.set(numero, isAdmin);
    }

    return isAdmin;
}

function isGrupoMonitorado(chatId) {
    return CONFIGURACAO_GRUPOS.hasOwnProperty(chatId);
}

function getConfiguracaoGrupo(chatId) {
    return CONFIGURACAO_GRUPOS[chatId] || null;
}

// Fun√ß√£o para resolver ID interno (@lid) para n√∫mero real (@c.us)
function resolverIdReal(participantId, adminsEncontrados) {
    // Se j√° √© @c.us, retorna como est√°
    if (participantId.endsWith('@c.us')) {
        return participantId;
    }
    
    // Se tem mapeamento conhecido, usa ele
    if (MAPEAMENTO_IDS[participantId]) {
        return MAPEAMENTO_IDS[participantId];
    }
    
    // Se √© @lid, tenta encontrar correspond√™ncia nos admins
    if (participantId.endsWith('@lid')) {
        // Para agora, retorna o pr√≥prio ID para permitir compara√ß√£o direta
        return participantId;
    }
    
    return participantId;
}

// Fun√ß√£o para converter LID para n√∫mero usando API oficial do wwebjs
async function lidParaNumero(lid) {
    try {
        console.log(`üîç INICIO: Convertendo LID para n√∫mero: ${lid}`);
        console.log(`üîç CLIENTE: Status do cliente: ${client ? 'dispon√≠vel' : 'n√£o dispon√≠vel'}`);

        if (!client) {
            console.error(`‚ùå Cliente WhatsApp n√£o est√° dispon√≠vel para convers√£o LID`);
            return null;
        }

        // Verificar se o cliente est√° realmente pronto
        try {
            const info = await client.getState();
            console.log(`üîç ESTADO: Cliente estado: ${info}`);
            if (info !== 'CONNECTED') {
                console.error(`‚ùå Cliente n√£o est√° conectado (estado: ${info}) - n√£o √© poss√≠vel converter LID`);
                return null;
            }
        } catch (stateError) {
            console.error(`‚ùå Erro ao verificar estado do cliente:`, stateError.message);
            return null;
        }

        console.log(`üîç CHAMANDO: client.getContactById(${lid})`);
        const contato = await client.getContactById(lid);
        console.log(`üîç CONTATO: Objeto recebido:`, contato ? 'OK' : 'NULL');

        if (!contato) {
            console.error(`‚ùå Contato n√£o encontrado para LID: ${lid}`);
            return null;
        }

        const numeroReal = contato.number;
        console.log(`‚úÖ LID convertido com sucesso: ${lid} ‚Üí ${numeroReal}`);
        return numeroReal; // Retorna n√∫mero no formato internacional (ex: 258841234567)
    } catch (err) {
        console.error(`‚ùå Erro detalhado ao buscar n√∫mero para LID ${lid}:`, err.message);
        console.error(`‚ùå Stack trace:`, err.stack);
        return null;
    }
}


// FUN√á√ïES DE VERIFICA√á√ÉO DE ADMIN DO GRUPO REMOVIDAS
// Agora usa apenas isAdministrador() com ADMINISTRADORES_GLOBAIS

function contemConteudoSuspeito(mensagem) {
    const texto = mensagem.toLowerCase();

    // Detectar apenas URLs reais, n√£o a palavra "link"
    // Regex atualizado para detectar apenas links reais (http://, https://, www., ou dom√≠nios completos)
    const temLink = /(?:https?:\/\/[^\s]+|www\.[^\s]+|(?:bit\.ly|tinyurl\.com|t\.me|wa\.me|whatsapp\.com|telegram\.me)\/[^\s]+)/i.test(texto);

    return {
        temLink: MODERACAO_CONFIG.detectarLinks && temLink,
        suspeito: MODERACAO_CONFIG.detectarLinks && temLink
    };
}

async function deletarMensagem(message) {
    try {
        await message.delete(true);
        console.log(`üóëÔ∏è Mensagem deletada`);
        return true;
    } catch (error) {
        console.error('‚ùå Erro ao deletar mensagem:', error);
        return false;
    }
}

async function removerParticipante(chatId, participantId, motivo) {
    try {
        const chat = await client.getChatById(chatId);
        await chat.removeParticipants([participantId]);
        console.log(`üö´ Participante removido: ${participantId} - ${motivo}`);
        return true;
    } catch (error) {
        console.error('‚ùå Erro ao remover participante:', error);
        return false;
    }
}

async function aplicarModeracao(message, motivoDeteccao) {
    const chatId = message.from;
    const authorId = message.author || message.from;
    
    try {
        if (!MODERACAO_CONFIG.ativado[chatId]) {
            return;
        }

        if (MODERACAO_CONFIG.excecoes.includes(authorId) || isAdministrador(authorId)) {
            return;
        }

        console.log(`üö® MODERA√á√ÉO: ${motivoDeteccao}`);

        if (MODERACAO_CONFIG.apagarMensagem) {
            await deletarMensagem(message);
        }

        if (MODERACAO_CONFIG.removerUsuario) {
            await removerParticipante(chatId, authorId, motivoDeteccao);
        }

    } catch (error) {
        console.error('‚ùå Erro durante modera√ß√£o:', error);
    }
}

// === DETEC√á√ÉO DE GRUPOS ===
async function logGrupoInfo(chatId, evento = 'detectado') {
    try {
        const chat = await client.getChatById(chatId);
        const isGrupoMonitorado = CONFIGURACAO_GRUPOS.hasOwnProperty(chatId);
        
        console.log(`\nüîç ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê`);
        console.log(`üìã GRUPO ${evento.toUpperCase()}`);
        console.log(`üîç ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê`);
        console.log(`üìõ Nome: ${chat.name}`);
        console.log(`üÜî ID: ${chatId}`);
        console.log(`üë• Participantes: ${chat.participants ? chat.participants.length : 'N/A'}`);
        console.log(`üìä Monitorado: ${isGrupoMonitorado ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);
        console.log(`‚è∞ Data: ${new Date().toLocaleString('pt-BR')}`);
        
        if (!isGrupoMonitorado) {
            console.log(`\nüîß PARA ADICIONAR ESTE GRUPO:`);
            console.log(`üìù Copie este c√≥digo para CONFIGURACAO_GRUPOS:`);
            console.log(`\n'${chatId}': {`);
            console.log(`    nome: '${chat.name}',`);
            console.log(`    tabela: \`SUA_TABELA_AQUI\`,`);
            console.log(`    pagamento: \`SUAS_FORMAS_DE_PAGAMENTO_AQUI\``);
            console.log(`},\n`);
        }
        
        console.log(`üîç ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n`);
        
        return {
            id: chatId,
            nome: chat.name,
            participantes: chat.participants ? chat.participants.length : 0,
            monitorado: isGrupoMonitorado
        };
        
    } catch (error) {
        console.error(`‚ùå Erro ao obter informa√ß√µes do grupo ${chatId}:`, error);
        return null;
    }
}

// === HIST√ìRICO DE COMPRADORES ===

async function carregarHistorico() {
    try {
        const data = await fs.readFile(ARQUIVO_HISTORICO, 'utf8');
        historicoCompradores = JSON.parse(data);
        console.log('üìä Hist√≥rico carregado!');
    } catch (error) {
        console.log('üìä Criando novo hist√≥rico...');
        historicoCompradores = {};
    }
}

// === SALVAMENTO DE HIST√ìRICO OTIMIZADO ===
let salvamentoHistoricoPendente = false;
let timeoutHistorico = null;

async function salvarHistorico() {
    if (salvamentoHistoricoPendente) return;
    salvamentoHistoricoPendente = true;

    try {
        await fs.writeFile(ARQUIVO_HISTORICO, JSON.stringify(historicoCompradores));
    } catch (error) {
        console.error('‚ùå Erro ao salvar hist√≥rico:', error);
    } finally {
        salvamentoHistoricoPendente = false;
    }
}

function agendarSalvamentoHistorico() {
    if (timeoutHistorico) {
        clearTimeout(timeoutHistorico);
    }

    timeoutHistorico = setTimeout(async () => {
        agendarSalvamentoHistorico();
        timeoutHistorico = null;
    }, 3000); // 3 segundos para hist√≥rico
}

async function registrarComprador(grupoId, numeroComprador, nomeContato, valorTransferencia) {
    const agora = new Date();
    const timestamp = agora.toISOString();

    if (!historicoCompradores[grupoId]) {
        historicoCompradores[grupoId] = {
            nomeGrupo: getConfiguracaoGrupo(grupoId)?.nome || 'Grupo Desconhecido',
            compradores: {}
        };
    }

    if (!historicoCompradores[grupoId].compradores[numeroComprador]) {
        historicoCompradores[grupoId].compradores[numeroComprador] = {
            primeiraCompra: timestamp,
            ultimaCompra: timestamp,
            totalCompras: 1,
            nomeContato: nomeContato,
            historico: []
        };
    } else {
        historicoCompradores[grupoId].compradores[numeroComprador].ultimaCompra = timestamp;
        historicoCompradores[grupoId].compradores[numeroComprador].totalCompras++;
        historicoCompradores[grupoId].compradores[numeroComprador].nomeContato = nomeContato;
    }

    historicoCompradores[grupoId].compradores[numeroComprador].historico.push({
        data: timestamp,
        valor: valorTransferencia
    });

    if (historicoCompradores[grupoId].compradores[numeroComprador].historico.length > 10) {
        historicoCompradores[grupoId].compradores[numeroComprador].historico =
            historicoCompradores[grupoId].compradores[numeroComprador].historico.slice(-10);
    }

    agendarSalvamentoHistorico();
    console.log(`üí∞ Comprador registrado: ${nomeContato} (${numeroComprador}) - ${valorTransferencia}MT`);
}

// === FILA DE MENSAGENS ===

// REMOVIDO: Fun√ß√µes de processamento de fila de encaminhamento
// (Sistema movido para outro bot)

// === EVENTOS DO BOT ===

client.on('qr', (qr) => {
    console.log('üì± QR Code gerado - Escaneie o QR Code:');
    qrcode.generate(qr, { small: true });
});

client.on('authenticated', () => {
    console.log('üîê Cliente autenticado com sucesso!');
});

client.on('auth_failure', (msg) => {
    console.error('‚ùå Falha na autentica√ß√£o:', msg);
});

client.on('loading_screen', (percent, message) => {
    console.log('‚è≥ Carregando WhatsApp...', percent + '%', message);
});

client.on('ready', async () => {
    console.log('‚úÖ Bot conectado e pronto!');
    console.log('üß† IA WhatsApp ativa!');
    console.log('üìä Google Sheets configurado!');
    console.log(`üîó URL: ${GOOGLE_SHEETS_CONFIG.scriptUrl}`);
    console.log('ü§ñ Bot Retalho - L√≥gica simples igual ao Bot Atacado!');

    // Verificar se acabou de reiniciar e notificar grupos
    await verificarPosRestart();

    // Carregar mapeamentos LID salvos
    await carregarMapeamentos();

    // REMOVIDO: Carregamento de registro de mensagens (sistema movido para outro bot)

    // === INICIALIZAR SISTEMA DE RELAT√ìRIOS ===
    try {
        global.sistemaRelatorios = new SistemaRelatorios(client, GOOGLE_SHEETS_CONFIG, PAGAMENTOS_CONFIG);

        // Carregar configura√ß√µes salvas
        await global.sistemaRelatorios.carregarConfiguracoes();

        // Iniciar agendamento √†s 22h
        global.sistemaRelatorios.iniciarAgendamento();

        console.log('üìä Sistema de relat√≥rios iniciado!');
        console.log('‚è∞ Relat√≥rios agendados para 22:00 diariamente');
        console.log('üí∞ Pre√ßo de compra: 12 MT/GB | Revenda: 16-18 MT/GB');
        console.log('üìû Comandos: .config-relatorio .list-relatorios .remove-relatorio .test-relatorio');

    } catch (error) {
        console.error('‚ùå Erro ao iniciar sistema de relat√≥rios:', error.message);
    }

    // === INICIALIZAR SISTEMA DE RETRY SILENCIOSO ===
    await carregarPagamentosPendentes();
    console.log('üîÑ Sistema de Retry Silencioso ATIVADO!');
    
    // === INICIALIZAR SISTEMA DE PACOTES AP√ìS WhatsApp CONECTAR ===
    if (process.env.SISTEMA_PACOTES_ENABLED === 'true') {
        sistemaPacotes = new SistemaPacotes();
        console.log('üì¶ Sistema de Pacotes Autom√°ticos ATIVADO');
    } else {
        console.log('üì¶ Sistema de Pacotes Autom√°ticos DESABILITADO (.env)');
    }
    
    // === INICIALIZAR SISTEMA DE COMPRAS ===
    sistemaCompras = new SistemaCompras();
    console.log('üõí Sistema de Registro de Compras ATIVADO');

    // === INICIALIZAR SISTEMA DE B√îNUS ===
    sistemaBonus = new SistemaBonus();
    await sistemaBonus.carregarDados();
    console.log('üí∞ Sistema de B√¥nus ATIVADO');

    // Carregar dados de refer√™ncia (legado - ser√° migrado)
    await carregarDadosReferencia();
    
    await carregarHistorico();
    
    console.log('\nü§ñ Monitorando grupos:');
    Object.keys(CONFIGURACAO_GRUPOS).forEach(grupoId => {
        const config = CONFIGURACAO_GRUPOS[grupoId];
        console.log(`   üìã ${config.nome} (${grupoId})`);
    });
    
    console.log('\nüîß Comandos admin: .ia .stats .sheets .test_sheets .test_grupo .grupos_status .grupos .grupo_atual .addcomando .comandos .delcomando .test_vision .ranking .inativos .detetives .semcompra .resetranking .bonus .testreferencia .config-relatorio .list-relatorios .remove-relatorio .test-relatorio');

    // Monitoramento de novos membros DESATIVADO
    console.log('‚è∏Ô∏è Monitoramento autom√°tico de novos membros DESATIVADO');
});

// Event group-join DESATIVADO
client.on('group-join', async (notification) => {
    // Sistema de boas-vindas autom√°ticas DESATIVADO - c√≥digo removido completamente
    console.log('‚è∏Ô∏è Event group-join ignorado - sistema desativado');
    return;
});

// === HANDLERS SEPARADOS POR TIPO DE COMANDO ===
async function handleAdminCommands(message) {
    const autorMensagem = message.author || message.from;
    const comando = message.body.toLowerCase().trim();

    // Comando .souadmin - QUALQUER pessoa pode usar para verificar se √© admin
    if (comando === '.souadmin') {
        const isAdmin = isAdministrador(autorMensagem);
        const contato = await message.getContact();
        const nome = contato.pushname || contato.name || 'Voc√™';

        let resposta = `üîç *VERIFICA√á√ÉO DE ADMINISTRADOR*\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;
        resposta += `üë§ Nome: ${nome}\n`;
        resposta += `üì± ID: ${autorMensagem}\n`;
        resposta += `üëë Admin: ${isAdmin ? '‚úÖ SIM' : '‚ùå N√ÉO'}\n\n`;

        if (autorMensagem.includes('@lid')) {
            resposta += `‚ÑπÔ∏è Seu ID √© do tipo @lid\n`;
            if (MAPEAMENTO_IDS[autorMensagem]) {
                resposta += `üîÑ Mapeado para: ${MAPEAMENTO_IDS[autorMensagem]}\n`;
            } else {
                resposta += `‚ö†Ô∏è N√£o h√° mapeamento @lid para seu ID\n`;
            }
        }

        await message.reply(resposta);
        return true;
    }

    const isAdmin = isAdministrador(autorMensagem);
    if (!isAdmin) return false;

    // Comandos administrativos r√°pidos
    if (comando === '.ia') {
        const statusIA = ia.getStatusDetalhado();
        await message.reply(statusIA);
        return true;
    }

    if (comando === '.queue') {
        const stats = messageQueue.getStats();
        await message.reply(`üìä *QUEUE STATUS*\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\nüîÑ Fila: ${stats.queueSize}\n‚ö° Ativos: ${stats.activeJobs}\nüéØ Processando: ${stats.processing ? 'SIM' : 'N√ÉO'}`);
        return true;
    }

    if (comando === '.memory') {
        const stats = memoryManager.getStats();
        const memStats = `üìä *MEMORY STATUS*\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\nüíæ Mem√≥ria: ${stats.memory.total}MB\nüóÑÔ∏è Cache Transa√ß√µes: ${stats.cacheTransacoes}\nüë• C√≥digos Ref: ${stats.codigosReferencia}\nüéØ Clientes Ref: ${stats.referenciasClientes}\nüí∞ B√¥nus: ${stats.bonusSaldos}\n‚è≥ Pagamentos Pendentes: ${stats.pagamentosPendentes}`;
        await message.reply(memStats);
        return true;
    }

    if (comando === '.pool') {
        let poolStatus = `üîó *AXIOS STATUS (SIMPLIFICADO)*\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;
        poolStatus += `‚úÖ Axios simplificado ativo\n`;
        poolStatus += `‚ö° Timeout: 30s\n`;
        poolStatus += `üîÑ Max redirects: 3\n`;
        poolStatus += `üìä Pool complexo removido (seguindo bot1)`;

        await message.reply(poolStatus);
        return true;
    }

    if (comando === '.performance') {
        const queueStats = messageQueue.getStats();
        const usage = process.memoryUsage();
        const memTotal = Math.round(usage.rss / 1024 / 1024);

        let perfStatus = `‚ö° *PERFORMANCE STATUS*\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;
        perfStatus += `üîí Admin Cache: ${adminCache.size} entradas\n`;
        perfStatus += `üì§ Message Queue: ${queueStats.queueSize} fila, ${queueStats.activeJobs} ativos\n`;
        perfStatus += `üíæ Mem√≥ria: ${memTotal}MB\n`;
        perfStatus += `üîá Modo Silencioso: ${SILENT_MODE ? 'ATIVO' : 'INATIVO'}\n`;
        perfStatus += `üîó Conex√µes: Axios simplificado (bot1 pattern)`;

        await message.reply(perfStatus);
        return true;
    }

    return false; // Comando n√£o foi processado aqui
}

async function handlePurchaseCommands(message) {
    const body = message.body.toLowerCase().trim();

    // Comandos de compra que precisam ir para fila
    if (body.includes('comprar') || body.includes('mb') || body.includes('gb') ||
        body.startsWith('.') || body.includes('referencia') || body.includes('bonus')) {
        return true; // Deve ser processado na fila
    }

    return false;
}

async function processMessage(message) {
    try {
        const isPrivado = !message.from.endsWith('@g.us');
        const autorMensagem = message.author || message.from;
        const isAdmin = isAdministrador(autorMensagem);

        // DEBUG DETALHADO DA MENSAGEM
        if (message.body.startsWith('.addcomando') || message.body.startsWith('.comandos') || message.body.startsWith('.delcomando')) {
            smartLog(LOG_LEVEL.DEBUG, `üîç DEBUG MENSAGEM ADMIN:`);
            console.log(`   üì± message.from: ${message.from}`);
            console.log(`   üë§ message.author: ${message.author}`);
            console.log(`   üÜî autorMensagem: ${autorMensagem}`);
            
            try {
                const contact = await message.getContact();
                console.log(`   üìû Contact info:`, {
                    id: contact.id._serialized,
                    number: contact.number,
                    pushname: contact.pushname,
                    name: contact.name,
                    isMyContact: contact.isMyContact
                });
            } catch (err) {
                console.log(`   ‚ö†Ô∏è Erro ao obter contato: ${err.message}`);
            }
        }
        
        smartLog(LOG_LEVEL.DEBUG, `üîç Debug: Verificando admin para ${autorMensagem}, resultado: ${isAdmin}`);

        // === COMANDOS ADMINISTRATIVOS ===
        smartLog(LOG_LEVEL.DEBUG, `üîç Debug final: isAdmin = ${isAdmin}`);

        if (isAdmin) {
            const comando = message.body.toLowerCase().trim();

            if (comando === '.ia') {
                const statusIA = ia.getStatusDetalhado();
                await message.reply(statusIA);
                console.log(`üß† Comando .ia executado`);
                return;
            }

            // === COMANDO DEBUG MENSAGENS DE SISTEMA ===
            if (comando === '.debug') {
                try {
                    const chat = await client.getChatById(message.from);
                    const mensagens = await chat.fetchMessages({ limit: 20 });

                    let debugInfo = `üîç *DEBUG MENSAGENS (√∫ltimas 20)*\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;

                    mensagens.forEach((msg, index) => {
                        const timestamp = new Date(msg.timestamp * 1000).toLocaleString();
                        debugInfo += `${index + 1}. *Tipo:* ${msg.type}\n`;
                        debugInfo += `   *Timestamp:* ${timestamp}\n`;
                        debugInfo += `   *Author:* ${msg.author || 'Sistema'}\n`;
                        debugInfo += `   *Body:* "${msg.body || 'N/A'}"\n\n`;
                    });

                    await message.reply(debugInfo);
                    console.log(`üîç Comando .debug executado`);
                } catch (error) {
                    await message.reply(`‚ùå Erro no debug: ${error.message}`);
                }
                return;
            }

            if (comando === '.retry') {
                const pendenciasAtivas = Object.values(pagamentosPendentes);
                let statusRetry = `üîÑ *STATUS RETRY SILENCIOSO*\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;

                if (pendenciasAtivas.length === 0) {
                    statusRetry += `‚úÖ Nenhum pagamento pendente\n`;
                    statusRetry += `‚èπÔ∏è Timer: ${timerRetryPagamentos ? 'ATIVO' : 'PARADO'}\n`;
                } else {
                    statusRetry += `‚è≥ Pagamentos pendentes: ${pendenciasAtivas.length}\n\n`;

                    pendenciasAtivas.forEach((pendencia, index) => {
                        const tempoRestante = Math.max(0, Math.floor((pendencia.expira - Date.now()) / 60000));
                        const tempoDecorrido = Math.floor((Date.now() - pendencia.timestamp) / 60000);

                        statusRetry += `${index + 1}. ${pendencia.referencia}\n`;
                        statusRetry += `   üí∞ Valor: ${pendencia.valorComprovante}MT\n`;
                        statusRetry += `   üîÑ Tentativas: ${pendencia.tentativas}/${MAX_RETRY_ATTEMPTS}\n`;
                        statusRetry += `   ‚è∞ H√° ${tempoDecorrido}min (${tempoRestante}min restantes)\n\n`;
                    });

                    statusRetry += `üîÑ Timer: ${timerRetryPagamentos ? 'ATIVO' : 'PARADO'}\n`;
                    statusRetry += `‚è±Ô∏è Pr√≥xima verifica√ß√£o: ${RETRY_INTERVAL/1000}s\n`;
                }

                await message.reply(statusRetry);
                console.log(`üîÑ Comando .retry executado`);
                return;
            }

            // === COMANDO CANCELAR REFER√äNCIA AUTOM√ÅTICA ===
            if (comando.startsWith('.cancelar ')) {
                const codigo = comando.replace('.cancelar ', '').trim().toUpperCase();

                if (!codigo) {
                    await message.reply('‚ùå Use: .cancelar CODIGO\nExemplo: .cancelar ABC123');
                    return;
                }

                // Verificar se o c√≥digo existe
                const clienteId = codigosReferencia[codigo];
                if (!clienteId) {
                    await message.reply(`‚ùå C√≥digo de refer√™ncia *${codigo}* n√£o encontrado.`);
                    return;
                }

                const referencia = referenciasClientes[clienteId];
                if (!referencia) {
                    await message.reply(`‚ùå Dados da refer√™ncia *${codigo}* n√£o encontrados.`);
                    return;
                }

                // Verificar se quem est√° cancelando √© o convidador
                const autorMensagem = message.author || message.from;
                if (referencia.convidadoPor !== autorMensagem) {
                    await message.reply(`‚ùå Apenas *${referencia.nomeConvidador}* pode cancelar esta refer√™ncia.`);
                    return;
                }

                // Verificar se √© uma refer√™ncia autom√°tica
                const metodosAutomaticos = ['AUTO_INTELIGENTE', 'AUTO_ANALISE_MENSAGENS'];
                if (!metodosAutomaticos.includes(referencia.metodoDeteccao)) {
                    await message.reply(`‚ùå Apenas refer√™ncias criadas automaticamente podem ser canceladas.\nPara refer√™ncias manuais, contacte o administrador.`);
                    return;
                }

                // Verificar se j√° teve atividade (compras)
                if (referencia.comprasRealizadas > 0) {
                    await message.reply(`‚ùå N√£o √© poss√≠vel cancelar - cliente j√° realizou ${referencia.comprasRealizadas} compra(s).\nContacte o administrador se necess√°rio.`);
                    return;
                }

                // Cancelar a refer√™ncia
                delete referenciasClientes[clienteId];
                delete codigosReferencia[codigo];

                const mensagemCancelamento = `‚úÖ *REFER√äNCIA CANCELADA*

üéØ **C√≥digo:** ${codigo}
üë§ **Cliente:** ${referencia.nomeConvidado}
üìÖ **Cancelado em:** ${new Date().toLocaleDateString('pt-PT')}

üí° A refer√™ncia foi removida do sistema.`;

                await message.reply(mensagemCancelamento);
                console.log(`üóëÔ∏è Refer√™ncia autom√°tica cancelada: ${codigo} por ${referencia.nomeConvidador}`);
                return;
            }

            if (comando === '.stats') {
                let stats = `üìä *ESTAT√çSTICAS*\n‚ö† NB: V√°lido apenas para Vodacom‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;
                
                Object.keys(CONFIGURACAO_GRUPOS).forEach(grupoId => {
                    const config = CONFIGURACAO_GRUPOS[grupoId];
                    const dados = historicoCompradores[grupoId];
                    const totalCompradores = dados ? Object.keys(dados.compradores || {}).length : 0;
                    
                    if (totalCompradores > 0) {
                        stats += `üè¢ *${config.nome}*\n`;
                        stats += `üë• ${totalCompradores} compradores\n\n`;
                    }
                });
                
                await message.reply(stats);
                return;
            }

            if (comando === '.bonus_stats') {
                let stats = `üéÅ *ESTAT√çSTICAS DO SISTEMA DE REFER√äNCIAS*\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;
                
                // Estat√≠sticas gerais
                const totalCodigos = Object.keys(codigosReferencia).length;
                const totalReferencias = Object.keys(referenciasClientes).length;
                const totalUsuariosComBonus = Object.keys(bonusSaldos).length;
                const totalSaques = Object.keys(pedidosSaque).length;
                
                stats += `üìä **RESUMO GERAL:**\n`;
                stats += `   ‚Ä¢ C√≥digos gerados: ${totalCodigos}\n`;
                stats += `   ‚Ä¢ Refer√™ncias ativas: ${totalReferencias}\n`;
                stats += `   ‚Ä¢ Usu√°rios com b√¥nus: ${totalUsuariosComBonus}\n`;
                stats += `   ‚Ä¢ Saques solicitados: ${totalSaques}\n\n`;
                
                // Top convidadores
                const topConvidadores = Object.values(bonusSaldos)
                    .map(dados => ({
                        saldo: dados.saldo,
                        referencias: Object.keys(dados.detalhesReferencias || {}).length,
                        dados: dados
                    }))
                    .sort((a, b) => b.saldo - a.saldo)
                    .slice(0, 5);
                
                if (topConvidadores.length > 0) {
                    stats += `üèÜ **TOP 5 CONVIDADORES:**\n`;
                    topConvidadores.forEach((item, index) => {
                        const saldoGB = (item.saldo / 1024).toFixed(2);
                        stats += `   ${index + 1}. ${item.saldo}MB (${saldoGB}GB) - ${item.referencias} refer√™ncias\n`;
                    });
                    stats += `\n`;
                }
                
                // Estat√≠sticas de compras
                let totalComprasBonus = 0;
                let totalBonusDistribuido = 0;
                
                Object.values(bonusSaldos).forEach(saldo => {
                    if (saldo.detalhesReferencias) {
                        Object.values(saldo.detalhesReferencias).forEach(ref => {
                            totalComprasBonus += ref.compras || 0;
                            totalBonusDistribuido += ref.bonusGanho || 0;
                        });
                    }
                });
                
                stats += `üí∞ **B√îNUS DISTRIBU√çDOS:**\n`;
                stats += `   ‚Ä¢ Total de compras que geraram b√¥nus: ${totalComprasBonus}\n`;
                stats += `   ‚Ä¢ Total de MB distribu√≠dos: ${totalBonusDistribuido}MB\n`;
                stats += `   ‚Ä¢ Equivalente em GB: ${(totalBonusDistribuido / 1024).toFixed(2)}GB\n\n`;
                
                // Saques pendentes
                const saquesPendentes = Object.values(pedidosSaque).filter(p => p.status === 'pendente');
                if (saquesPendentes.length > 0) {
                    stats += `‚è≥ **SAQUES PENDENTES:** ${saquesPendentes.length}\n`;
                    const totalPendente = saquesPendentes.reduce((sum, p) => sum + p.quantidade, 0);
                    stats += `   ‚Ä¢ Valor total: ${totalPendente}MB (${(totalPendente/1024).toFixed(2)}GB)\n\n`;
                }
                
                stats += `üìà **SISTEMA DE REFER√äNCIAS ATIVO E FUNCIONANDO!**`;
                
                await message.reply(stats);
                return;
            }

            // === COMANDOS DO SISTEMA DE PACOTES ===
            if (sistemaPacotes) {

                // .pacote DIAS REF NUMERO - Criar pacote
                if (comando.startsWith('.pacote ')) {
                    try {
                        console.log(`üîß DEBUG: Comando .pacote detectado!`);
                        console.log(`üîß DEBUG: sistemaPacotes = ${sistemaPacotes ? 'INICIALIZADO' : 'NULL'}`);
                        console.log(`üîß DEBUG: SISTEMA_PACOTES_ENABLED = ${process.env.SISTEMA_PACOTES_ENABLED}`);

                        if (!sistemaPacotes) {
                            await message.reply(`‚ùå *SISTEMA DE PACOTES DESABILITADO*\n\nO sistema de pacotes autom√°ticos n√£o est√° ativo neste servidor.\n\nVerifique as configura√ß√µes de ambiente.`);
                            return;
                        }

                        const partes = message.body.trim().split(' ');

                        if (partes.length < 4) {
                            await message.reply(`‚ùå *USO INCORRETO*\n\n‚úÖ **Formato correto:**\n*.pacote DIAS REF NUMERO*\n\nüìù **Exemplos:**\n‚Ä¢ *.pacote 3 ABC123 845123456*\n‚Ä¢ *.pacote 30 XYZ789 847654321*\n\nüì¶ **Tipos dispon√≠veis:**\n‚Ä¢ 3 - Pacote de 3 dias (300MB)\n‚Ä¢ 5 - Pacote de 5 dias (500MB)\n‚Ä¢ 15 - Pacote de 15 dias (1.5GB)\n‚Ä¢ 30 - Pacote de 30 dias (3GB)`);
                            return;
                        }

                        const [, diasPacote, referencia, numero] = partes;
                        const grupoId = message.from;

                        console.log(`üì¶ COMANDO PACOTE: Dias=${diasPacote}, Ref=${referencia}, Numero=${numero}`);

                        const resultado = await sistemaPacotes.processarComprovante(referencia, numero, grupoId, diasPacote);

                        if (resultado.sucesso) {
                            await message.reply(resultado.mensagem);
                        } else {
                            await message.reply(`‚ùå **ERRO AO CRIAR PACOTE**\n\n‚ö†Ô∏è ${resultado.erro}\n\nüí° **Verificar:**\n‚Ä¢ Dias v√°lidos (3, 5, 15, 30)\n‚Ä¢ Refer√™ncia n√£o est√° duplicada`);
                        }
                    } catch (error) {
                        console.error('‚ùå Erro no comando .pacote:', error);
                        await message.reply(`‚ùå **ERRO INTERNO**\n\n‚ö†Ô∏è N√£o foi poss√≠vel processar o pacote\n\nüìù Erro: ${error.message}`);
                    }
                    return;
                }
                
                // .pacotes_ativos - Listar clientes com pacotes ativos (do grupo atual)
                if (comando === '.pacotes_ativos') {
                    const lista = sistemaPacotes.listarClientesAtivos(message.from);
                    await message.reply(lista);
                    return;
                }
                
                // .pacotes_stats - Estat√≠sticas do sistema de pacotes
                if (comando === '.pacotes_stats') {
                    const stats = sistemaPacotes.obterEstatisticas();
                    await message.reply(stats);
                    return;
                }

                // .pacotes_todos - Listar pacotes de TODOS os grupos (apenas admins globais)
                if (comando === '.pacotes_todos') {
                    if (!isAdministrador(autorMensagem)) {
                        await message.reply('‚ùå *Acesso negado!* Apenas administradores globais podem ver pacotes de todos os grupos.');
                        return;
                    }
                    const lista = sistemaPacotes.listarClientesAtivos(null); // null = todos os grupos
                    await message.reply(lista);
                    return;
                }
                
                // .cancelar_pacote NUMERO REF - Cancelar pacote
                if (comando.startsWith('.cancelar_pacote ')) {
                    const partes = message.body.trim().split(' ');
                    
                    if (partes.length < 3) {
                        await message.reply(`‚ùå *USO INCORRETO*\n\n‚úÖ **Formato correto:**\n*.cancelar_pacote NUMERO REFERENCIA*\n\nüìù **Exemplo:**\n‚Ä¢ *.cancelar_pacote 845123456 ABC123*`);
                        return;
                    }
                    
                    const [, numero, referencia] = partes;
                    const resultado = sistemaPacotes.cancelarPacote(numero, referencia);
                    await message.reply(resultado);
                    return;
                }

                // .validade NUMERO - Verificar validade do pacote (comando para CLIENTES)
                if (comando.startsWith('.validade ')) {
                    const partes = message.body.trim().split(' ');
                    
                    if (partes.length < 2) {
                        await message.reply(`‚ùå *USO INCORRETO*\n\n‚úÖ **Formato correto:**\n*.validade NUMERO*\n\nüìù **Exemplo:**\n‚Ä¢ *.validade 845123456*\n\nüí° Digite seu n√∫mero para verificar a validade do seu pacote de 100MB di√°rios.`);
                        return;
                    }
                    
                    const numero = partes[1];
                    const resultado = sistemaPacotes.verificarValidadePacote(numero);
                    
                    await message.reply(resultado);
                    return;
                }
                
                // .sistema_pacotes - Status do sistema
                if (comando === '.sistema_pacotes') {
                    const status = sistemaPacotes.getStatus();
                    let resposta = `üì¶ *STATUS DO SISTEMA DE PACOTES*\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;
                    resposta += `üü¢ **Status:** ${status.ativo ? 'ATIVO' : 'INATIVO'}\n`;
                    resposta += `üë• **Clientes ativos:** ${status.clientesAtivos}\n`;
                    resposta += `‚è±Ô∏è **Verifica√ß√£o:** ${status.intervalVerificacao/60000} min\n`;
                    resposta += `üì¶ **Tipos dispon√≠veis:** ${status.tiposPacotes.join(', ')}\n`;
                    resposta += `üìä **Hist√≥rico:** ${status.historicoSize} registros\n\n`;
                    resposta += `üîß **Comandos Administrativos:**\n`;
                    resposta += `‚Ä¢ *.pacote DIAS REF NUMERO* - Criar pacote\n`;
                    resposta += `‚Ä¢ *.pacotes_ativos* - Listar ativos\n`;
                    resposta += `‚Ä¢ *.pacotes_stats* - Estat√≠sticas\n`;
                    resposta += `‚Ä¢ *.cancelar_pacote NUMERO REF* - Cancelar\n\n`;
                    resposta += `üë§ **Comando para Clientes:**\n`;
                    resposta += `‚Ä¢ *.validade NUMERO* - Verificar validade do pacote\n\n`;
                    resposta += `‚ö° *Sistema funcionando automaticamente!*`;
                    
                    await message.reply(resposta);
                    return;
                }
            }

            // === COMANDOS DO SISTEMA DE COMPRAS ===
            if (sistemaCompras) {
                // .ranking - Mostrar ranking completo de compradores
                if (comando === '.ranking') {
                    try {
                        const ranking = await sistemaCompras.obterRankingCompletoGrupo(message.from);

                        console.log(`üìä DEBUG RANKING: Recebeu ${ranking ? ranking.length : 0} itens`);
                        if (ranking && ranking.length > 0) {
                            console.log(`üìä DEBUG RANKING: Primeiro item:`, JSON.stringify(ranking[0]));
                        }

                        if (!ranking || ranking.length === 0) {
                            await message.reply(`üìä *RANKING DE COMPRADORES*\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\nüö´ Nenhum comprador registrado no grupo.`);
                            return;
                        }
                        
                        let mensagem = `üìä *RANKING DE COMPRADORES*\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;
                        let mentions = [];
                        
                        for (let i = 0; i < ranking.length; i++) {
                            const item = ranking[i];

                            // Validar se o item tem dados v√°lidos
                            if (!item || !item.numero) {
                                console.log(`‚ö†Ô∏è Item inv√°lido no ranking na posi√ß√£o ${i}`);
                                continue;
                            }

                            // COPIAR EXATAMENTE A L√ìGICA DAS BOAS-VINDAS - SEM CONVERS√ÉO
                            const participantId = item.numero; // Usar n√∫mero exatamente como est√° salvo

                            // Obter informa√ß√µes do contato
                            try {
                                const contact = await client.getContactById(participantId);

                                // Prioridade: nome salvo > nome do perfil > n√∫mero
                                const nomeExibicao = contact.name || contact.pushname || item.numero;

                                const posicaoEmoji = i === 0 ? 'ü•á' : i === 1 ? 'ü•à' : i === 2 ? 'ü•â' : `${item.posicao}¬∫`;
                                const megasFormatados = (item.megas || 0) >= 1024 ?
                                    `${((item.megas || 0)/1024).toFixed(1)}GB` : `${item.megas || 0}MB`;

                                // Formatar o ID para men√ß√£o (remover @c.us ou @lid)
                                const mentionId = String(participantId).replace('@c.us', '').replace('@lid', '');

                                // Usar exatamente o mesmo padr√£o das boas-vindas
                                mensagem += `${posicaoEmoji} @${mentionId}\n`;
                                mensagem += `   üíæ ${megasFormatados} no grupo (${item.compras || 0}x)\n`;
                                mensagem += `   üìä Total: ${(item.megasTotal || 0) >= 1024 ? ((item.megasTotal || 0)/1024).toFixed(1)+'GB' : (item.megasTotal || 0)+'MB'}\n\n`;

                                mentions.push(participantId);
                            } catch (error) {
                                // Se n√£o conseguir obter o contato, usar apenas o n√∫mero com padr√£o das boas-vindas
                                const posicaoEmoji = i === 0 ? 'ü•á' : i === 1 ? 'ü•à' : i === 2 ? 'ü•â' : `${item.posicao}¬∫`;
                                const megasFormatados = (item.megas || 0) >= 1024 ?
                                    `${((item.megas || 0)/1024).toFixed(1)}GB` : `${item.megas || 0}MB`;

                                // Formatar o ID para men√ß√£o (remover @c.us ou @lid)
                                const mentionId = String(participantId).replace('@c.us', '').replace('@lid', '');

                                // Usar exatamente o mesmo padr√£o das boas-vindas
                                mensagem += `${posicaoEmoji} @${mentionId}\n`;
                                mensagem += `   üíæ ${megasFormatados} no grupo (${item.compras || 0}x)\n`;
                                mensagem += `   üìä Total: ${(item.megasTotal || 0) >= 1024 ? ((item.megasTotal || 0)/1024).toFixed(1)+'GB' : (item.megasTotal || 0)+'MB'}\n\n`;

                                mentions.push(participantId);
                            }
                        }

                        mensagem += `üèÜ *Total de compradores no grupo: ${ranking.length}*`;

                        // Validar e limpar array de mentions (aceitar @lid e @c.us)
                        const mentionsValidos = mentions.filter(id => {
                            if (!id || typeof id !== 'string') {
                                console.log(`‚ö†Ô∏è Mention inv√°lido (n√£o √© string):`, id);
                                return false;
                            }
                            // Aceitar @lid e @c.us, mas n√£o IDs gen√©ricos do sistema
                            if (id.startsWith('SAQUE_BONUS_')) {
                                console.log(`‚ö†Ô∏è Mention ignorado (sistema):`, id);
                                return false;
                            }
                            if (!id.includes('@lid') && !id.includes('@c.us')) {
                                console.log(`‚ö†Ô∏è Mention sem @lid ou @c.us:`, id);
                                return false;
                            }
                            return true;
                        });

                        console.log(`üìä Ranking: ${ranking.length} compradores, ${mentionsValidos.length} mentions v√°lidos`);

                        await client.sendMessage(message.from, mensagem, { mentions: mentionsValidos });
                        return;
                    } catch (error) {
                        console.error('‚ùå Erro ao obter ranking:', error);
                        await message.reply(`‚ùå *ERRO*\n\nN√£o foi poss√≠vel obter o ranking de compradores.\n\n‚ö†Ô∏è Erro: ${error.message}`);
                        return;
                    }
                }
                
                // .inativos - Mostrar membros do grupo que NUNCA compraram
                if (comando === '.inativos') {
                    try {
                        // Obter todos os participantes do grupo
                        const chat = await message.getChat();
                        const participantes = chat.participants || [];

                        console.log(`üë• Total de participantes no grupo: ${participantes.length}`);

                        // Obter lista de compradores do grupo
                        const compradores = await sistemaCompras.obterRankingCompletoGrupo(message.from);

                        // Criar Set com todos os IDs poss√≠veis dos compradores
                        const compradoresIdsSet = new Set();

                        for (const comprador of compradores) {
                            const idComprador = comprador.numero;
                            compradoresIdsSet.add(idComprador);

                            // Tentar obter o contato para descobrir outros IDs
                            try {
                                const contact = await client.getContactById(idComprador);

                                // Adicionar o ID principal do contato
                                if (contact.id && contact.id._serialized) {
                                    compradoresIdsSet.add(contact.id._serialized);
                                }

                                // Adicionar n√∫mero do usu√°rio se dispon√≠vel
                                if (contact.id && contact.id.user) {
                                    compradoresIdsSet.add(`${contact.id.user}@c.us`);
                                }

                                // Se o ID salvo √© @lid, verificar mapeamento
                                if (idComprador.includes('@lid') && MAPEAMENTO_IDS[idComprador]) {
                                    compradoresIdsSet.add(MAPEAMENTO_IDS[idComprador]);
                                }
                            } catch (error) {
                                // Continuar mesmo se n√£o conseguir obter o contato
                                console.log(`‚ö†Ô∏è N√£o foi poss√≠vel obter contato para: ${idComprador}`);
                            }
                        }

                        console.log(`üõí Total de compradores: ${compradores.length}`);
                        console.log(`üõí Total de IDs √∫nicos (todos os formatos): ${compradoresIdsSet.size}`);

                        // Obter IDs dos participantes
                        const participantesIds = participantes.map(p => p.id._serialized);
                        console.log(`üë• Total de participantes: ${participantesIds.length}`);

                        // Filtrar participantes que nunca compraram
                        const nuncaCompraram = [];

                        for (const participanteId of participantesIds) {
                            // Verificar se est√° no Set de compradores
                            if (compradoresIdsSet.has(participanteId)) {
                                console.log(`‚úÖ ${participanteId} √â COMPRADOR - filtrado`);
                                continue;
                            }

                            // Verificar tamb√©m pelo n√∫mero base
                            const numeroBase = participanteId.split('@')[0];
                            const temNumeroBase = Array.from(compradoresIdsSet).some(id => id.startsWith(numeroBase));

                            if (temNumeroBase) {
                                console.log(`‚úÖ ${participanteId} (base: ${numeroBase}) √â COMPRADOR - filtrado`);
                                continue;
                            }

                            // N√£o √© comprador
                            nuncaCompraram.push(participanteId);
                        }

                        console.log(`üö´ Membros que nunca compraram: ${nuncaCompraram.length}`);

                        if (nuncaCompraram.length === 0) {
                            await message.reply(`üéâ *MEMBROS QUE NUNCA COMPRARAM*\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n‚úÖ Todos os membros do grupo j√° fizeram pelo menos uma compra!`);
                            return;
                        }

                        let mensagem = `üö´ *MEMBROS QUE NUNCA COMPRARAM*\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
                        mensagem += `üìä Total: ${nuncaCompraram.length} membros\n\n`;
                        let mentions = [];

                        // Limitar a 50 membros para n√£o sobrecarregar a mensagem
                        const limite = Math.min(nuncaCompraram.length, 50);

                        for (let i = 0; i < limite; i++) {
                            const participantId = nuncaCompraram[i];

                            // Validar ID
                            if (!participantId || participantId.startsWith('SAQUE_BONUS_')) {
                                continue;
                            }

                            try {
                                const contact = await client.getContactById(participantId);
                                const nomeExibicao = contact.name || contact.pushname || 'Membro';

                                // Formatar o ID para men√ß√£o (remover @c.us ou @lid)
                                const mentionId = String(participantId).replace('@c.us', '').replace('@lid', '');

                                mensagem += `${i + 1}. @${mentionId}\n`;

                                mentions.push(participantId);
                            } catch (error) {
                                // Se n√£o conseguir obter o contato, adicionar mesmo assim
                                const mentionId = String(participantId).replace('@c.us', '').replace('@lid', '');
                                mensagem += `${i + 1}. @${mentionId}\n`;
                                mentions.push(participantId);
                            }
                        }

                        if (nuncaCompraram.length > limite) {
                            mensagem += `\n... e mais ${nuncaCompraram.length - limite} membros\n`;
                        }

                        mensagem += `\nüö´ *Total: ${nuncaCompraram.length} membros que nunca compraram*`;

                        // Validar mentions (aceitar @lid e @c.us)
                        const mentionsValidos = mentions.filter(id => {
                            if (!id || typeof id !== 'string') return false;
                            if (id.startsWith('SAQUE_BONUS_')) return false;
                            if (!id.includes('@lid') && !id.includes('@c.us')) return false;
                            return true;
                        });

                        console.log(`üö´ Inativos: ${nuncaCompraram.length} membros, ${mentionsValidos.length} mentions v√°lidos`);

                        await client.sendMessage(message.from, mensagem, { mentions: mentionsValidos });
                        return;
                    } catch (error) {
                        console.error('‚ùå Erro ao obter inativos:', error);
                        await message.reply(`‚ùå *ERRO*\n\nN√£o foi poss√≠vel obter a lista de inativos.\n\n‚ö†Ô∏è Erro: ${error.message}`);
                        return;
                    }
                }

                // .detetives - Mostrar membros que NUNCA mandaram mensagem no grupo
                if (comando === '.detetives') {
                    try {
                        // Obter todos os participantes do grupo
                        const chat = await message.getChat();
                        const participantes = chat.participants || [];

                        console.log(`üë• Total de participantes no grupo: ${participantes.length}`);

                        // REMOVIDO: Sistema de registro de mensagens (movido para outro bot)

                        // Filtrar participantes que nunca mandaram mensagem
                        // NOTA: Agora retorna todos os participantes (sem filtro de mensagens)
                        const nuncaMandaram = [];

                        // REMOVIDO: Verifica√ß√£o de registro de mensagens
                        // Comando .espioes agora est√° desabilitado (sistema movido para outro bot)

                        await message.reply(`‚ö†Ô∏è *COMANDO DESABILITADO*\n\nO sistema de registro de mensagens foi movido para outro bot.\nUse o bot de monitoramento para esta funcionalidade.`);
                        return;

                        console.log(`üïµÔ∏è Membros que nunca mandaram mensagem: ${nuncaMandaram.length}`);

                        if (nuncaMandaram.length === 0) {
                            await message.reply(`üéâ *MEMBROS ESPI√ïES*\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n‚úÖ N√£o h√° espi√µes! Todos os membros do grupo j√° mandaram pelo menos uma mensagem!`);
                            return;
                        }

                        let mensagem = `üïµÔ∏è *MEMBROS ESPI√ïES*\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
                        mensagem += `üìä Total: ${nuncaMandaram.length} membros\n\n`;
                        let mentions = [];

                        // Limitar a 50 membros para n√£o sobrecarregar a mensagem
                        const limite = Math.min(nuncaMandaram.length, 50);

                        for (let i = 0; i < limite; i++) {
                            const participanteId = nuncaMandaram[i];

                            // Validar ID
                            if (!participanteId || participanteId.startsWith('SAQUE_BONUS_')) {
                                continue;
                            }

                            try {
                                const contact = await client.getContactById(participanteId);
                                const nomeExibicao = contact.name || contact.pushname || 'Membro';

                                // Formatar o ID para men√ß√£o (remover @c.us ou @lid)
                                const mentionId = String(participanteId).replace('@c.us', '').replace('@lid', '');

                                mensagem += `${i + 1}. @${mentionId}\n`;

                                mentions.push(participanteId);
                            } catch (error) {
                                // Se n√£o conseguir obter o contato, adicionar mesmo assim
                                const mentionId = String(participanteId).replace('@c.us', '').replace('@lid', '');
                                mensagem += `${i + 1}. @${mentionId}\n`;
                                mentions.push(participanteId);
                            }
                        }

                        if (nuncaMandaram.length > limite) {
                            mensagem += `\n... e mais ${nuncaMandaram.length - limite} espi√µes\n`;
                        }

                        mensagem += `\nüïµÔ∏è *Total de espi√µes: ${nuncaMandaram.length}*`;

                        // Validar mentions (aceitar @lid e @c.us)
                        const mentionsValidos = mentions.filter(id => {
                            if (!id || typeof id !== 'string') return false;
                            if (id.startsWith('SAQUE_BONUS_')) return false;
                            if (!id.includes('@lid') && !id.includes('@c.us')) return false;
                            return true;
                        });

                        console.log(`üïµÔ∏è Detetives: ${nuncaMandaram.length} membros, ${mentionsValidos.length} mentions v√°lidos`);

                        await client.sendMessage(message.from, mensagem, { mentions: mentionsValidos });
                        return;
                    } catch (error) {
                        console.error('‚ùå Erro ao obter detetives:', error);
                        await message.reply(`‚ùå *ERRO*\n\nN√£o foi poss√≠vel obter a lista de detetives.\n\n‚ö†Ô∏è Erro: ${error.message}`);
                        return;
                    }
                }

                // .semcompra - Mostrar usu√°rios que nunca compraram
                if (comando === '.semcompra') {
                    try {
                        const semCompra = await sistemaCompras.obterSemCompra();
                        
                        if (semCompra.length === 0) {
                            await message.reply(`üÜï *USU√ÅRIOS SEM COMPRAS*\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n‚ú® Todos os usu√°rios registrados j√° fizeram pelo menos uma compra!`);
                            return;
                        }
                        
                        let mensagem = `üÜï *USU√ÅRIOS SEM COMPRAS*\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
                        mensagem += `üë• Nunca fizeram compras\n\n`;
                        let mentions = [];
                        
                        for (let i = 0; i < Math.min(semCompra.length, 30); i++) {
                            const item = semCompra[i];
                            // COPIAR EXATAMENTE A L√ìGICA DAS BOAS-VINDAS - SEM CONVERS√ÉO
                            const participantId = item.numero; // Usar n√∫mero exatamente como est√° salvo

                            // Obter informa√ß√µes do contato
                            try {
                                const contact = await client.getContactById(participantId);
                                
                                // Prioridade: nome salvo > nome do perfil > n√∫mero
                                const nomeExibicao = contact.name || contact.pushname || item.numero;
                                const numeroLimpo = contact.id.user; // N√∫mero sem @ e sem +
                                
                                mensagem += `üë§ @${participantId.replace('@c.us', '')}\n`;
                                mensagem += `   üìÖ Registrado: ${new Date(item.primeiraCompra).toLocaleDateString('pt-BR')}\n`;
                                mensagem += `   üí∞ Compras: ${item.totalCompras} (${item.megasTotal}MB)\n\n`;
                                
                                mentions.push(participantId);
                            } catch (error) {
                                // Se n√£o conseguir obter o contato, usar apenas o n√∫mero
                                mensagem += `üë§ @${participantId.replace('@c.us', '')}\n`;
                                mensagem += `   üìÖ Registrado: ${new Date(item.primeiraCompra).toLocaleDateString('pt-BR')}\n`;
                                mensagem += `   üí∞ Compras: ${item.totalCompras} (${item.megasTotal}MB)\n\n`;
                                
                                mentions.push(participantId);
                            }
                        }
                        
                        if (semCompra.length > 30) {
                            mensagem += `... e mais ${semCompra.length - 30} usu√°rios sem compras\n\n`;
                        }
                        
                        mensagem += `üÜï *Total sem compras: ${semCompra.length}*\n\n`;
                        mensagem += `üí° *Dica:* Considere campanhas de incentivo para estes usu√°rios!`;
                        
                        await client.sendMessage(message.from, mensagem, { mentions: mentions });
                        return;
                    } catch (error) {
                        console.error('‚ùå Erro ao obter sem compra:', error);
                        await message.reply(`‚ùå *ERRO*\n\nN√£o foi poss√≠vel obter a lista de usu√°rios sem compras.\n\n‚ö†Ô∏è Erro: ${error.message}`);
                        return;
                    }
                }

                // .resetranking - Comando removido (ranking di√°rio/semanal desabilitado)
                if (comando === '.resetranking') {
                    await message.reply(`‚ùå *COMANDO DESABILITADO*\n\nO sistema de ranking di√°rio/semanal foi removido.\nApenas o ranking geral est√° ativo.`);
                    return;
                }

                // .mapear LID NUMERO - Mapear manualmente LID para n√∫mero real
                if (comando.startsWith('.mapear ')) {
                    const partes = message.body.trim().split(' ');
                    if (partes.length !== 3) {
                        await message.reply(`‚ùå *USO INCORRETO*\n\n‚úÖ **Formato:**\n*.mapear LID_CODE NUMERO*\n\nüìù **Exemplo:**\n*.mapear 76991768342659@lid 258870818180@c.us*\n\nüí° **Dica:** Use este comando quando souber que um LID espec√≠fico corresponde a um n√∫mero real.`);
                        return;
                    }

                    const [, lidCode, numeroReal] = partes;

                    // Validar formatos
                    if (!lidCode.endsWith('@lid')) {
                        await message.reply(`‚ùå *LID INV√ÅLIDO*\n\nO LID deve terminar com '@lid'\n\nüìù **Exemplo:** 76991768342659@lid`);
                        return;
                    }

                    if (!numeroReal.endsWith('@c.us')) {
                        await message.reply(`‚ùå *N√öMERO INV√ÅLIDO*\n\nO n√∫mero deve terminar com '@c.us'\n\nüìù **Exemplo:** 258870818180@c.us`);
                        return;
                    }

                    const sucesso = await adicionarMapeamento(lidCode, numeroReal);
                    if (sucesso) {
                        await message.reply(`‚úÖ *MAPEAMENTO ADICIONADO*\n\nüîó ${lidCode}\n‚Üì\nüì± ${numeroReal}\n\nüíæ Salvo no arquivo de mapeamentos.`);
                    } else {
                        await message.reply(`‚ö†Ô∏è *MAPEAMENTO J√Å EXISTE*\n\nEste LID j√° est√° mapeado para:\nüì± ${MAPEAMENTO_IDS[lidCode] || 'Desconhecido'}`);
                    }
                    return;
                }

                // .mapeamentos - Listar todos os mapeamentos conhecidos
                if (comando === '.mapeamentos') {
                    let mensagem = `üìã *MAPEAMENTOS LID CONHECIDOS*\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;

                    const mapeamentosValidos = Object.entries(MAPEAMENTO_IDS).filter(([lid, numero]) => numero && numero !== null);

                    if (mapeamentosValidos.length === 0) {
                        mensagem += `‚ùå Nenhum mapeamento encontrado`;
                    } else {
                        mapeamentosValidos.forEach(([lid, numero], index) => {
                            mensagem += `${index + 1}. ${lid}\n   ‚Üí ${numero}\n\n`;
                        });
                        mensagem += `üìä *Total: ${mapeamentosValidos.length} mapeamentos*`;
                    }

                    await message.reply(mensagem);
                    return;
                }

                // .testreferencia - Testar sistema de refer√™ncia autom√°tica (ADMIN APENAS)
                if (comando === '.testreferencia') {
                    if (!isAdmin) {
                        await message.reply('‚ùå Apenas administradores podem usar este comando!');
                        return;
                    }

                    try {
                        await message.reply('üß™ *TESTE DE REFER√äNCIA AUTOM√ÅTICA*\n\nTestando cria√ß√£o de refer√™ncia autom√°tica...');

                        // Simular cria√ß√£o de refer√™ncia autom√°tica usando o admin como convidador e um ID fict√≠cio como convidado
                        const convidadorTest = autorMensagem;
                        const convidadoTest = '258000000000@c.us'; // ID fict√≠cio para teste
                        const grupoTest = message.from;

                        setTimeout(async () => {
                            try {
                                const resultado = await criarReferenciaAutomatica(convidadorTest, convidadoTest, grupoTest);

                                if (resultado) {
                                    await message.reply(
                                        `‚úÖ *TESTE DE REFER√äNCIA - SUCESSO!*\n\n` +
                                        `üéØ **Resultado do teste:**\n` +
                                        `üë§ Convidador: ${await obterNomeContato(convidadorTest)}\n` +
                                        `üë• Convidado: ${convidadoTest.replace('@c.us', '')}\n` +
                                        `üîó C√≥digo gerado: ${resultado.codigo}\n` +
                                        `ü§ñ Sistema: ${resultado.automatico ? 'Autom√°tico' : 'Manual'}\n\n` +
                                        `üìã **Status:**\n` +
                                        `‚úÖ Refer√™ncia criada com sucesso\n` +
                                        `‚úÖ Notifica√ß√£o enviada\n` +
                                        `‚úÖ Dados salvos\n\n` +
                                        `üí° *Sistema de refer√™ncia autom√°tica est√° funcionando!*`
                                    );
                                } else {
                                    await message.reply(
                                        `‚ùå *TESTE DE REFER√äNCIA - FALHOU!*\n\n` +
                                        `‚ö†Ô∏è A cria√ß√£o de refer√™ncia autom√°tica falhou.\n` +
                                        `üìù Verifique os logs para mais detalhes.`
                                    );
                                }
                            } catch (error) {
                                await message.reply(
                                    `‚ùå *ERRO NO TESTE DE REFER√äNCIA*\n\n` +
                                    `üö® Erro: ${error.message}\n\n` +
                                    `üìù Verifique a implementa√ß√£o da fun√ß√£o criarReferenciaAutomatica`
                                );
                            }
                        }, 1000);

                    } catch (error) {
                        console.error('‚ùå Erro no comando .testreferencia:', error);
                        await message.reply(`‚ùå *ERRO*\n\nN√£o foi poss√≠vel executar o teste\n\nüìù Erro: ${error.message}`);
                    }
                    return;
                }
                
                // .bonus NUMERO QUANTIDADE - Dar b√¥nus manual (ADMIN APENAS)
                if (comando.startsWith('.bonus ')) {
                    try {
                        console.log(`\nüéÅ === COMANDO .BONUS DETECTADO ===`);
                        console.log(`üîç Autor: ${autorMensagem}`);
                        console.log(`üìù Comando completo: "${comando}"`);

                        // Verificar permiss√£o de admin
                        const admins = ['258861645968', '258123456789', '258852118624', '23450974470333', '251032533737504', '203109674577958']; // Lista de admins
                        const numeroAdmin = autorMensagem.replace('@c.us', '').replace('@lid', '');
                        console.log(`üîë N√∫mero admin processado: ${numeroAdmin}`);
                        console.log(`üìã Admins permitidos: ${admins.join(', ')}`);

                        if (!admins.includes(numeroAdmin)) {
                            console.log(`‚ùå Admin N√ÉO autorizado`);
                            return; // Falha silenciosa para seguran√ßa
                        }

                        console.log(`‚úÖ Admin AUTORIZADO`);

                        const parametros = comando.split(' ');
                        console.log(`üìä Par√¢metros: ${JSON.stringify(parametros)}`);

                        if (parametros.length < 3) {
                            console.log(`‚ùå Par√¢metros insuficientes (${parametros.length})`);
                            await message.reply(`‚ùå *FORMATO INCORRETO*\n\n‚úÖ Use: *.bonus @usuario QUANTIDADE* ou *.bonus NUMERO QUANTIDADE*\nExemplos:\n‚Ä¢ *.bonus @258123456789 500MB*\n‚Ä¢ *.bonus 258123456789 500MB*`);
                            return;
                        }

                        let numeroDestino = parametros[1];
                        const quantidadeStr = parametros[2].toUpperCase();
                        console.log(`üì± N√∫mero destino: ${numeroDestino}`);
                        console.log(`üíé Quantidade: ${quantidadeStr}`);

                        // USAR O MESMO PADR√ÉO DO SISTEMA DE COMPRAS
                        // O sistema de compras usa: message.author (ID que vem direto do WhatsApp)
                        // Para b√¥nus admin, usamos: mentionedIds[0] (ID da pessoa mencionada)
                        let idParaSalvar = null;

                        // Verificar se √© men√ß√£o ou n√∫mero direto
                        if (numeroDestino.startsWith('@')) {
                            console.log(`üîç Detectada men√ß√£o (@)`);
                            if (message.mentionedIds && message.mentionedIds.length > 0) {
                                const mencaoId = message.mentionedIds[0];
                                console.log(`üì± ID da men√ß√£o inicial: ${mencaoId}`);

                                // BUSCAR O PARTICIPANTE REAL NO GRUPO
                                try {
                                    const chat = await message.getChat();
                                    if (chat.isGroup && chat.participants) {
                                        console.log(`üîç Buscando participante real no grupo (${chat.participants.length} participantes)...`);

                                        // Extrair √∫ltimos 9 d√≠gitos do n√∫mero mencionado
                                        const numeroMencionado = mencaoId.replace('@c.us', '').replace('@lid', '');
                                        const ultimos9 = numeroMencionado.slice(-9);
                                        console.log(`üîç Buscando por √∫ltimos 9 d√≠gitos: ${ultimos9}`);

                                        // Buscar TODOS os participantes que correspondem (pode haver @c.us E @lid)
                                        const participantesEncontrados = [];
                                        chat.participants.forEach(p => {
                                            const pNumero = p.id._serialized.replace('@c.us', '').replace('@lid', '');
                                            const pUltimos9 = pNumero.slice(-9);
                                            if (pUltimos9 === ultimos9 && ultimos9.length === 9) {
                                                participantesEncontrados.push(p.id._serialized);
                                            }
                                        });

                                        console.log(`üìã Participantes encontrados (${participantesEncontrados.length}): ${participantesEncontrados.join(', ')}`);

                                        if (participantesEncontrados.length > 0) {
                                            // Priorizar @lid sobre @c.us (ID real do WhatsApp)
                                            const idLid = participantesEncontrados.find(id => id.includes('@lid'));
                                            idParaSalvar = idLid || participantesEncontrados[0];
                                            console.log(`‚úÖ USANDO ID: ${idParaSalvar} ${idLid ? '(@lid priorit√°rio)' : ''}`);
                                        } else {
                                            idParaSalvar = mencaoId;
                                            console.log(`‚ö†Ô∏è Participante n√£o encontrado, usando ID da men√ß√£o: ${idParaSalvar}`);
                                        }
                                    } else {
                                        idParaSalvar = mencaoId;
                                        console.log(`‚ö†Ô∏è N√£o √© grupo, usando ID da men√ß√£o: ${idParaSalvar}`);
                                    }
                                } catch (error) {
                                    console.error(`‚ùå Erro ao buscar participante:`, error);
                                    idParaSalvar = mencaoId;
                                    console.log(`‚ö†Ô∏è Usando ID da men√ß√£o por erro: ${idParaSalvar}`);
                                }

                                // Extrair n√∫mero para exibi√ß√£o
                                numeroDestino = idParaSalvar.replace('@c.us', '').replace('@lid', '');
                                console.log(`üì± N√∫mero extra√≠do para exibi√ß√£o: ${numeroDestino}`);
                            } else {
                                console.log(`‚ö†Ô∏è Nenhuma men√ß√£o encontrada, usando n√∫mero ap√≥s @`);
                                const numeroMencao = numeroDestino.substring(1);
                                numeroDestino = numeroMencao;
                            }
                        }

                        // Se n√£o veio de men√ß√£o, validar o n√∫mero
                        if (!idParaSalvar) {
                            console.log(`üîé Validando n√∫mero: "${numeroDestino}"`);
                            console.log(`   - Tem 9 d√≠gitos? ${/^\d{9}$/.test(numeroDestino)}`);
                            console.log(`   - Tem 12 d√≠gitos? ${/^\d{12}$/.test(numeroDestino)}`);
                            console.log(`   - √â ID @lid? ${/^\d+$/.test(numeroDestino)}`);

                            // Validar n√∫mero - aceitar 9 d√≠gitos, 12 d√≠gitos ou IDs @lid (15 d√≠gitos)
                            if (!/^\d{9,15}$/.test(numeroDestino)) {
                                console.log(`‚ùå N√∫mero INV√ÅLIDO: ${numeroDestino}`);
                                await message.reply(`‚ùå *N√öMERO INV√ÅLIDO*\n\n‚úÖ Use formato:\n‚Ä¢ *.bonus @usuario 500MB* (com men√ß√£o)\n‚Ä¢ *.bonus @848715208 500MB* (9 d√≠gitos)\n‚Ä¢ *.bonus @258848715208 500MB* (12 d√≠gitos)\n‚Ä¢ *.bonus 848715208 500MB* (n√∫mero direto)`);
                                return;
                            }

                            console.log(`‚úÖ N√∫mero v√°lido (${numeroDestino.length} d√≠gitos)`);

                            // Converter para formato completo se necess√°rio (apenas para n√∫meros de 9 d√≠gitos)
                            if (numeroDestino.length === 9) {
                                numeroDestino = '258' + numeroDestino;
                                console.log(`üîÑ Convertido para 12 d√≠gitos: ${numeroDestino}`);
                            }

                            // Criar ID @c.us para n√∫meros digitados
                            idParaSalvar = `${numeroDestino}@c.us`;
                        }

                        // Converter quantidade para MB
                        let quantidadeMB;
                        if (quantidadeStr.endsWith('GB')) {
                            const gb = parseFloat(quantidadeStr.replace('GB', ''));
                            console.log(`üíé Convertendo GB: ${gb}GB = ${gb * 1024}MB`);
                            if (isNaN(gb) || gb <= 0) {
                                console.log(`‚ùå GB inv√°lido: ${quantidadeStr}`);
                                await message.reply(`‚ùå Quantidade inv√°lida: *${quantidadeStr}*`);
                                return;
                            }
                            quantidadeMB = Math.round(gb * 1024);
                        } else if (quantidadeStr.endsWith('MB')) {
                            quantidadeMB = parseInt(quantidadeStr.replace('MB', ''));
                            console.log(`üíé Usando MB diretamente: ${quantidadeMB}MB`);
                            if (isNaN(quantidadeMB) || quantidadeMB <= 0) {
                                console.log(`‚ùå MB inv√°lido: ${quantidadeStr}`);
                                await message.reply(`‚ùå Quantidade inv√°lida: *${quantidadeStr}*`);
                                return;
                            }
                        } else {
                            console.log(`‚ùå Formato desconhecido: ${quantidadeStr}`);
                            await message.reply(`‚ùå *FORMATO INV√ÅLIDO*\n\n‚úÖ Use: MB ou GB\nExemplos: 500MB, 1.5GB, 2GB`);
                            return;
                        }

                        console.log(`‚úÖ Quantidade final: ${quantidadeMB}MB`);
                        console.log(`üéØ ID para salvar b√¥nus: ${idParaSalvar}`);

                        // Inicializar saldo se necess√°rio (IGUAL ao sistema de b√¥nus de refer√™ncia)
                        if (!bonusSaldos[idParaSalvar]) {
                            console.log(`üÜï Criando novo registro de b√¥nus para ${idParaSalvar}`);
                            bonusSaldos[idParaSalvar] = {
                                saldo: 0,
                                detalhesReferencias: {},
                                historicoSaques: [],
                                totalReferencias: 0,
                                bonusAdmin: []
                            };
                        } else {
                            console.log(`‚úÖ Registro existente encontrado para ${idParaSalvar} (saldo: ${bonusSaldos[idParaSalvar].saldo}MB)`);
                        }

                        // === ADICIONAR B√îNUS USANDO SISTEMABONUS (IGUAL AO SISTEMA DE REFER√äNCIA) ===
                        console.log(`üí∞ Adicionando ${quantidadeMB}MB ao benefici√°rio...`);

                        let saldoAnterior = 0;
                        let novoSaldo = 0;

                        // Usar sistemaBonus se dispon√≠vel (m√©todo robusto)
                        if (sistemaBonus) {
                            console.log(`‚úÖ Usando SistemaBonus (m√©todo robusto)`);

                            await sistemaBonus.atualizarSaldo(idParaSalvar, (saldoObj) => {
                                saldoAnterior = saldoObj.saldo;
                                saldoObj.saldo += quantidadeMB;

                                // Registrar hist√≥rico de b√¥nus admin
                                if (!saldoObj.bonusAdmin) {
                                    saldoObj.bonusAdmin = [];
                                }

                                saldoObj.bonusAdmin.push({
                                    quantidade: quantidadeMB,
                                    data: new Date().toISOString(),
                                    admin: autorMensagem,
                                    motivo: 'B√¥nus administrativo'
                                });

                                novoSaldo = saldoObj.saldo;
                            });

                            console.log(`üí∞ Saldo atualizado: ${saldoAnterior}MB ‚Üí ${novoSaldo}MB (+${quantidadeMB}MB)`);
                            console.log(`‚úÖ Dados salvos automaticamente pelo SistemaBonus`);

                        } else {
                            // Fallback para m√©todo antigo
                            console.log(`‚ö†Ô∏è SistemaBonus n√£o dispon√≠vel, usando m√©todo antigo`);

                            saldoAnterior = bonusSaldos[idParaSalvar].saldo;
                            bonusSaldos[idParaSalvar].saldo += quantidadeMB;

                            // Registrar hist√≥rico de b√¥nus admin
                            if (!bonusSaldos[idParaSalvar].bonusAdmin) {
                                bonusSaldos[idParaSalvar].bonusAdmin = [];
                            }

                            bonusSaldos[idParaSalvar].bonusAdmin.push({
                                quantidade: quantidadeMB,
                                data: new Date().toISOString(),
                                admin: autorMensagem,
                                motivo: 'B√¥nus administrativo'
                            });

                            novoSaldo = bonusSaldos[idParaSalvar].saldo;

                            console.log(`üí∞ Saldo atualizado: ${saldoAnterior}MB ‚Üí ${novoSaldo}MB (+${quantidadeMB}MB)`);

                            // Salvar dados IMEDIATAMENTE
                            console.log(`üíæ Salvando dados de b√¥nus imediatamente...`);
                            try {
                                await salvarDadosReferencia();
                                console.log(`‚úÖ Dados de b√¥nus salvos com sucesso!`);
                            } catch (erroSalvamento) {
                                console.error(`‚ùå ERRO CR√çTICO ao salvar b√¥nus:`, erroSalvamento);
                            }
                        }

                        const quantidadeFormatada = quantidadeMB >= 1024 ? `${(quantidadeMB/1024).toFixed(2)}GB` : `${quantidadeMB}MB`;
                        const novoSaldoFormatado = novoSaldo >= 1024 ? `${(novoSaldo/1024).toFixed(2)}GB` : `${novoSaldo}MB`;

                        console.log(`üéÅ ADMIN BONUS CONCEDIDO: ${autorMensagem} ‚Üí ${numeroDestino} (+${quantidadeFormatada})`);

                        // Notificar o usu√°rio que recebeu o b√¥nus (USANDO EXATAMENTE O PADR√ÉO DAS CONFIRMA√á√ïES DE COMPRA)
                        const mensagemBonus = `üéÅ *B√îNUS ADMINISTRATIVO!*\n\n` +
                            `üíé @NOME_PLACEHOLDER, recebeste *${quantidadeFormatada}* de b√¥nus!\n\n` +
                            `üë®‚Äçüíº *Ofertado por:* Administrador\n` +
                            `üí∞ *Novo saldo:* ${novoSaldoFormatado}\n\n` +
                            `${novoSaldo >= 1024 ? 'üöÄ *J√° podes sacar!* Use: *.sacar*' : 'üí° *Continua a acumular para sacar!*'}`;

                        try {
                            // SEGUIR PADR√ÉO DO RANKING (linha 3635-3657)
                            const mentionId = String(idParaSalvar).replace('@c.us', '').replace('@lid', '');

                            // Mensagem usa @mentionId (apenas o n√∫mero)
                            const mensagemFinal = mensagemBonus.replace('@NOME_PLACEHOLDER', `@${mentionId}`);

                            // Array mentions recebe o ID completo (com @c.us ou @lid)
                            await client.sendMessage(message.from, mensagemFinal, {
                                mentions: [idParaSalvar]
                            });
                        } catch (notificationError) {
                            console.error('‚ùå Erro ao enviar notifica√ß√£o de b√¥nus admin:', notificationError);
                            // Fallback: enviar sem men√ß√£o
                            const mentionId = numeroDestino;
                            const mensagemFallback = mensagemBonus.replace('@NOME_PLACEHOLDER', mentionId);
                            await message.reply(mensagemFallback);
                        }

                        await message.reply(
                            `‚úÖ *B√îNUS ADMINISTRATIVO CONCEDIDO*\n\n` +
                            `üë§ Benefici√°rio: ${numeroDestino}\n` +
                            `üéÅ B√¥nus concedido: ${quantidadeFormatada}\n` +
                            `üí∞ Novo saldo: ${novoSaldoFormatado}\n` +
                            `üëë Concedido por: Administrador\n` +
                            `üìÖ Data: ${new Date().toLocaleString('pt-BR')}\n\n` +
                            `üí° *O usu√°rio foi notificado automaticamente*`
                        );
                        
                        return;
                    } catch (error) {
                        console.error('‚ùå Erro no comando .bonus:', error);
                        await message.reply(`‚ùå *ERRO INTERNO*\n\n‚ö†Ô∏è N√£o foi poss√≠vel conceder b√¥nus\n\nüìù Erro: ${error.message}`);
                        return;
                    }
                }

                // === COMANDOS DE RELAT√ìRIOS ANTIGOS (DESATIVADOS - USAR NOVOS ABAIXO) ===

                // COMANDOS ANTIGOS REMOVIDOS - Usar novos comandos mais abaixo (linha ~4405+)
                // Os novos comandos suportam:
                // - Pre√ßo de revenda personalizado por grupo (16-18 MT/GB)
                // - C√°lculo autom√°tico de lucro
                // - Configura√ß√£o mais simples (sem precisar do GRUPO_ID)
            }

            // === COMANDOS GOOGLE SHEETS ===
            if (comando === '.test_sheets') {
                console.log(`üß™ Testando Google Sheets...`);
                
                const resultado = await enviarParaGoogleSheets('TEST123', '99', '842223344', 'test_group', 'Teste Admin', 'TestUser');
                
                if (resultado.sucesso) {
                    await message.reply(`‚úÖ *Google Sheets funcionando!*\n\nüìä URL: ${GOOGLE_SHEETS_CONFIG.scriptUrl}\nüìù Row: ${resultado.row}\nüéâ Dados enviados com sucesso!`);
                } else {
                    await message.reply(`‚ùå *Google Sheets com problema!*\n\nüìä URL: ${GOOGLE_SHEETS_CONFIG.scriptUrl}\n‚ö†Ô∏è Erro: ${resultado.erro}\n\nüîß *Verifique:*\n‚Ä¢ Script publicado corretamente\n‚Ä¢ Permiss√µes do Google Sheets\n‚Ä¢ Internet funcionando`);
                }
                return;
            }

            if (comando === '.test_vision') {
                const visionStatus = ia.googleVisionEnabled;
                let resposta = `üîç *TESTE GOOGLE VISION*\n‚ö† NB: V√°lido apenas para Vodacom‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;
                
                if (visionStatus) {
                    resposta += `‚úÖ **Google Vision: ATIVO**\n`;
                    resposta += `üîß **Configura√ß√£o:**\n`;
                    resposta += `   ‚Ä¢ Timeout: ${ia.googleVisionTimeout}ms\n`;
                    resposta += `   ‚Ä¢ Fallback: GPT-4 Vision\n\n`;
                    resposta += `üìù **Para testar:**\n`;
                    resposta += `1. Envie uma imagem de comprovante\n`;
                    resposta += `2. Verifique nos logs qual m√©todo foi usado\n`;
                    resposta += `3. Google Vision ser√° tentado primeiro\n`;
                    resposta += `4. GPT-4 Vision como fallback\n\n`;
                    resposta += `üìä **Vantagens do m√©todo h√≠brido:**\n`;
                    resposta += `   ‚úÖ Maior precis√£o OCR\n`;
                    resposta += `   ‚úÖ Menor custo\n`;
                    resposta += `   ‚úÖ Mais r√°pido\n`;
                    resposta += `   ‚úÖ Sistema redundante`;
                } else {
                    resposta += `‚ùå **Google Vision: DESABILITADO**\n\n`;
                    resposta += `üîß **Para ativar:**\n`;
                    resposta += `1. Configure GOOGLE_APPLICATION_CREDENTIALS no .env\n`;
                    resposta += `2. Ou configure GOOGLE_VISION_API_KEY\n`;
                    resposta += `3. Defina GOOGLE_VISION_ENABLED=true\n\n`;
                    resposta += `üß† **Atualmente usando:**\n`;
                    resposta += `   ‚Ä¢ GPT-4 Vision apenas\n`;
                    resposta += `   ‚Ä¢ Funciona normalmente\n`;
                    resposta += `   ‚Ä¢ Sem redund√¢ncia`;
                }
                
                await message.reply(resposta);
                return;
            }

            // === COMANDO PARA ADICIONAR COMANDOS CUSTOMIZADOS ===
            if (message.body.startsWith('.addcomando ')) {
                const comandoParsado = parsearComandoCustomizado(message.body);
                
                if (!comandoParsado) {
                    await message.reply(`‚ùå *Sintaxe incorreta!*\n\n‚úÖ *Sintaxe correta:*\n\`.addcomando NomeComando(Sua resposta aqui)\`\n\nüìù *Exemplo:*\n\`.addcomando horario(Funcionamos de 8h √†s 18h)\`\n\n‚ö†Ô∏è *Importante:*\n‚Ä¢ Nome sem espa√ßos\n‚Ä¢ Resposta entre par√™nteses\n‚Ä¢ Pode usar quebras de linha`);
                    return;
                }
                
                try {
                    await adicionarComandoCustomizado(
                        message.from,
                        comandoParsado.nome,
                        comandoParsado.resposta,
                        message.author || message.from
                    );
                    
                    await message.reply(`‚úÖ *Comando criado com sucesso!*\n\nüîß **Comando:** \`${comandoParsado.nome}\`\nüìù **Resposta:** ${comandoParsado.resposta.substring(0, 100)}${comandoParsado.resposta.length > 100 ? '...' : ''}\n\nüí° **Para usar:** Digite apenas \`${comandoParsado.nome}\``);
                    console.log(`‚úÖ Admin ${message.author || message.from} criou comando '${comandoParsado.nome}' no grupo ${message.from}`);
                } catch (error) {
                    await message.reply(`‚ùå **Erro ao criar comando**\n\nTente novamente ou contacte o desenvolvedor.`);
                    console.error('‚ùå Erro ao adicionar comando customizado:', error);
                }
                return;
            }

            // === COMANDO PARA LISTAR COMANDOS CUSTOMIZADOS ===
            if (comando === '.comandos') {
                const grupoId = message.from;
                const comandosGrupo = comandosCustomizados[grupoId];
                
                if (!comandosGrupo || Object.keys(comandosGrupo).length === 0) {
                    await message.reply('üìã *Nenhum comando customizado criado ainda*\n\nüí° **Para criar:** `.addcomando nome(resposta)`');
                    return;
                }
                
                let listaComandos = 'üìã *COMANDOS CUSTOMIZADOS*\n‚ö† NB: V√°lido apenas para Vodacom‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n';
                
                Object.keys(comandosGrupo).forEach(nome => {
                    const cmd = comandosGrupo[nome];
                    const preview = cmd.resposta.length > 50 ? 
                        cmd.resposta.substring(0, 50) + '...' : 
                        cmd.resposta;
                    
                    listaComandos += `üîß **${nome}**\nüìù ${preview}\n\n`;
                });
                
                listaComandos += `üìä **Total:** ${Object.keys(comandosGrupo).length} comando(s)`;
                
                await message.reply(listaComandos);
                return;
            }

            // === COMANDO PARA REMOVER COMANDOS CUSTOMIZADOS ===
            if (message.body.startsWith('.delcomando ')) {
                const nomeComando = message.body.replace('.delcomando ', '').trim().toLowerCase();
                
                if (!nomeComando) {
                    await message.reply(`‚ùå *Nome do comando √© obrigat√≥rio!*\n\n‚úÖ *Sintaxe:* \`.delcomando nomecomando\`\n\nüìù *Para ver comandos:* \`.comandos\``);
                    return;
                }
                
                try {
                    const removido = await removerComandoCustomizado(message.from, nomeComando);
                    
                    if (removido) {
                        await message.reply(`‚úÖ *Comando removido!*\n\nüóëÔ∏è **Comando:** \`${nomeComando}\`\n\nüìù **Para ver restantes:** \`.comandos\``);
                        console.log(`‚úÖ Admin ${message.author || message.from} removeu comando '${nomeComando}' do grupo ${message.from}`);
                    } else {
                        await message.reply(`‚ùå *Comando n√£o encontrado!*\n\nüîç **Comando:** \`${nomeComando}\`\nüìù **Ver comandos:** \`.comandos\``);
                    }
                } catch (error) {
                    await message.reply(`‚ùå **Erro ao remover comando**\n\nTente novamente ou contacte o desenvolvedor.`);
                    console.error('‚ùå Erro ao remover comando customizado:', error);
                }
                return;
            }

            // === COMANDO PARA CONFIGURAR N√öMERO DE RELAT√ìRIO ===
            if (message.body.startsWith('.config-relatorio ')) {
                console.log(`\n======= DEBUG CONFIG-RELATORIO =======`);
                console.log(`üì• Mensagem completa: "${message.body}"`);

                const textoSemComando = message.body.replace('.config-relatorio ', '');
                console.log(`üìù Texto sem comando: "${textoSemComando}"`);

                const args = textoSemComando.trim().split(/\s+/);
                console.log(`üìã Args array:`, args);
                console.log(`üìã Args[0]: "${args[0]}" (type: ${typeof args[0]})`);
                console.log(`üìã Args[1]: "${args[1]}" (type: ${typeof args[1]})`);

                const numeroInput = args[0];
                const precoRevenda = args[1] ? parseFloat(args[1]) : 16;

                console.log(`\nüîç VALIDA√á√ïES:`);
                console.log(`  numeroInput = "${numeroInput}"`);
                console.log(`  length = ${numeroInput ? numeroInput.length : 0}`);
                console.log(`  precoRevenda = ${precoRevenda}`);
                console.log(`  startsWith('258') = ${numeroInput ? numeroInput.startsWith('258') : false}`);

                // Validar formato do n√∫mero (deve come√ßar com 258 e ter 12 d√≠gitos)
                const numeroLimpo = numeroInput ? numeroInput.trim() : '';
                const apenasDigitos = /^\d+$/.test(numeroLimpo);

                console.log(`  numeroLimpo = "${numeroLimpo}"`);
                console.log(`  apenasDigitos = ${apenasDigitos}`);
                console.log(`  numeroLimpo.length = ${numeroLimpo.length}`);
                console.log(`  numeroLimpo.startsWith('258') = ${numeroLimpo.startsWith('258')}`);

                console.log(`\n‚úÖ CHECKS:`);
                console.log(`  !numeroLimpo = ${!numeroLimpo}`);
                console.log(`  !numeroLimpo.startsWith('258') = ${!numeroLimpo.startsWith('258')}`);
                console.log(`  numeroLimpo.length !== 12 = ${numeroLimpo.length !== 12}`);
                console.log(`  !apenasDigitos = ${!apenasDigitos}`);
                console.log(`======================================\n`);

                if (!numeroLimpo || !numeroLimpo.startsWith('258') || numeroLimpo.length !== 12 || !apenasDigitos) {
                    let motivoErro = [];
                    if (!numeroLimpo) motivoErro.push('n√∫mero vazio');
                    if (numeroLimpo && !numeroLimpo.startsWith('258')) motivoErro.push('n√£o come√ßa com 258');
                    if (numeroLimpo && numeroLimpo.length !== 12) motivoErro.push(`tem ${numeroLimpo.length} d√≠gitos (esperado: 12)`);
                    if (numeroLimpo && !apenasDigitos) motivoErro.push('cont√©m caracteres n√£o num√©ricos');

                    await message.reply(`‚ùå *N√∫mero inv√°lido!*\n\nüîç *Motivo:* ${motivoErro.join(', ')}\n\n‚úÖ *Formato correto:* 258XXXXXXXXX PRE√áO\n\nüìù *Exemplos:*\n\`.config-relatorio 258847123456 17\`\n\`.config-relatorio 258852118624 16\`\n\nüìä *Debug info:*\nSeu n√∫mero: "${numeroInput}"\nLength: ${numeroInput ? numeroInput.length : 0}\nApenas d√≠gitos: ${apenasDigitos}`);
                    return;
                }

                // Validar pre√ßo de revenda (16-18 MT/GB)
                if (isNaN(precoRevenda) || precoRevenda < 16 || precoRevenda > 18) {
                    await message.reply(`‚ùå *Pre√ßo inv√°lido!*\n\n‚úÖ O pre√ßo deve estar entre 16 e 18 MT/GB\n\nüìù *Exemplo:* \`.config-relatorio 258847123456 17\`\n\nüìä *Seu pre√ßo:* ${precoRevenda}`);
                    return;
                }

                // Validar se o n√∫mero existe no mapeamento
                if (!global.sistemaRelatorios.validarNumeroNoMapeamento(numeroLimpo, MAPEAMENTO_IDS)) {
                    await message.reply(`‚ùå *N√∫mero n√£o encontrado no mapeamento!*\n\n‚ö†Ô∏è O n√∫mero ${numeroLimpo} n√£o est√° registrado no sistema.\n\nüí° Apenas n√∫meros mapeados podem receber relat√≥rios.`);
                    return;
                }

                try {
                    const chat = await message.getChat();
                    const grupoNome = chat.name || 'Grupo';
                    const grupoId = message.from;

                    await global.sistemaRelatorios.configurarNumeroRelatorio(grupoId, numeroLimpo, grupoNome, precoRevenda);

                    await message.reply(`‚úÖ *Relat√≥rios configurados com sucesso!*\n\nüìä **Grupo:** ${grupoNome}\nüì± **N√∫mero:** ${numeroInput}\n\nüïô Relat√≥rios di√°rios ser√£o enviados √†s 22:00\n\nüí¨ Uma mensagem de confirma√ß√£o com detalhes foi enviada para o n√∫mero configurado.`);

                    console.log(`‚úÖ Admin configurou relat√≥rios do grupo ${grupoNome} para ${numeroInput} - Pre√ßo: ${precoRevenda} MT/GB`);
                } catch (error) {
                    await message.reply(`‚ùå *Erro ao configurar relat√≥rios*\n\nTente novamente ou contacte o desenvolvedor.`);
                    console.error('‚ùå Erro ao configurar relat√≥rios:', error);
                }
                return;
            }

            // === COMANDO PARA LISTAR CONFIGURA√á√ïES DE RELAT√ìRIO ===
            if (comando === '.list-relatorios') {
                const grupoId = message.from;
                const numeroConfigurado = global.sistemaRelatorios.numerosRelatorio[grupoId];

                if (!numeroConfigurado) {
                    await message.reply(`üìã *Relat√≥rios n√£o configurados*\n\n‚ö†Ô∏è Este grupo ainda n√£o tem n√∫mero configurado para receber relat√≥rios.\n\nüí° **Para configurar:**\n\`.config-relatorio 258XXXXXXXXX PRE√áO\`\n\nüìù **Exemplo:**\n\`.config-relatorio 258847123456 17\``);
                    return;
                }

                const chat = await message.getChat();
                const grupoNome = chat.name || 'Grupo';
                const precoRevenda = global.sistemaRelatorios.precosRevenda[grupoId] || 16;
                const lucro = precoRevenda - 12;

                let resposta = `üìä *CONFIGURA√á√ÉO DE RELAT√ìRIOS*\n\n`;
                resposta += `üë• **Grupo:** ${grupoNome}\n`;
                resposta += `üì± **N√∫mero:** ${numeroConfigurado}\n`;
                resposta += `üïô **Hor√°rio:** Di√°rio √†s 22:00\n\n`;
                resposta += `üí∏ **PRE√áOS:**\n`;
                resposta += `‚Ä¢ Compra: 12 MT/GB\n`;
                resposta += `‚Ä¢ Revenda: ${precoRevenda} MT/GB\n`;
                resposta += `‚Ä¢ Lucro: ${lucro} MT/GB\n\n`;
                resposta += `‚úÖ Relat√≥rios ativos`;

                await message.reply(resposta);
                return;
            }

            // === COMANDO PARA REMOVER CONFIGURA√á√ÉO DE RELAT√ìRIO ===
            if (comando === '.remove-relatorio') {
                const grupoId = message.from;
                const numeroConfigurado = global.sistemaRelatorios.numerosRelatorio[grupoId];

                if (!numeroConfigurado) {
                    await message.reply(`‚ùå *Nenhuma configura√ß√£o encontrada*\n\n‚ö†Ô∏è Este grupo n√£o possui relat√≥rios configurados.`);
                    return;
                }

                try {
                    await global.sistemaRelatorios.removerNumeroRelatorio(grupoId);

                    await message.reply(`‚úÖ *Configura√ß√£o removida!*\n\nüì± **N√∫mero removido:** ${numeroConfigurado}\n\n‚ö†Ô∏è Este grupo n√£o receber√° mais relat√≥rios autom√°ticos.`);

                    console.log(`‚úÖ Admin removeu configura√ß√£o de relat√≥rios do grupo ${grupoId}`);
                } catch (error) {
                    await message.reply(`‚ùå *Erro ao remover configura√ß√£o*\n\nTente novamente ou contacte o desenvolvedor.`);
                    console.error('‚ùå Erro ao remover configura√ß√£o de relat√≥rios:', error);
                }
                return;
            }

            // === COMANDO PARA TESTAR RELAT√ìRIO ===
            if (comando === '.test-relatorio') {
                const grupoId = message.from;
                const numeroConfigurado = global.sistemaRelatorios.numerosRelatorio[grupoId];

                if (!numeroConfigurado) {
                    await message.reply(`‚ùå *Relat√≥rios n√£o configurados*\n\n‚ö†Ô∏è Configure primeiro usando:\n\`.config-relatorio 258XXXXXXXXX\``);
                    return;
                }

                try {
                    await message.reply(`üß™ *Gerando relat√≥rio de teste...*\n\n‚è≥ Aguarde alguns segundos...`);

                    const chat = await message.getChat();
                    const grupoNome = chat.name || 'Grupo';

                    await global.sistemaRelatorios.gerarRelatorioGrupo(grupoId, grupoNome);

                    await message.reply(`‚úÖ *Relat√≥rio enviado!*\n\nüì± Verifique o n√∫mero ${numeroConfigurado}`);

                    console.log(`‚úÖ Admin solicitou teste de relat√≥rio para grupo ${grupoNome}`);
                } catch (error) {
                    await message.reply(`‚ùå *Erro ao gerar relat√≥rio*\n\n${error.message}`);
                    console.error('‚ùå Erro ao gerar relat√≥rio de teste:', error);
                }
                return;
            }

            if (comando === '.test_grupo') {
                const grupoAtual = message.from;
                const configGrupo = getConfiguracaoGrupo(grupoAtual);

                if (!configGrupo) {
                    await message.reply('‚ùå Este grupo n√£o est√° configurado!');
                    return;
                }

                console.log(`üß™ Testando Google Sheets para grupo: ${configGrupo.nome}`);
                
                const resultado = await enviarParaGoogleSheets('TEST999', '88', '847777777', grupoAtual, configGrupo.nome, 'TestAdmin');
                
                if (resultado.sucesso) {
                    await message.reply(`‚úÖ *Teste enviado para ${configGrupo.nome}!*\n\nüìä Row: ${resultado.row}\nüîç O celular deste grupo deve processar em at√© 30 segundos.\n\nüì± *Grupo ID:* \`${grupoAtual}\``);
                } else {
                    await message.reply(`‚ùå *Erro no teste:* ${resultado.erro}`);
                }
                return;
            }

            if (comando === '.grupos_status') {
                let resposta = `üìä *STATUS DOS GRUPOS*\n‚ö† NB: V√°lido apenas para Vodacom‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;
                
                for (const [grupoId, config] of Object.entries(CONFIGURACAO_GRUPOS)) {
                    const dadosGrupo = Array.from(cacheTransacoes.values()).filter(d => d.grupo_id === grupoId);
                    const hoje = dadosGrupo.filter(d => {
                        const dataItem = new Date(d.timestamp).toDateString();
                        return dataItem === new Date().toDateString();
                    });
                    
                    resposta += `üè¢ *${config.nome}*\n`;
                    resposta += `   üìà Total: ${dadosGrupo.length}\n`;
                    resposta += `   üìÖ Hoje: ${hoje.length}\n`;
                    resposta += `   üìä Sheets: ${dadosGrupo.filter(d => d.metodo === 'google_sheets').length}\n`;
                    resposta += `   üì± Backup: ${dadosGrupo.filter(d => d.metodo === 'whatsapp_backup').length}\n`;
                    resposta += `   üÜî ID: \`${grupoId}\`\n\n`;
                }
                
                await message.reply(resposta);
                return;
            }

            if (comando === '.sheets') {
                const dados = obterDadosTasker();
                const hoje = obterDadosTaskerHoje();
                const sheets = dados.filter(d => d.metodo === 'google_sheets').length;
                const whatsapp = dados.filter(d => d.metodo === 'whatsapp_backup').length;
                
                let resposta = `üìä *GOOGLE SHEETS STATUS*\n‚ö† NB: V√°lido apenas para Vodacom‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;
                resposta += `üìà Total enviado: ${dados.length}\n`;
                resposta += `üìÖ Hoje: ${hoje.length}\n`;
                resposta += `üìä Via Google Sheets: ${sheets}\n`;
                resposta += `üì± Via WhatsApp: ${whatsapp}\n\n`;
                // REMOVIDO: Fila de encaminhamento (sistema movido para outro bot)
                
                if (dados.length > 0) {
                    resposta += `üìã *√öltimos 5 enviados:*\n`;
                    dados.slice(-5).forEach((item, index) => {
                        const metodo = item.metodo === 'google_sheets' ? 'üìä' : 'üì±';
                        resposta += `${index + 1}. ${metodo} ${item.dados} (${item.grupo})\n`;
                    });
                }
                
                await message.reply(resposta);
                return;
            }

            if (comando.startsWith('.clear_grupo ')) {
                const nomeGrupo = comando.replace('.clear_grupo ', '');
                const antes = cacheTransacoes.size;

                // Remover transa√ß√µes do grupo espec√≠fico
                for (const [key, value] of cacheTransacoes.entries()) {
                    if (value.grupo && value.grupo.toLowerCase().includes(nomeGrupo.toLowerCase())) {
                        cacheTransacoes.delete(key);
                    }
                }

                const removidos = antes - cacheTransacoes.size;
                await message.reply(`üóëÔ∏è *${removidos} registros do grupo "${nomeGrupo}" removidos!*`);
                return;
            }

            if (comando === '.clear_sheets') {
                cacheTransacoes.clear();
                await message.reply('üóëÔ∏è *Cache de transa√ß√µes limpo!*');
                return;
            }

            // === COMANDOS TASKER - SISTEMA DE PACOTES ===
            
            // DEBUG: Verificar status do sistema de pacotes
            if (comando === '.debug_pacotes') {
                let resposta = `üîß *DEBUG SISTEMA PACOTES*\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;
                resposta += `üîå SISTEMA_PACOTES_ENABLED: ${process.env.SISTEMA_PACOTES_ENABLED}\n`;
                resposta += `üì¶ sistemaPacotes: ${sistemaPacotes ? 'INICIALIZADO' : 'NULL'}\n`;
                resposta += `üë§ isAdminQualquer: ${isAdminQualquer}\n`;
                resposta += `üìù Comando original: "${message.body}"\n`;
                resposta += `üÜî Grupo ID: ${message.from}\n`;
                
                if (sistemaPacotes) {
                    resposta += `\n‚úÖ Sistema de Pacotes est√° ATIVO e funcionando!`;
                } else {
                    resposta += `\n‚ùå Sistema de Pacotes est√° DESABILITADO ou falhou ao inicializar!`;
                }
                
                await message.reply(resposta);
                return;
            }
            
            if (comando === '.pacotes_tasker') {
                const dadosPacotes = obterDadosPacotesTasker();
                
                if (dadosPacotes.length === 0) {
                    await message.reply(`üì¶ *DADOS TASKER - PACOTES*\n\n‚ùå Nenhum cliente com pacote ativo para o Tasker.`);
                    return;
                }
                
                let resposta = `üì¶ *DADOS TASKER - PACOTES* (${dadosPacotes.length})\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;
                
                dadosPacotes.forEach((cliente, index) => {
                    const proximaRenovacao = new Date(cliente.proximaRenovacao);
                    resposta += `${index + 1}. **${cliente.numero}**\n`;
                    resposta += `   üìã Ref: ${cliente.referenciaOriginal}\n`;
                    resposta += `   üì¶ Tipo: ${cliente.tipoPacote}\n`;
                    resposta += `   üìÖ Dias restantes: ${cliente.diasRestantes}\n`;
                    resposta += `   ‚è∞ Pr√≥xima: ${proximaRenovacao.toLocaleString('pt-BR')}\n\n`;
                });
                
                resposta += `üí° *O Tasker pode acessar estes dados via fun√ß√£o do bot para processar renova√ß√µes automaticamente.*`;
                
                await message.reply(resposta);
                return;
            }
            
            if (comando === '.renovacoes_tasker') {
                const renovacoesPendentes = obterRenovacoesPendentesTasker();
                
                if (renovacoesPendentes.length === 0) {
                    await message.reply(`üîÑ *RENOVA√á√ïES TASKER*\n\n‚úÖ Nenhuma renova√ß√£o pendente nas pr√≥ximas 6 horas.`);
                    return;
                }
                
                let resposta = `üîÑ *RENOVA√á√ïES TASKER* (${renovacoesPendentes.length})\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;
                
                renovacoesPendentes.forEach((cliente, index) => {
                    const proximaRenovacao = new Date(cliente.proximaRenovacao);
                    
                    resposta += `${index + 1}. **${cliente.numero}**\n`;
                    resposta += `   üìã Ref: ${cliente.referenciaOriginal}\n`;
                    resposta += `   üì¶ Tipo: ${cliente.tipoPacote}\n`;
                    resposta += `   üìÖ Dias restantes: ${cliente.diasRestantes}\n`;
                    resposta += `   ‚è∞ Pr√≥xima renova√ß√£o: ${proximaRenovacao.toLocaleString('pt-BR')}\n\n`;
                });
                
                resposta += `üí° *Hor√°rios j√° calculados com 2h de antecipa√ß√£o em rela√ß√£o ao dia anterior.*`;
                
                await message.reply(resposta);
                return;
            }

            // === COMANDOS DO SISTEMA DE COMPRAS ===
            
            if (comando === '.compras_stats') {
                if (!sistemaCompras) {
                    await message.reply('‚ùå Sistema de compras n√£o est√° ativo!');
                    return;
                }
                
                const estatisticas = await sistemaCompras.obterEstatisticas();
                
                let resposta = `üõí *ESTAT√çSTICAS DE COMPRAS*\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;
                resposta += `üìä Total de compradores: ${estatisticas.totalCompradores}\n`;
                resposta += `üìÖ Compradores hoje: ${estatisticas.compradoresHoje}\n`;
                resposta += `‚è≥ Compras pendentes: ${estatisticas.comprasPendentes}\n`;
                resposta += `üíæ Total de megas hoje: ${estatisticas.totalMegasHoje >= 1024 ? (estatisticas.totalMegasHoje/1024).toFixed(1) + ' GB' : estatisticas.totalMegasHoje + ' MB'}\n\n`;
                
                if (estatisticas.ranking.length > 0) {
                    resposta += `üèÜ *TOP 5 RANKING HOJE:*\n`;
                    estatisticas.ranking.slice(0, 5).forEach((cliente, index) => {
                        const megasFormatados = cliente.megasHoje >= 1024 ? `${(cliente.megasHoje/1024).toFixed(1)} GB` : `${cliente.megasHoje} MB`;
                        resposta += `${index + 1}¬∫ ${cliente.numero} - ${megasFormatados} (${cliente.comprasHoje}x)\n`;
                    });
                }
                
                await message.reply(resposta);
                return;
            }
            
            
            if (comando.startsWith('.comprador ')) {
                if (!sistemaCompras) {
                    await message.reply('‚ùå Sistema de compras n√£o est√° ativo!');
                    return;
                }
                
                const numero = comando.replace('.comprador ', '').trim();
                
                if (!/^\d{9}$/.test(numero)) {
                    await message.reply('‚ùå Use: *.comprador 849123456*');
                    return;
                }
                
                const cliente = sistemaCompras.historicoCompradores[numero];
                
                if (!cliente) {
                    await message.reply(`‚ùå Cliente *${numero}* n√£o encontrado no sistema de compras.`);
                    return;
                }
                
                const posicao = await sistemaCompras.obterPosicaoCliente(numero);
                const megasHojeFormatados = cliente.megasHoje >= 1024 ? `${(cliente.megasHoje/1024).toFixed(1)} GB` : `${cliente.megasHoje} MB`;
                const megasTotalFormatados = cliente.megasTotal >= 1024 ? `${(cliente.megasTotal/1024).toFixed(1)} GB` : `${cliente.megasTotal} MB`;
                
                let resposta = `üë§ *PERFIL DO COMPRADOR*\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;
                resposta += `üì± **N√∫mero:** ${numero}\n`;
                resposta += `üèÜ **Posi√ß√£o hoje:** ${posicao.posicao}¬∫ lugar\n`;
                resposta += `üìä **Hoje:** ${megasHojeFormatados} (${cliente.comprasHoje} compras)\n`;
                resposta += `üíé **Total geral:** ${megasTotalFormatados} (${cliente.totalCompras} compras)\n`;
                resposta += `üìÖ **Primeira compra:** ${new Date(cliente.primeiraCompra).toLocaleDateString('pt-BR')}\n`;
                resposta += `‚è∞ **√öltima compra:** ${new Date(cliente.ultimaCompra).toLocaleDateString('pt-BR')}\n`;
                
                await message.reply(resposta);
                return;
            }

            // === NOVOS COMANDOS PARA DETEC√á√ÉO DE GRUPOS ===
            if (comando === '.grupos') {
                try {
                    let resposta = `üìã *GRUPOS DETECTADOS*\n‚ö† NB: V√°lido apenas para Vodacom‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;
                    
                    const chats = await client.getChats();
                    const grupos = chats.filter(chat => chat.isGroup);
                    
                    resposta += `üìä Total de grupos: ${grupos.length}\n\n`;
                    
                    for (const grupo of grupos) {
                        const isMonitorado = CONFIGURACAO_GRUPOS.hasOwnProperty(grupo.id._serialized);
                        const status = isMonitorado ? '‚úÖ' : '‚ùå';
                        
                        resposta += `${status} *${grupo.name}*\n`;
                        resposta += `   üÜî \`${grupo.id._serialized}\`\n`;
                        resposta += `   üë• ${grupo.participants.length} membros\n\n`;
                    }
                    
                    resposta += `\nüîß *Para adicionar grupo:*\nCopie ID e adicione em CONFIGURACAO_GRUPOS`;
                    
                    await message.reply(resposta);
                    
                    console.log(`\nüìã COMANDO .grupos executado - ${grupos.length} grupos encontrados`);
                    grupos.forEach(grupo => {
                        const isMonitorado = CONFIGURACAO_GRUPOS.hasOwnProperty(grupo.id._serialized);
                        console.log(`${isMonitorado ? '‚úÖ' : '‚ùå'} ${grupo.name}: ${grupo.id._serialized}`);
                    });
                    
                } catch (error) {
                    console.error('‚ùå Erro ao listar grupos:', error);
                    await message.reply('‚ùå Erro ao obter lista de grupos');
                }
                return;
            }

            if (comando === '.grupo_atual') {
                if (!message.from.endsWith('@g.us')) {
                    await message.reply('‚ùå Use este comando em um grupo!');
                    return;
                }
                
                await logGrupoInfo(message.from, 'COMANDO .grupo_atual');
                
                const configGrupo = getConfiguracaoGrupo(message.from);
                const status = configGrupo ? '‚úÖ CONFIGURADO' : '‚ùå N√ÉO CONFIGURADO';
                
                await message.reply(
                    `üìã *INFORMA√á√ïES DESTE GRUPO*\n\n` +
                    `üÜî ID: \`${message.from}\`\n` +
                    `üìä Status: ${status}\n\n` +
                    `${configGrupo ? `üè¢ Nome: ${configGrupo.nome}` : 'üîß Precisa ser configurado'}\n\n` +
                    `üìù Verifique o console para detalhes completos`
                );
                return;
            }
        }

        // === FUN√á√ÉO PARA DETECTAR INTEN√á√ÉO DE .MEUCODIGO ===
        async function detectarIntencaoMeuCodigo(texto) {
            // Primeiro, verifica√ß√£o b√°sica por padr√µes (sem IA - economia)
            const textoLimpo = texto.toLowerCase().trim();

            // Padr√µes mais comuns (com e sem espa√ßos)
            const padroesDiretos = [
                // Vers√µes sem espa√ßo
                'meucodigo',
                'meuc√≥digo',
                '.meucodigo',
                '.meuc√≥digo',

                // Vers√µes com espa√ßo
                'meu codigo',
                'meu c√≥digo',
                '.meu codigo',
                '.meu c√≥digo',

                // Outras varia√ß√µes
                'meu codigo de referencia',
                'meu c√≥digo de refer√™ncia',
                'ver meu codigo',
                'ver meu c√≥digo',
                'qual meu codigo',
                'qual meu c√≥digo',
                'qual o meu codigo',
                'qual o meu c√≥digo',
                'como ver meu codigo',
                'como ver meu c√≥digo',
                'minha referencia',
                'minha refer√™ncia',
                'codigo meu',
                'c√≥digo meu',
                'codigo pessoal',
                'c√≥digo pessoal',
                'meu referencia',
                'meu refer√™ncia'
            ];

            // Verifica√ß√£o direta (mais r√°pido)
            for (const padrao of padroesDiretos) {
                if (textoLimpo.includes(padrao)) {
                    console.log(`üéØ DETECTADO: "${texto}" ‚Üí padr√£o "${padrao}"`);
                    return true;
                }
            }

            // Detec√ß√£o por IA desativada (fun√ß√£o obterResposta n√£o implementada)
            // A detec√ß√£o por padr√µes acima j√° √© suficiente
            return false;
        }

        // === DETEC√á√ÉO INTELIGENTE DE .MEUCODIGO (QUALQUER FORMATO) ===
        if (message.type === 'chat' && await detectarIntencaoMeuCodigo(message.body)) {
            const remetente = message.author || message.from;
            let codigo = null;

            // Verificar se j√° tem c√≥digo (buscar em TODOS os c√≥digos)
            console.log(`üîç Procurando c√≥digo existente para: ${remetente}`);
            for (const [cod, dados] of Object.entries(codigosReferencia)) {
                if (dados.dono === remetente) {
                    codigo = cod;
                    console.log(`‚úÖ C√≥digo existente encontrado: ${codigo}`);
                    break;
                }
            }

            // Se n√£o tem, criar novo
            if (!codigo) {
                console.log(`üìù Criando NOVO c√≥digo para: ${remetente}`);
                codigo = gerarCodigoReferencia(remetente);
                codigosReferencia[codigo] = {
                    dono: remetente,
                    nome: message._data.notifyName || 'N/A',
                    criado: new Date().toISOString(),
                    ativo: true
                };

                // CORRIGIDO: Salvar IMEDIATAMENTE (n√£o agendar) para garantir persist√™ncia
                console.log(`üíæ Salvando c√≥digo ${codigo} IMEDIATAMENTE...`);
                await salvarDadosReferencia();
                console.log(`‚úÖ C√≥digo ${codigo} salvo com sucesso!`);
            }

            await message.reply(
                `üéÅ *SEU C√ìDIGO DE REFER√äNCIA*\n\n` +
                `üìã C√≥digo: *${codigo}*\n\n` +
                `üéØ *Como usar:*\n` +
                `1. Convide amigos para o grupo\n` +
                `2. Pe√ßa para eles digitarem:\n` +
                `   *.convite ${codigo}*\n\n` +
                `üí∞ *Ganhe 200MB* a cada compra deles!\n` +
                `üéâ *Primeiras 5 compras* = 1GB cada\n\n` +
                `üöÄ Sem limite de amigos que pode convidar!`
            );
            console.log(`üéÅ C√≥digo de refer√™ncia enviado: ${codigo} para ${remetente}`);
            return;
        }

        // === COMANDOS DE REFER√äNCIA E B√îNUS (TODOS USU√ÅRIOS) ===
        if (message.type === 'chat' && message.body.startsWith('.')) {
            const comando = message.body.toLowerCase().trim();
            const remetente = message.author || message.from;

            // === OUTROS COMANDOS COM PONTO ===

            // .convite CODIGO - Registrar refer√™ncia
            if (comando.startsWith('.convite ')) {
                const codigo = comando.split(' ')[1]?.toUpperCase();
                
                if (!codigo) {
                    await message.reply('‚ùå Use: *.convite CODIGO*\nExemplo: *.convite AB12CD*');
                    return;
                }
                
                // Verificar se c√≥digo existe
                if (!codigosReferencia[codigo]) {
                    await message.reply(`‚ùå C√≥digo *${codigo}* n√£o encontrado!\n\nüí° Pe√ßa para quem te convidou verificar o c√≥digo com *.meucodigo*`);
                    return;
                }
                
                // Verificar se j√° tem refer√™ncia
                if (referenciasClientes[remetente]) {
                    await message.reply(`‚ö†Ô∏è Voc√™ j√° foi convidado por algu√©m!\n\nN√£o √© poss√≠vel usar outro c√≥digo de refer√™ncia.`);
                    return;
                }
                
                // Verificar se n√£o est√° tentando usar pr√≥prio c√≥digo
                if (codigosReferencia[codigo].dono === remetente) {
                    await message.reply('‚ùå N√£o podes usar teu pr√≥prio c√≥digo de refer√™ncia! üòÖ');
                    return;
                }

                // NOVA VALIDA√á√ÉO: Verificar se √© eleg√≠vel (entrou nos √∫ltimos 5 dias)
                if (!isElegivelParaCodigo(remetente, message.from)) {
                    await message.reply(
                        `‚è≥ *C√ìDIGO EXPIRADO PARA SEU PERFIL*\n\n` +
                        `‚ùå C√≥digos de refer√™ncia s√≥ funcionam para membros que entraram no grupo nos √∫ltimos 5 dias.\n\n` +
                        `ü§î *Por que isso acontece?*\n` +
                        `‚Ä¢ Sistema anti-abuse\n` +
                        `‚Ä¢ Incentiva convites genu√≠nos\n` +
                        `‚Ä¢ Protege economia do grupo\n\n` +
                        `üí° *Solu√ß√£o:* Voc√™ ainda pode gerar seu pr√≥prio c√≥digo com *.meucodigo* e convidar outros!`
                    );
                    return;
                }
                
                // Registrar refer√™ncia
                referenciasClientes[remetente] = {
                    convidadoPor: codigosReferencia[codigo].dono,
                    codigo: codigo,
                    dataRegistro: new Date().toISOString(),
                    comprasRealizadas: 0
                };

                const convidadorId = codigosReferencia[codigo].dono;
                const nomeConvidador = codigosReferencia[codigo].nome;

                // CORRIGIDO: Marcar c√≥digo como usado
                codigosReferencia[codigo].usado = true;
                codigosReferencia[codigo].usadoPor = remetente;
                codigosReferencia[codigo].dataUso = new Date().toISOString();

                // CORRIGIDO: Inicializar saldo de b√¥nus do convidador
                if (!bonusSaldos[convidadorId]) {
                    bonusSaldos[convidadorId] = {
                        saldo: 0,
                        detalhesReferencias: {},
                        historicoSaques: [],
                        totalReferencias: 0
                    };
                }
                bonusSaldos[convidadorId].totalReferencias++;

                // CORRIGIDO: Salvar IMEDIATAMENTE para garantir persist√™ncia
                console.log(`üíæ Salvando uso do c√≥digo ${codigo} IMEDIATAMENTE...`);
                await salvarDadosReferencia();

                // Salvar arquivo de membros se foi atualizado
                try {
                    await fs.writeFile(ARQUIVO_MEMBROS, JSON.stringify(membrosEntrada, null, 2));
                    console.log(`‚úÖ Membros entrada salvos com sucesso!`);
                } catch (error) {
                    console.log('‚ö†Ô∏è Erro ao salvar membros entrada:', error.message);
                }
                
                // CORRIGIDO: Remover @lid e @c.us das men√ß√µes
                const convidadorLimpo = convidadorId.replace('@c.us', '').replace('@lid', '');

                await client.sendMessage(message.from,
                    `‚úÖ *C√ìDIGO APLICADO COM SUCESSO!*\n\n` +
                    `üéâ @${convidadorLimpo} te convidou - registrado!\n\n` +
                    `üíé *Benef√≠cios:*\n` +
                    `‚Ä¢ Nas tuas pr√≥ximas 5 compras, @${convidadorLimpo} ganha 200MB cada\n` +
                    `‚Ä¢ Tu recebes teus megas normalmente\n` +
                    `‚Ä¢ Ajudas um amigo a ganhar b√¥nus!\n\n` +
                    `üöÄ *Pr√≥ximo passo:* Faz tua primeira compra!`, {
                    mentions: [convidadorId]
                });
                return;
            }

            // .bonus - Ver saldo de b√¥nus
            if (comando === '.bonus' || comando === '.saldo') {
                console.log(`üîç Buscando saldo para: ${remetente}`);
                const saldo = await buscarSaldoBonus(remetente);
                
                if (!saldo || saldo.saldo === 0) {
                    await message.reply(
                        `üí∞ *TEU SALDO DE B√îNUS*\n\n` +
                        `üéÅ Total acumulado: *0MB*\n` +
                        `üìä Refer√™ncias ativas: *0 pessoas*\n\n` +
                        `üöÄ *Como ganhar b√¥nus:*\n` +
                        `1. Gera teu c√≥digo com *.meucodigo*\n` +
                        `2. Convida amigos para o grupo\n` +
                        `3. Eles usam *.convite TEUCODIGO*\n` +
                        `4. A cada compra deles, ganhas 200MB\n` +
                        `5. Com 1GB+ podes sacar com *.sacar*`
                    );
                    return;
                }
                
                const saldoGB = (saldo.saldo / 1024).toFixed(2);
                const podeSacar = saldo.saldo >= 1024;
                const referenciasAtivas = Object.keys(saldo.detalhesReferencias || {}).length;
                
                let detalhes = '';
                if (saldo.detalhesReferencias) {
                    Object.entries(saldo.detalhesReferencias).forEach(([cliente, dados]) => {
                        const nome = dados.nome || 'Cliente';
                        detalhes += `‚Ä¢ ${nome}: ${dados.compras}/5 compras (${dados.bonusGanho}MB ganhos)\n`;
                    });
                }
                
                await message.reply(
                    `üí∞ *TEU SALDO DE B√îNUS*\n\n` +
                    `üéÅ Total acumulado: *${saldo.saldo}MB* (${saldoGB}GB)\n` +
                    `üìä Refer√™ncias ativas: *${referenciasAtivas} pessoas*\n` +
                    `üí° M√≠nimo para saque: 1GB (1024MB)\n\n` +
                    `${detalhes ? `üë• *Detalhes das refer√™ncias:*\n${detalhes}\n` : ''}` +
                    `${podeSacar ? 'üöÄ *Pronto para sacar!*\nUse: *.sacar 1GB 845123456*' : '‚è≥ Incentiva teus convidados a comprar!'}`
                );
                return;
            }

            // .sacar QUANTIDADE NUMERO - Solicitar saque
            if (comando.startsWith('.sacar ')) {
                const partes = comando.split(' ');
                if (partes.length < 3) {
                    await message.reply(
                        `‚ùå *FORMATO INCORRETO*\n\n` +
                        `‚úÖ Use: *.sacar QUANTIDADE NUMERO*\n\n` +
                        `üìã *Exemplos:*\n` +
                        `‚Ä¢ *.sacar 1GB 845123456*\n` +
                        `‚Ä¢ *.sacar 2048MB 847654321*\n` +
                        `‚Ä¢ *.sacar 1.5GB 843210987*`
                    );
                    return;
                }
                
                const quantidadeStr = partes[1].toUpperCase();
                const numeroDestino = partes[2];
                
                // Validar n√∫mero
                if (!/^8[0-9]{8}$/.test(numeroDestino)) {
                    await message.reply(`‚ùå N√∫mero inv√°lido: *${numeroDestino}*\n\n‚úÖ Use formato: 8XXXXXXXX`);
                    return;
                }
                
                // Converter quantidade para MB
                let quantidadeMB = 0;
                if (quantidadeStr.endsWith('GB')) {
                    const gb = parseFloat(quantidadeStr.replace('GB', ''));
                    quantidadeMB = gb * 1024;
                } else if (quantidadeStr.endsWith('MB')) {
                    quantidadeMB = parseInt(quantidadeStr.replace('MB', ''));
                } else {
                    await message.reply(`‚ùå Formato inv√°lido: *${quantidadeStr}*\n\n‚úÖ Use: 1GB, 1.5GB, 1024MB, etc.`);
                    return;
                }
                
                // Verificar saldo (buscar em todos os formatos)
                console.log(`üîç Buscando saldo para saque: ${remetente}`);
                const saldo = await buscarSaldoBonus(remetente);
                if (!saldo || saldo.saldo < quantidadeMB) {
                    const saldoAtual = saldo ? saldo.saldo : 0;
                    await message.reply(
                        `‚ùå *SALDO INSUFICIENTE*\n\n` +
                        `üí∞ Teu saldo: ${saldoAtual}MB\n` +
                        `üéØ Solicitado: ${quantidadeMB}MB\n\n` +
                        `üí° Precisas de mais ${quantidadeMB - saldoAtual}MB\n` +
                        `üöÄ Convida mais amigos para ganhar b√¥nus!`
                    );
                    return;
                }
                
                // Verificar m√≠nimo
                if (quantidadeMB < 1024) {
                    await message.reply(`‚ùå Valor m√≠nimo para saque: *1GB (1024MB)*\n\nüéØ Solicitado: ${quantidadeMB}MB`);
                    return;
                }
                
                // === VALIDA√á√ïES ADICIONAIS DE SEGURAN√áA ===

                // Verificar se j√° existe saque pendente deste cliente
                const saquePendente = Object.values(pedidosSaque).find(s =>
                    s.cliente === remetente &&
                    s.status === 'pendente' &&
                    s.numeroDestino === numeroDestino
                );

                if (saquePendente) {
                    await message.reply(
                        `‚ö†Ô∏è *SAQUE PENDENTE DETECTADO*\n\n` +
                        `üîñ Refer√™ncia: *${saquePendente.referencia}*\n` +
                        `üì± N√∫mero: ${saquePendente.numeroDestino}\n` +
                        `üíé Quantidade: ${saquePendente.quantidade}MB\n` +
                        `üìÖ Data: ${new Date(saquePendente.dataSolicitacao).toLocaleString('pt-BR')}\n\n` +
                        `‚è≥ Aguarde o processamento do saque anterior antes de solicitar um novo.\n` +
                        `üìû Prazo: at√© 24h`
                    );
                    return;
                }

                // Verificar limite di√°rio de saques
                const hoje = new Date().toDateString();
                const saquesHoje = Object.values(pedidosSaque).filter(s =>
                    s.cliente === remetente &&
                    new Date(s.dataSolicitacao).toDateString() === hoje
                );

                if (saquesHoje.length >= 3) {
                    await message.reply(
                        `‚ùå *LIMITE DI√ÅRIO ATINGIDO*\n\n` +
                        `üö´ Limite: 3 saques por dia\n` +
                        `üìä J√° solicitados hoje: ${saquesHoje.length}\n\n` +
                        `‚è∞ Tente novamente amanh√£!`
                    );
                    return;
                }

                // === GERAR REFER√äNCIA √öNICA PARA SAQUE ===
                const agora = new Date();
                let referenciaSaque = null;
                let tentativasGeracao = 0;
                const maxTentativasGeracao = 10;

                // Tentar gerar refer√™ncia √∫nica
                while (!referenciaSaque && tentativasGeracao < maxTentativasGeracao) {
                    tentativasGeracao++;

                    // Gerar refer√™ncia baseada em data + contador + tentativa
                    const anoMesDia = `${agora.getFullYear().toString().slice(-2)}${String(agora.getMonth() + 1).padStart(2, '0')}${String(agora.getDate()).padStart(2, '0')}`;
                    const contador = String(Object.keys(pedidosSaque).length + tentativasGeracao).padStart(3, '0');
                    const timestamp = String(Date.now()).slice(-3); // √öltimos 3 d√≠gitos do timestamp
                    const refCandidato = `SAQ${anoMesDia}${contador}`;

                    console.log(`üîÑ Tentativa ${tentativasGeracao}: Gerando refer√™ncia ${refCandidato}`);

                    // Verificar se j√° existe localmente
                    if (pedidosSaque[refCandidato]) {
                        console.warn(`‚ö†Ô∏è Refer√™ncia ${refCandidato} j√° existe localmente, tentando outra...`);
                        continue;
                    }

                    // Verificar se j√° existe na planilha (fazer verifica√ß√£o pr√©via)
                    // Por enquanto, aceitar se n√£o existir localmente
                    referenciaSaque = refCandidato;
                    console.log(`‚úÖ Refer√™ncia gerada: ${referenciaSaque}`);
                }

                // Se n√£o conseguiu gerar refer√™ncia √∫nica ap√≥s todas as tentativas
                if (!referenciaSaque) {
                    console.error(`‚ùå ERRO CR√çTICO: N√£o foi poss√≠vel gerar refer√™ncia √∫nica ap√≥s ${maxTentativasGeracao} tentativas`);
                    await message.reply(
                        `‚ùå *ERRO TEMPOR√ÅRIO*\n\n` +
                        `‚ö†Ô∏è Ocorreu um erro ao gerar a refer√™ncia do saque.\n` +
                        `üîÑ Por favor, tente novamente em alguns segundos.\n\n` +
                        `üìû Se o problema persistir, contate o suporte.`
                    );
                    return;
                }

                console.log(`üí∞ INICIANDO SAQUE: ${referenciaSaque} para ${remetente} - ${quantidadeMB}MB`);

                // Criar pedido
                const pedido = {
                    referencia: referenciaSaque,
                    cliente: remetente,
                    nomeCliente: message._data.notifyName || 'N/A',
                    quantidade: quantidadeMB,
                    numeroDestino: numeroDestino,
                    dataSolicitacao: agora.toISOString(),
                    status: 'pendente',
                    grupo: message.from
                };

                // Salvar pedido ANTES de debitar
                pedidosSaque[referenciaSaque] = pedido;
                console.log(`‚úÖ Pedido ${referenciaSaque} criado no sistema`);

                // === SALVAMENTO IMEDIATO #1: PEDIDO CRIADO ===
                console.log(`üíæ Salvando pedido de saque imediatamente...`);
                await salvarDadosReferencia();

                // Debitar do saldo em todos os formatos
                await atualizarSaldoBonus(remetente, (saldoObj) => {
                    saldoObj.saldo -= quantidadeMB;
                    saldoObj.historicoSaques = saldoObj.historicoSaques || [];
                    saldoObj.historicoSaques.push({
                        referencia: referenciaSaque,
                        quantidade: quantidadeMB,
                        data: agora.toISOString()
                    });
                });
                console.log(`‚úÖ Saldo debitado: -${quantidadeMB}MB`);

                // === SALVAMENTO IMEDIATO #2: SALDO DEBITADO ===
                console.log(`üíæ Salvando saldo atualizado imediatamente...`);
                await salvarDadosReferencia();

                // Enviar para Tasker/Planilha com valida√ß√£o e RETRY autom√°tico em caso de duplicata
                const quantidadeFormatada = quantidadeMB >= 1024 ? `${(quantidadeMB/1024).toFixed(2)}GB` : `${quantidadeMB}MB`;
                let resultadoEnvio;
                let referenciaFinal = referenciaSaque;
                let tentativasEnvio = 0;
                const maxTentativasEnvio = 5;

                // Loop de retry com gera√ß√£o de nova refer√™ncia em caso de duplicata
                while (tentativasEnvio < maxTentativasEnvio) {
                    tentativasEnvio++;

                    try {
                        console.log(`üìä Tentativa ${tentativasEnvio}/${maxTentativasEnvio}: Enviando saque ${referenciaFinal} para planilha...`);
                        resultadoEnvio = await enviarParaTasker(
                            referenciaFinal,
                            quantidadeMB,
                            numeroDestino,
                            message.from,
                            message._data.notifyName || 'Cliente'
                        );

                        // === VERIFICAR SE √â DUPLICATA NA PLANILHA ===
                        if (resultadoEnvio && resultadoEnvio.duplicado) {
                            console.warn(`‚ö†Ô∏è DUPLICATA DETECTADA na planilha: ${referenciaFinal} (Status: ${resultadoEnvio.status_existente})`);

                            // Gerar nova refer√™ncia independente do status
                            console.log(`üîÑ Gerando nova refer√™ncia para evitar duplicata (Status: ${resultadoEnvio.status_existente})...`);

                            // Remover pedido antigo
                            delete pedidosSaque[referenciaFinal];

                            // Gerar nova refer√™ncia
                            const novaRefSufixo = String(Date.now()).slice(-4); // √öltimos 4 d√≠gitos do timestamp
                            const novaRef = `SAQ${agora.getFullYear().toString().slice(-2)}${String(agora.getMonth() + 1).padStart(2, '0')}${String(agora.getDate()).padStart(2, '0')}${novaRefSufixo}`;

                            console.log(`üÜï Nova refer√™ncia gerada: ${novaRef}`);
                            referenciaFinal = novaRef;

                            // Atualizar hist√≥rico com nova refer√™ncia
                            await atualizarSaldoBonus(remetente, (saldoObj) => {
                                if (saldoObj.historicoSaques && saldoObj.historicoSaques.length > 0) {
                                    saldoObj.historicoSaques[saldoObj.historicoSaques.length - 1].referencia = novaRef;
                                }
                            });

                            // Criar novo pedido com nova refer√™ncia
                            pedidosSaque[novaRef] = {
                                referencia: novaRef,
                                cliente: remetente,
                                nomeCliente: message._data.notifyName || 'N/A',
                                quantidade: quantidadeMB,
                                numeroDestino: numeroDestino,
                                dataSolicitacao: agora.toISOString(),
                                status: 'pendente',
                                grupo: message.from
                            };

                            console.log(`‚úÖ Pedido recriado com nova refer√™ncia: ${novaRef}`);

                            // === SALVAMENTO IMEDIATO #5: NOVA REFER√äNCIA GERADA ===
                            console.log(`üíæ Salvando nova refer√™ncia imediatamente...`);
                            await salvarDadosReferencia();

                            // Continuar loop para tentar enviar com nova refer√™ncia
                            continue;
                        }

                        // === VERIFICAR SE O ENVIO FOI BEM-SUCEDIDO ===
                        if (!resultadoEnvio || !resultadoEnvio.sucesso) {
                            console.error('‚ùå ERRO: Saque n√£o foi enviado para a planilha!');
                            console.error('Resultado:', resultadoEnvio);

                            // Se n√£o for duplicata, n√£o tentar novamente - sair do loop
                            break;
                        }

                        // Sucesso! Sair do loop
                        console.log(`‚úÖ Saque ${referenciaFinal} enviado com sucesso!`);
                        break;

                    } catch (error) {
                        console.error(`‚ùå Exce√ß√£o na tentativa ${tentativasEnvio}:`, error.message);
                        // Em caso de exce√ß√£o, sair do loop
                        break;
                    }
                }

                // Ap√≥s todas as tentativas, verificar resultado final
                if (!resultadoEnvio || !resultadoEnvio.sucesso) {
                    console.error('‚ùå FALHA FINAL: Saque n√£o foi enviado ap√≥s todas as tentativas');
                    console.error('Resultado final:', resultadoEnvio);

                    // Reverter o d√©bito do saldo
                    console.log(`üîÑ Revertendo d√©bito de ${quantidadeMB}MB...`);
                    await atualizarSaldoBonus(remetente, (saldoObj) => {
                        saldoObj.saldo += quantidadeMB;
                        if (saldoObj.historicoSaques && saldoObj.historicoSaques.length > 0) {
                            saldoObj.historicoSaques.pop();
                        }
                    });

                    // Remover pedido da lista
                    delete pedidosSaque[referenciaFinal];
                    console.log(`‚úÖ Saldo restaurado e pedido removido`);

                    // === SALVAMENTO IMEDIATO #4: REVERS√ÉO DE SALDO ===
                    console.log(`üíæ Salvando revers√£o de saldo imediatamente...`);
                    await salvarDadosReferencia();

                    await message.reply(
                        `‚ùå *ERRO AO PROCESSAR SAQUE*\n\n` +
                        `‚ö†Ô∏è N√£o foi poss√≠vel enviar o pedido para a planilha.\n` +
                        `üí∞ Seu saldo foi restaurado.\n` +
                        `üîÑ Por favor, tente novamente em alguns minutos.\n\n` +
                        `üìû Se o problema persistir, contate o suporte.\n` +
                        `üîñ Ref: ${referenciaFinal}`
                    );

                    // Tentar notificar admin
                    try {
                        const grupoInfo = await client.getChatById(message.from);
                        if (grupoInfo && grupoInfo.participants) {
                            const admins = grupoInfo.participants.filter(p => p.isAdmin || p.isSuperAdmin);
                            if (admins.length > 0) {
                                const adminId = admins[0].id._serialized;
                                const nomeClienteSeguro = sanitizeText(message._data.notifyName || 'N/A');

                                await client.sendMessage(adminId,
                                    `üö® *ALERTA: FALHA NO SISTEMA DE SAQUE*\n\n` +
                                    `‚ùå Saque falhou ap√≥s ${tentativasEnvio} tentativas.\n\n` +
                                    `üìã *Detalhes:*\n` +
                                    `üîñ Refer√™ncia: ${referenciaFinal}\n` +
                                    `üë§ Cliente: ${nomeClienteSeguro}\n` +
                                    `üí∞ Valor: ${quantidadeMB}MB\n\n` +
                                    `‚úÖ Saldo restaurado.\n` +
                                    `üîß Verifique Google Sheets.`
                                );
                                console.log(`üìß Notifica√ß√£o enviada ao admin`);
                            }
                        }
                    } catch (notifyError) {
                        console.error('‚ùå Falha ao notificar admin:', notifyError.message);
                    }

                    return;
                }

                // Sucesso! Marcar pedido como enviado
                console.log(`‚úÖ Saque ${referenciaFinal} enviado com sucesso!`);
                if (pedidosSaque[referenciaFinal]) {
                    pedidosSaque[referenciaFinal].status = 'enviado';
                    pedidosSaque[referenciaFinal].dataEnvio = new Date().toISOString();

                    // === SALVAMENTO IMEDIATO #3: PEDIDO ENVIADO ===
                    console.log(`üíæ Salvando status 'enviado' imediatamente...`);
                    await salvarDadosReferencia();
                }

                // Enviar mensagem de confirma√ß√£o ao cliente
                try {
                    const saldoAtualizado = await buscarSaldoBonus(remetente);
                    const novoSaldo = saldoAtualizado ? saldoAtualizado.saldo : 0;

                    // Sanitizar nome do cliente (fallback para nome original se falhar)
                    let nomeCliente = message._data.notifyName || 'N/A';
                    try {
                        nomeCliente = sanitizeText(nomeCliente);
                    } catch (e) {
                        console.warn('‚ö†Ô∏è Erro ao sanitizar nome, usando original');
                    }

                    const mensagemSucesso = `‚úÖ *SOLICITA√á√ÉO DE SAQUE CRIADA*\n\n` +
                        `üë§ Cliente: ${nomeCliente}\n` +
                        `üì± N√∫mero: ${numeroDestino}\n` +
                        `üíé Quantidade: ${quantidadeFormatada}\n` +
                        `üîñ Refer√™ncia: *${referenciaFinal}*\n` +
                        `‚è∞ Processamento: at√© 24h\n\n` +
                        `üí∞ *Novo saldo:* ${novoSaldo}MB\n\n` +
                        `‚úÖ Pedido enviado para processamento!\n` +
                        `‚úÖ Obrigado por usar nosso sistema de refer√™ncias!`;

                    console.log(`üì§ Enviando confirma√ß√£o de saque no GRUPO...`);

                    // Enviar no GRUPO (reply na mensagem original)
                    await message.reply(mensagemSucesso);
                    console.log(`‚úÖ Confirma√ß√£o de saque enviada no GRUPO com sucesso!`);

                } catch (errorMensagem) {
                    console.error('‚ùå ERRO ao enviar mensagem de confirma√ß√£o:', errorMensagem);
                    console.error('Stack:', errorMensagem.stack);

                    // Tentar enviar vers√£o simplificada
                    try {
                        await client.sendMessage(message.from,
                            `‚úÖ *SAQUE CRIADO*\n\n` +
                            `üîñ Refer√™ncia: ${referenciaFinal}\n` +
                            `üíé Quantidade: ${quantidadeFormatada}\n` +
                            `üì± N√∫mero: ${numeroDestino}\n\n` +
                            `‚úÖ Pedido em processamento!`
                        );
                        console.log(`‚úÖ Mensagem simplificada enviada`);
                    } catch (errorSimples) {
                        console.error('‚ùå Falha tamb√©m na mensagem simplificada:', errorSimples.message);
                    }
                }
                return;
            }
        }

        // === DETEC√á√ÉO DE GRUPOS N√ÉO CONFIGURADOS ===
        if (message.from.endsWith('@g.us') && !isGrupoMonitorado(message.from) && !message.fromMe) {
            if (!gruposLogados.has(message.from)) {
                await logGrupoInfo(message.from, 'MENSAGEM RECEBIDA');
                gruposLogados.add(message.from);
                
                // Limpar cache a cada 50 grupos para evitar memory leak
                if (gruposLogados.size > 50) {
                    gruposLogados.clear();
                }
            }
        }

        // === PROCESSAMENTO DE GRUPOS ===
        if (!message.from.endsWith('@g.us') || !isGrupoMonitorado(message.from)) {
            return;
        }

        const configGrupo = getConfiguracaoGrupo(message.from);
        if (!configGrupo || message.fromMe) {
            return;
        }

        // === DETEC√á√ÉO DE NOVOS MEMBROS (ALTERNATIVO) ===
        await detectarNovoMembro(message.from, autorMensagem, configGrupo);

        // === MODERA√á√ÉO ===
        if (message.type === 'chat') {
            // Verificar se √© um comando administrativo antes da modera√ß√£o
            const isComandoAdmin = message.body.startsWith('.') && (
                message.body.startsWith('.addcomando ') ||
                message.body.startsWith('.delcomando ') ||
                message.body.startsWith('.comandos') ||
                message.body.startsWith('.ia') ||
                message.body.startsWith('.stats') ||
                message.body.startsWith('.sheets') ||
                message.body.startsWith('.test_') ||
                message.body.startsWith('.grupos') ||
                message.body.startsWith('.clear_') ||
                message.body.startsWith('.ranking') ||
                message.body.startsWith('.inativos') ||
                message.body.startsWith('.detetives') ||
                message.body.startsWith('.semcompra') ||
                message.body.startsWith('.resetranking')
            );

            // Verificar se √© admin executando comando
            const autorModeracaoMsg = message.author || message.from;
            const isAdminExecutando = isAdministrador(autorModeracaoMsg);

            // Pular modera√ß√£o para comandos administrativos executados por admins
            if (!isComandoAdmin || !isAdminExecutando) {
                const analise = contemConteudoSuspeito(message.body);
                
                if (analise.suspeito) {
                    console.log(`üö® Conte√∫do suspeito detectado`);
                    await aplicarModeracao(message, "Link detectado");
                    return;
                }
            }
        }

        // === PROCESSAMENTO DE IMAGENS DESATIVADO ===
        if (message.type === 'image') {
            console.log(`üì∏ Imagem recebida - Processamento desativado`);

            await message.reply(
                '‚ùå Processamento de imagens desativado\n' +
                'üìÑ Solicitamos que o comprovante seja enviado em formato de texto.\n\n' +
                '‚ÑπÔ∏è Esta medida foi adotada para garantir que o sistema funcione de forma mais r√°pida, est√°vel e com menos falhas.'
            );
            return;
        }

        if (message.type !== 'chat') {
            return;
        }

        // Comandos de tabela e pagamento
        if (/tabela/i.test(message.body)) {
            await safeReply(message, client, configGrupo.tabela);
            return;
        }

        if (/pagamento/i.test(message.body)) {
            await safeReply(message, client, configGrupo.pagamento);
            return;
        }

        // === DETEC√á√ÉO DE PERGUNTA POR N√öMERO (N√ÉO-ADMIN) ===
        if (!isAdmin && detectarPerguntaPorNumero(message.body)) {
            console.log(`üì± Pergunta por n√∫mero detectada de n√£o-admin`);
            await message.reply(
                `üì± *Para solicitar n√∫mero ou suporte:*\n\n` +
                `üí≥ *Primeiro fa√ßa o pagamento:*\n\n` +
                `${configGrupo.pagamento}\n\n` +
                `üìù *Depois envie:*\n` +
                `‚Ä¢ Comprovante de pagamento\n` +
                `‚Ä¢ N√∫mero que vai receber os megas\n\n` +
                `ü§ñ *Sistema autom√°tico 24/7!*`
            );
            return;
        }

        // === VERIFICAR COMANDOS CUSTOMIZADOS ===
        const textoMensagem = message.body.trim().toLowerCase();
        const respostaComando = executarComandoCustomizado(message.from, textoMensagem);
        
        if (respostaComando) {
            await message.reply(respostaComando);
            console.log(`üéØ Comando customizado '${textoMensagem}' executado no grupo ${message.from}`);
            return;
        }

        // === MONITORAMENTO DE CONFIRMA√á√ïES DO BOT SECUND√ÅRIO ===
        if (sistemaCompras && message.body.includes('‚úÖ') && message.body.includes('Transa√ß√£o Conclu√≠da Com Sucesso')) {
            // Extrair refer√™ncia do padr√£o: "üîñ *Refer√™ncia:* CI22H8QJSDQ"
            const regexReferencia = /üîñ\s*\*?Refer√™ncia:\*?\s*([A-Za-z0-9._-]+)/i;
            const matchReferencia = message.body.match(regexReferencia);
            
            // Extrair n√∫mero do padr√£o: "üì± *N√∫mero:* 842362318"
            const regexNumero = /üì±\s*\*?N√∫mero:\*?\s*(\d{9})/i;
            const matchNumero = message.body.match(regexNumero);
            
            if (matchReferencia && matchNumero) {
                const referenciaConfirmada = matchReferencia[1]; // Manter case original
                const numeroConfirmado = matchNumero[1];
                console.log(`üõí CONFIRMA√á√ÉO BOT: Detectada transa√ß√£o conclu√≠da - Ref: ${referenciaConfirmada} | N√∫mero: ${numeroConfirmado}`);
                console.log(`üîç CONFIRMA√á√ÉO BOT: Tipo detectado: ${/emola|e-mola/i.test(message.body) ? 'EMOLA' : /mpesa|m-pesa/i.test(message.body) ? 'MPESA' : 'DESCONHECIDO'}`);
                
                // Processar confirma√ß√£o
                const resultadoConfirmacao = await sistemaCompras.processarConfirmacao(referenciaConfirmada, numeroConfirmado);
                
                if (resultadoConfirmacao) {
                    console.log(`‚úÖ COMPRAS: Confirma√ß√£o processada - ${resultadoConfirmacao.numero} | ${resultadoConfirmacao.megas}MB`);
                    
                    // Enviar mensagem de parabeniza√ß√£o com men√ß√£o clic√°vel (igual √†s boas-vindas)
                    if (resultadoConfirmacao.mensagem && resultadoConfirmacao.contactId) {
                        try {
                            // Normalizar ID para formato @c.us igual √†s boas-vindas
                            const participantId = resultadoConfirmacao.contactId; // IGUAL √ÄS BOAS-VINDAS
                            // Usar exato formato das boas-vindas
                            const mensagemFinal = resultadoConfirmacao.mensagem.replace('@NOME_PLACEHOLDER', `@${participantId.replace('@c.us', '').replace('@lid', '')}`);

                            // Enviar com men√ß√£o igual √†s boas-vindas
                            await client.sendMessage(message.from, mensagemFinal, {
                                mentions: [participantId]
                            });
                        } catch (error) {
                            console.error('‚ùå Erro ao enviar parabeniza√ß√£o com men√ß√£o:', error);
                            // Fallback: enviar sem men√ß√£o clic√°vel
                            const participantId = resultadoConfirmacao.contactId; // IGUAL √ÄS BOAS-VINDAS
                            const mensagemFallback = resultadoConfirmacao.mensagem.replace('@NOME_PLACEHOLDER', `@${participantId.replace('@c.us', '').replace('@lid', '')}`);
                            await message.reply(mensagemFallback);
                        }
                    }
                } else {
                    console.log(`‚ö†Ô∏è COMPRAS: Confirma√ß√£o ${referenciaConfirmada} n√£o encontrada ou j√° processada`);
                }
                return;
            }
        }

        // === PROCESSAMENTO COM IA (L√ìGICA SIMPLES IGUAL AO BOT ATACADO) ===
        const remetente = message.author || message.from;
        const resultadoIA = await ia.processarMensagemBot(message.body, remetente, 'texto', configGrupo);
        
        if (resultadoIA.erro) {
            console.error(`‚ùå Erro na IA:`, resultadoIA.mensagem);
            return;
        }

        if (resultadoIA.sucesso) {
            
            if (resultadoIA.tipo === 'comprovante_recebido' || resultadoIA.tipo === 'comprovante_imagem_recebido') {
                const metodoInfo = resultadoIA.metodo ? ` (${resultadoIA.metodo})` : '';
                await message.reply(
                    `‚úÖ *Comprovante processado${metodoInfo}!*\n\n` +
                    `üí∞ Refer√™ncia: ${resultadoIA.referencia}\n` +
                    `üìä Megas: ${resultadoIA.megas}\n\n` +
                    `üì± *Envie UM n√∫mero que vai receber ${resultadoIA.megas}!*`
                );
                return;
                
            } else if (resultadoIA.tipo === 'numero_processado_com_aviso') {
                const dadosCompletos = resultadoIA.dadosCompletos;
                const [referencia, megas, numero] = dadosCompletos.split('|');
                const nomeContato = message._data.notifyName || 'N/A';
                const autorMensagem = message.author || 'Desconhecido';

                // === VERIFICA√á√ÉO DE VALOR MUITO BAIXO ===
                if (megas === 'VALOR_MUITO_BAIXO') {
                    console.log(`‚ùå VALOR MUITO BAIXO: ${referencia} - valor abaixo do pacote m√≠nimo`);

                    const configGrupo = getConfiguracaoGrupo(message.from);
                    const precos = ia.extrairPrecosTabela(configGrupo.tabela);
                    const menorPreco = Math.min(...precos.map(p => p.preco));

                    await message.reply(
                        `‚ùå *Valor muito baixo*\n\n` +
                        `üí≥ O valor transferido est√° abaixo do pacote m√≠nimo dispon√≠vel.\n\n` +
                        `üìã *Pacote mais barato:* ${menorPreco}MT\n\n` +
                        `üí° *Para ver todos os pacotes:* digite "tabela"`
                    );
                    return;
                }

                // PROCESSAR B√îNUS DE REFER√äNCIA
                const bonusInfo = await processarBonusCompra(remetente, megas);

                // VERIFICAR PAGAMENTO ANTES DE ENVIAR PARA PLANILHA
                // Usar o valor real do comprovante (n√£o o valor calculado dos megas)
                const valorComprovante = resultadoIA.valorComprovante || megas;
                const pagamentoConfirmado = await verificarPagamentoIndividual(referencia, valorComprovante);

                // Verificar se pagamento j√° foi processado
                if (pagamentoConfirmado === 'JA_PROCESSADO') {
                    console.log(`‚ö†Ô∏è REVENDEDORES: Pagamento ${referencia} j√° foi processado anteriormente!`);
                    await message.reply(
                        `‚ö†Ô∏è *PAGAMENTO J√Å PROCESSADO*\n\n` +
                        `üí∞ Refer√™ncia: ${referencia}\n` +
                        `üìä Megas: ${megas} MB\n` +
                        `üì± N√∫mero: ${numero}\n\n` +
                        `‚ùå Este pagamento j√° foi processado anteriormente.\n` +
                        `üìù Evite enviar o mesmo comprovante m√∫ltiplas vezes.\n\n` +
                        `‚è∞ ${new Date().toLocaleString('pt-BR')}`
                    );
                    return;
                }

                if (!pagamentoConfirmado) {
                    console.log(`‚ùå REVENDEDORES: Pagamento n√£o confirmado para texto - ${referencia} (${valorComprovante}MT)`);

                    // Adicionar √† fila de retry silencioso
                    await adicionarPagamentoPendente(referencia, valorComprovante, dadosCompletos, message, resultadoIA);

                    await message.reply(
                        `‚è≥ *AGUARDANDO MENSAGEM DE CONFIRMA√á√ÉO*\n\n` +
                        `üí∞ Refer√™ncia: ${referencia}\n` +
                        `üìä Megas: ${megas} MB\n` +
                        `üì± N√∫mero: ${numero}\n` +
                        `üí≥ Valor: ${valorComprovante}MT\n\n` +
                        `üì® A mensagem de confirma√ß√£o ainda n√£o foi recebida no sistema.\n` +
                        `üîÑ Verifica√ß√£o autom√°tica ativa - voc√™ ser√° notificado quando confirmado!\n` +
                        `‚è∞ ${new Date().toLocaleString('pt-BR')}`
                    );
                    return;
                }

                console.log(`‚úÖ REVENDEDORES: Pagamento confirmado para texto! Processando...`);

                const resultadoEnvio = await enviarParaTasker(referencia, megas, numero, message.from, autorMensagem);

                // Verificar se √© pedido duplicado
                if (resultadoEnvio && resultadoEnvio.duplicado) {
                    const statusTexto = resultadoEnvio.status_existente === 'PROCESSADO' ? 'j√° foi processado' : 'est√° pendente na fila';
                    await message.reply(
                        `‚ö†Ô∏è *PEDIDO DUPLICADO DETECTADO*\n\n` +
                        `üí∞ Refer√™ncia: ${referencia}\n` +
                        `üìä Megas: ${megas} MB\n` +
                        `üì± N√∫mero: ${numero}\n\n` +
                        `‚ùå Este pedido ${statusTexto}.\n` +
                        `üìù Status: ${resultadoEnvio.status_existente}\n\n` +
                        `‚è∞ ${new Date().toLocaleString('pt-BR')}`
                    );
                    return;
                }

                // === MARCAR PAGAMENTO COMO PROCESSADO AP√ìS ENVIO BEM-SUCEDIDO ===
                if (resultadoEnvio && resultadoEnvio.sucesso) {
                    await marcarPagamentoComoProcessado(referencia, valorComprovante);
                }

                await registrarComprador(message.from, numero, nomeContato, megas);

                // REMOVIDO: Encaminhamento de mensagens (sistema movido para outro bot)

                // Enviar mensagem normal + aviso da tabela
                await message.reply(
                    `‚úÖ *Pedido Recebido!*\n\n` +
                    `üí∞ Refer√™ncia: ${referencia}\n` +
                    `üìä Megas: ${megas} MB\n` +
                    `üì± N√∫mero: ${numero}\n\n` +
                    `${resultadoIA.avisoTabela}`
                );
                return;
                
            } else if (resultadoIA.tipo === 'numero_processado') {
                const dadosCompletos = resultadoIA.dadosCompletos;
                const [referencia, megas, numero] = dadosCompletos.split('|');
                const nomeContato = message._data.notifyName || 'N/A';
                const autorMensagem = message.author || 'Desconhecido';

                // === VERIFICA√á√ÉO DE VALOR MUITO BAIXO ===
                if (megas === 'VALOR_MUITO_BAIXO') {
                    console.log(`‚ùå VALOR MUITO BAIXO: ${referencia} - valor abaixo do pacote m√≠nimo`);

                    const configGrupo = getConfiguracaoGrupo(message.from);
                    const precos = ia.extrairPrecosTabela(configGrupo.tabela);
                    const menorPreco = Math.min(...precos.map(p => p.preco));

                    await message.reply(
                        `‚ùå *Valor muito baixo*\n\n` +
                        `üí≥ O valor transferido est√° abaixo do pacote m√≠nimo dispon√≠vel.\n\n` +
                        `üìã *Pacote mais barato:* ${menorPreco}MT\n\n` +
                        `üí° *Para ver todos os pacotes:* digite "tabela"`
                    );
                    return;
                }

                // PROCESSAR B√îNUS DE REFER√äNCIA
                const bonusInfo = await processarBonusCompra(remetente, megas);

                // VERIFICAR PAGAMENTO ANTES DE ENVIAR PARA PLANILHA
                // Usar o valor real do comprovante (n√£o o valor calculado dos megas)
                const valorComprovante = resultadoIA.valorComprovante || megas;
                const pagamentoConfirmado = await verificarPagamentoIndividual(referencia, valorComprovante);

                // Verificar se pagamento j√° foi processado
                if (pagamentoConfirmado === 'JA_PROCESSADO') {
                    console.log(`‚ö†Ô∏è REVENDEDORES: Pagamento ${referencia} j√° foi processado anteriormente!`);
                    await message.reply(
                        `‚ö†Ô∏è *PAGAMENTO J√Å PROCESSADO*\n\n` +
                        `üí∞ Refer√™ncia: ${referencia}\n` +
                        `üìä Megas: ${megas} MB\n` +
                        `üì± N√∫mero: ${numero}\n\n` +
                        `‚ùå Este pagamento j√° foi processado anteriormente.\n` +
                        `üìù Evite enviar o mesmo comprovante m√∫ltiplas vezes.\n\n` +
                        `‚è∞ ${new Date().toLocaleString('pt-BR')}`
                    );
                    return;
                }

                if (!pagamentoConfirmado) {
                    console.log(`‚ùå REVENDEDORES: Pagamento n√£o confirmado para texto - ${referencia} (${valorComprovante}MT)`);

                    // Adicionar √† fila de retry silencioso
                    await adicionarPagamentoPendente(referencia, valorComprovante, dadosCompletos, message, resultadoIA);

                    await message.reply(
                        `‚è≥ *AGUARDANDO MENSAGEM DE CONFIRMA√á√ÉO*\n\n` +
                        `üí∞ Refer√™ncia: ${referencia}\n` +
                        `üìä Megas: ${megas} MB\n` +
                        `üì± N√∫mero: ${numero}\n` +
                        `üí≥ Valor: ${valorComprovante}MT\n\n` +
                        `üì® A mensagem de confirma√ß√£o ainda n√£o foi recebida no sistema.\n` +
                        `üîÑ Verifica√ß√£o autom√°tica ativa - voc√™ ser√° notificado quando confirmado!\n` +
                        `‚è∞ ${new Date().toLocaleString('pt-BR')}`
                    );
                    return;
                }

                console.log(`‚úÖ REVENDEDORES: Pagamento confirmado para texto! Processando...`);

                const resultadoEnvio = await enviarParaTasker(referencia, megas, numero, message.from, autorMensagem);

                // Verificar se √© pedido duplicado
                if (resultadoEnvio && resultadoEnvio.duplicado) {
                    const statusTexto = resultadoEnvio.status_existente === 'PROCESSADO' ? 'j√° foi processado' : 'est√° pendente na fila';
                    await message.reply(
                        `‚ö†Ô∏è *PEDIDO DUPLICADO DETECTADO*\n\n` +
                        `üí∞ Refer√™ncia: ${referencia}\n` +
                        `üìä Megas: ${megas} MB\n` +
                        `üì± N√∫mero: ${numero}\n\n` +
                        `‚ùå Este pedido ${statusTexto}.\n` +
                        `üìù Status: ${resultadoEnvio.status_existente}\n\n` +
                        `‚è∞ ${new Date().toLocaleString('pt-BR')}`
                    );
                    return;
                }

                // === MARCAR PAGAMENTO COMO PROCESSADO AP√ìS ENVIO BEM-SUCEDIDO ===
                if (resultadoEnvio && resultadoEnvio.sucesso) {
                    await marcarPagamentoComoProcessado(referencia, valorComprovante);
                }

                await registrarComprador(message.from, numero, nomeContato, megas);

                // REMOVIDO: Encaminhamento de mensagens (sistema movido para outro bot)

                await message.reply(
                    `‚úÖ *Pedido Recebido!*\n\n` +
                    `üí∞ Refer√™ncia: ${referencia}\n` +
                    `üìä Megas: ${megas}\n` +
                    `üì± N√∫mero: ${numero}\n\n` +
                    `_‚è≥Processando... Aguarde enquanto o Sistema executa a transfer√™ncia_`
                );
                return;
            }
        }

        // === TRATAMENTO DE ERROS ===
        if (resultadoIA.tipo === 'numeros_sem_comprovante') {
            await message.reply(
                `üì± *N√∫mero detectado*\n\n` +
                `‚ùå N√£o encontrei seu comprovante.\n\n` +
                `üìù Envie primeiro o comprovante de pagamento.`
            );
            return;
        }

    } catch (error) {
        console.error('‚ùå Erro ao processar mensagem:', error);
    }
}

// Novo handler principal com queue
client.on('message', async (message) => {
    try {
        // LOG: Verificar se √© administrador enviando mensagem em grupo
        if (message.from.endsWith('@g.us')) {
            const autorMensagem = message.author || message.from;
            if (isAdministrador(autorMensagem)) {
                const chat = await message.getChat();
                const nomeGrupo = chat.name || 'Grupo';
                const contato = await message.getContact();
                const nomeAdmin = contato.pushname || contato.name || autorMensagem;
                console.log(`üëë ADMIN DETECTADO: ${nomeAdmin} (${autorMensagem}) enviou mensagem no grupo "${nomeGrupo}"`);
            }
        }

        // PRIMEIRO: Tentar aprender mapeamentos LID automaticamente
        await aprenderMapeamento(message);

        // Registrar primeira mensagem do membro no grupo (se for grupo)
        // REMOVIDO: Registro de primeira mensagem (sistema movido para outro bot)

        // Segundo: tentar processar comandos administrativos r√°pidos
        const adminProcessed = await handleAdminCommands(message);
        if (adminProcessed) return;

        // Segundo: verificar se precisa ir para fila
        const needsQueue = await handlePurchaseCommands(message);

        if (needsQueue) {
            // Adicionar √† fila ass√≠ncrona para processamento
            await messageQueue.add(message, processMessage);
        } else {
            // Processar diretamente mensagens simples
            await processMessage(message);
        }

    } catch (error) {
        console.error('‚ùå Erro no handler principal de mensagem:', error);
    }
});

client.on('disconnected', (reason) => {
    console.log('‚ùå Bot desconectado:', reason);
});

// Capturar erros n√£o tratados
process.on('unhandledRejection', (reason, promise) => {
    if (reason.message && reason.message.includes('Execution context was destroyed')) {
        console.log('‚ö†Ô∏è Contexto do Puppeteer reiniciado, continuando...');
    } else {
        console.error('‚ùå Promise rejeitada:', reason);
    }
});

process.on('uncaughtException', (error) => {
    console.error('‚ùå Erro n√£o capturado:', error.message);
});

// === INICIALIZA√á√ÉO ===
(async function inicializar() {
    console.log('üöÄ Iniciando bot...');
    await carregarComandosCustomizados();
    console.log('üîß Comandos carregados, inicializando cliente WhatsApp...');
    
    try {
        client.initialize();
        console.log('üì± Cliente WhatsApp inicializado, aguardando conex√£o...');
    } catch (error) {
        console.error('‚ùå Erro ao inicializar cliente:', error);
    }
})();

// === APENAS 3 TIMERS ESSENCIAIS (SEGUINDO PADR√ÉO BOT1) ===

// 1. Salvar hist√≥rico a cada 5 minutos (como bot1)
setInterval(salvarHistorico, 5 * 60 * 1000);

// 2. Limpar cache geral a cada hora (como bot1 - simples e eficaz)
setInterval(() => {
    // Limpar cache de transa√ß√µes
    if (cacheTransacoes.size > 200) {
        const keys = Array.from(cacheTransacoes.keys());
        const oldKeys = keys.slice(0, keys.length - 100);
        oldKeys.forEach(key => cacheTransacoes.delete(key));
    }

    // Limpar cache admin seguindo padr√£o bot1 (similar ao bot1: > 50 = clear)
    if (adminCache.size > 50) {
        adminCache.clear();
    }

    // Limpar outros caches seguindo padr√£o bot1
    if (gruposLogados && gruposLogados.size > 50) gruposLogados.clear();
    if (membrosProcessadosViaEvent && membrosProcessadosViaEvent.size > 50) membrosProcessadosViaEvent.clear();

    console.log('üóëÔ∏è Cache geral limpo');
}, 60 * 60 * 1000); // A cada hora

// 3. Limpar cache de grupos a cada 2 horas (como bot1)
setInterval(() => {
    gruposLogados.clear();
    console.log('üóëÔ∏è Cache de grupos detectados limpo');
}, 2 * 60 * 60 * 1000);

process.on('uncaughtException', (error) => {
    console.error('‚ùå Erro n√£o capturado:', error);
});

process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå Promise rejeitada:', reason);
});

process.on('SIGINT', async () => {
    console.log('\nüíæ Salvando dados finais...');

    try {
        // Salvar apenas dados importantes (sem arquivos desnecess√°rios)
        await Promise.allSettled([
            salvarDadosReferencia(),
            salvarHistorico()
        ]);

        console.log('‚úÖ Dados salvos com sucesso!');
    } catch (error) {
        console.error('‚ùå Erro ao salvar:', error);
    }

    console.log('üß† IA: ATIVA');
    console.log('üìä Google Sheets: CONFIGURADO');
    console.log(`üîó URL: ${GOOGLE_SHEETS_CONFIG.scriptUrl}`);
    console.log('ü§ñ Bot Retalho - Funcionamento otimizado');
    console.log(ia.getStatus());
    process.exit(0);
});










